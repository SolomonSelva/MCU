
STM32C031XX_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007f0  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008a4  080008ac  000018ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008a4  080008a4  000018ac  2**0
                  CONTENTS
  4 .ARM          00000000  080008a4  080008a4  000018ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008a4  080008ac  000018ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008a4  080008a4  000018a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008a8  080008a8  000018a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000018ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080008ac  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080008ac  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009ed  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002b7  00000000  00000000  000022c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00002578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000099  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001cee  00000000  00000000  000026d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001049  00000000  00000000  000043c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008153  00000000  00000000  00005410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000d563  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000228  00000000  00000000  0000d5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0000d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000000 	.word	0x20000000
 80000d4:	00000000 	.word	0x00000000
 80000d8:	0800088c 	.word	0x0800088c

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000004 	.word	0x20000004
 80000f8:	0800088c 	.word	0x0800088c

080000fc <delay>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(void)
{
 80000fc:	b580      	push	{r7, lr}
 80000fe:	b082      	sub	sp, #8
 8000100:	af00      	add	r7, sp, #0
	for(uint32_t i =0; i<500000/5 ; i++);
 8000102:	2300      	movs	r3, #0
 8000104:	607b      	str	r3, [r7, #4]
 8000106:	e002      	b.n	800010e <delay+0x12>
 8000108:	687b      	ldr	r3, [r7, #4]
 800010a:	3301      	adds	r3, #1
 800010c:	607b      	str	r3, [r7, #4]
 800010e:	687b      	ldr	r3, [r7, #4]
 8000110:	4a03      	ldr	r2, [pc, #12]	@ (8000120 <delay+0x24>)
 8000112:	4293      	cmp	r3, r2
 8000114:	d9f8      	bls.n	8000108 <delay+0xc>
}
 8000116:	46c0      	nop			@ (mov r8, r8)
 8000118:	46c0      	nop			@ (mov r8, r8)
 800011a:	46bd      	mov	sp, r7
 800011c:	b002      	add	sp, #8
 800011e:	bd80      	pop	{r7, pc}
 8000120:	0001869f 	.word	0x0001869f

08000124 <main>:

int main(void)
{
 8000124:	b590      	push	{r4, r7, lr}
 8000126:	b087      	sub	sp, #28
 8000128:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed, GpioButton;

	memset(&GpioLed,0,sizeof(GpioLed));
 800012a:	240c      	movs	r4, #12
 800012c:	193b      	adds	r3, r7, r4
 800012e:	220c      	movs	r2, #12
 8000130:	2100      	movs	r1, #0
 8000132:	0018      	movs	r0, r3
 8000134:	f000 fb7e 	bl	8000834 <memset>
	memset(&GpioButton,0,sizeof(GpioButton));
 8000138:	003b      	movs	r3, r7
 800013a:	220c      	movs	r2, #12
 800013c:	2100      	movs	r1, #0
 800013e:	0018      	movs	r0, r3
 8000140:	f000 fb78 	bl	8000834 <memset>

	GpioLed.pGPIOx =GPIOA;
 8000144:	0021      	movs	r1, r4
 8000146:	187b      	adds	r3, r7, r1
 8000148:	22a0      	movs	r2, #160	@ 0xa0
 800014a:	05d2      	lsls	r2, r2, #23
 800014c:	601a      	str	r2, [r3, #0]

	GpioButton.pGPIOx = GPIOC;
 800014e:	003b      	movs	r3, r7
 8000150:	4a1d      	ldr	r2, [pc, #116]	@ (80001c8 <main+0xa4>)
 8000152:	601a      	str	r2, [r3, #0]

	/* LED config */

	GpioLed.GPIOPinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000154:	000c      	movs	r4, r1
 8000156:	193b      	adds	r3, r7, r4
 8000158:	2205      	movs	r2, #5
 800015a:	711a      	strb	r2, [r3, #4]

	GpioLed.GPIOPinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800015c:	193b      	adds	r3, r7, r4
 800015e:	2201      	movs	r2, #1
 8000160:	715a      	strb	r2, [r3, #5]

	GpioLed.GPIOPinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000162:	193b      	adds	r3, r7, r4
 8000164:	2202      	movs	r2, #2
 8000166:	719a      	strb	r2, [r3, #6]

	GpioLed.GPIOPinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000168:	193b      	adds	r3, r7, r4
 800016a:	2200      	movs	r2, #0
 800016c:	721a      	strb	r2, [r3, #8]

	GpioLed.GPIOPinConfig.GPIO_PinPuPdControl  = GPIO_NO_PP;
 800016e:	193b      	adds	r3, r7, r4
 8000170:	2200      	movs	r2, #0
 8000172:	71da      	strb	r2, [r3, #7]

	/* Button config */

	GpioButton.GPIOPinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000174:	003b      	movs	r3, r7
 8000176:	220d      	movs	r2, #13
 8000178:	711a      	strb	r2, [r3, #4]

	GpioButton.GPIOPinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 800017a:	003b      	movs	r3, r7
 800017c:	2205      	movs	r2, #5
 800017e:	715a      	strb	r2, [r3, #5]

	GpioButton.GPIOPinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000180:	003b      	movs	r3, r7
 8000182:	2202      	movs	r2, #2
 8000184:	719a      	strb	r2, [r3, #6]

	//GpioButton.GPIOPinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;

	GpioButton.GPIOPinConfig.GPIO_PinPuPdControl  = GPIO_PIN_PU;
 8000186:	003b      	movs	r3, r7
 8000188:	2201      	movs	r2, #1
 800018a:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClkControl(GPIOA, ENABLE);
 800018c:	23a0      	movs	r3, #160	@ 0xa0
 800018e:	05db      	lsls	r3, r3, #23
 8000190:	2101      	movs	r1, #1
 8000192:	0018      	movs	r0, r3
 8000194:	f000 f854 	bl	8000240 <GPIO_PeriClkControl>

	GPIO_PeriClkControl(GPIOC, ENABLE);
 8000198:	4b0b      	ldr	r3, [pc, #44]	@ (80001c8 <main+0xa4>)
 800019a:	2101      	movs	r1, #1
 800019c:	0018      	movs	r0, r3
 800019e:	f000 f84f 	bl	8000240 <GPIO_PeriClkControl>

	SYSCFG_PeriClkControl(ENABLE);
 80001a2:	2001      	movs	r0, #1
 80001a4:	f000 f8d4 	bl	8000350 <SYSCFG_PeriClkControl>

	GPIO_Init(&GpioLed);
 80001a8:	193b      	adds	r3, r7, r4
 80001aa:	0018      	movs	r0, r3
 80001ac:	f000 f8ee 	bl	800038c <GPIO_Init>

	GPIO_Init(&GpioButton);
 80001b0:	003b      	movs	r3, r7
 80001b2:	0018      	movs	r0, r3
 80001b4:	f000 f8ea 	bl	800038c <GPIO_Init>

	/* IRQ handling */
	GPIO_IRQConfig(IRQ_NO_EXTI4_15, IRQ_PRIO_14, ENABLE);
 80001b8:	2201      	movs	r2, #1
 80001ba:	210e      	movs	r1, #14
 80001bc:	2007      	movs	r0, #7
 80001be:	f000 fa9d 	bl	80006fc <GPIO_IRQConfig>

	while(1);
 80001c2:	46c0      	nop			@ (mov r8, r8)
 80001c4:	e7fd      	b.n	80001c2 <main+0x9e>
 80001c6:	46c0      	nop			@ (mov r8, r8)
 80001c8:	50000800 	.word	0x50000800

080001cc <EXTI4_5_IRQHandler>:


}

void EXTI4_5_IRQHandler (void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	delay();
 80001d0:	f7ff ff94 	bl	80000fc <delay>
	GPIO_IRQHandling(GPIO_PIN_13);
 80001d4:	200d      	movs	r0, #13
 80001d6:	f000 faf9 	bl	80007cc <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_5);
 80001da:	23a0      	movs	r3, #160	@ 0xa0
 80001dc:	05db      	lsls	r3, r3, #23
 80001de:	2105      	movs	r1, #5
 80001e0:	0018      	movs	r0, r3
 80001e2:	f000 fa75 	bl	80006d0 <GPIO_ToggleOutputPin>
}
 80001e6:	46c0      	nop			@ (mov r8, r8)
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}

080001ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ec:	480d      	ldr	r0, [pc, #52]	@ (8000224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001f0:	e000      	b.n	80001f4 <Reset_Handler+0x8>
 80001f2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f4:	480c      	ldr	r0, [pc, #48]	@ (8000228 <LoopForever+0x6>)
  ldr r1, =_edata
 80001f6:	490d      	ldr	r1, [pc, #52]	@ (800022c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000230 <LoopForever+0xe>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001fc:	e002      	b.n	8000204 <LoopCopyDataInit>

080001fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000202:	3304      	adds	r3, #4

08000204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000208:	d3f9      	bcc.n	80001fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800020a:	4a0a      	ldr	r2, [pc, #40]	@ (8000234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800020c:	4c0a      	ldr	r4, [pc, #40]	@ (8000238 <LoopForever+0x16>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000210:	e001      	b.n	8000216 <LoopFillZerobss>

08000212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000214:	3204      	adds	r2, #4

08000216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000218:	d3fb      	bcc.n	8000212 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800021a:	f000 fb13 	bl	8000844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021e:	f7ff ff81 	bl	8000124 <main>

08000222 <LoopForever>:

LoopForever:
  b LoopForever
 8000222:	e7fe      	b.n	8000222 <LoopForever>
  ldr   r0, =_estack
 8000224:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800022c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000230:	080008ac 	.word	0x080008ac
  ldr r2, =_sbss
 8000234:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000238:	2000001c 	.word	0x2000001c

0800023c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC_IRQHandler>
	...

08000240 <GPIO_PeriClkControl>:
 */

#include "stm32c031xx_gpio_driver.h"

void GPIO_PeriClkControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	000a      	movs	r2, r1
 800024a:	1cfb      	adds	r3, r7, #3
 800024c:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE)
 800024e:	1cfb      	adds	r3, r7, #3
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d137      	bne.n	80002c6 <GPIO_PeriClkControl+0x86>
	{
		if (pGPIOx == GPIOA)
 8000256:	687a      	ldr	r2, [r7, #4]
 8000258:	23a0      	movs	r3, #160	@ 0xa0
 800025a:	05db      	lsls	r3, r3, #23
 800025c:	429a      	cmp	r2, r3
 800025e:	d106      	bne.n	800026e <GPIO_PeriClkControl+0x2e>
		{
			GPIOA_PCLK_EN();
 8000260:	4b36      	ldr	r3, [pc, #216]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 8000262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000264:	4b35      	ldr	r3, [pc, #212]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 8000266:	2101      	movs	r1, #1
 8000268:	430a      	orrs	r2, r1
 800026a:	635a      	str	r2, [r3, #52]	@ 0x34
		else
		{
			// Do nothing
		}
	}
}
 800026c:	e062      	b.n	8000334 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOB)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a33      	ldr	r2, [pc, #204]	@ (8000340 <GPIO_PeriClkControl+0x100>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClkControl+0x44>
			GPIOB_PCLK_EN();
 8000276:	4b31      	ldr	r3, [pc, #196]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 8000278:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800027a:	4b30      	ldr	r3, [pc, #192]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 800027c:	2102      	movs	r1, #2
 800027e:	430a      	orrs	r2, r1
 8000280:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000282:	e057      	b.n	8000334 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOC)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a2f      	ldr	r2, [pc, #188]	@ (8000344 <GPIO_PeriClkControl+0x104>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_PeriClkControl+0x5a>
			GPIOC_PCLK_EN();
 800028c:	4b2b      	ldr	r3, [pc, #172]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 800028e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000290:	4b2a      	ldr	r3, [pc, #168]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 8000292:	2104      	movs	r1, #4
 8000294:	430a      	orrs	r2, r1
 8000296:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000298:	e04c      	b.n	8000334 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOD)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a2a      	ldr	r2, [pc, #168]	@ (8000348 <GPIO_PeriClkControl+0x108>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PeriClkControl+0x70>
			GPIOD_PCLK_EN();
 80002a2:	4b26      	ldr	r3, [pc, #152]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 80002a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002a6:	4b25      	ldr	r3, [pc, #148]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 80002a8:	2108      	movs	r1, #8
 80002aa:	430a      	orrs	r2, r1
 80002ac:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002ae:	e041      	b.n	8000334 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOF)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a26      	ldr	r2, [pc, #152]	@ (800034c <GPIO_PeriClkControl+0x10c>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d13d      	bne.n	8000334 <GPIO_PeriClkControl+0xf4>
			GPIOF_PCLK_EN();
 80002b8:	4b20      	ldr	r3, [pc, #128]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 80002ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002bc:	4b1f      	ldr	r3, [pc, #124]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 80002be:	2120      	movs	r1, #32
 80002c0:	430a      	orrs	r2, r1
 80002c2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002c4:	e036      	b.n	8000334 <GPIO_PeriClkControl+0xf4>
		if (pGPIOx == GPIOA)
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	23a0      	movs	r3, #160	@ 0xa0
 80002ca:	05db      	lsls	r3, r3, #23
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d106      	bne.n	80002de <GPIO_PeriClkControl+0x9e>
			GPIOA_PCLK_DI();
 80002d0:	4b1a      	ldr	r3, [pc, #104]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 80002d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002d4:	4b19      	ldr	r3, [pc, #100]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 80002d6:	2101      	movs	r1, #1
 80002d8:	438a      	bics	r2, r1
 80002da:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002dc:	e02a      	b.n	8000334 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOB)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a17      	ldr	r2, [pc, #92]	@ (8000340 <GPIO_PeriClkControl+0x100>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_PeriClkControl+0xb4>
			GPIOB_PCLK_DI();
 80002e6:	4b15      	ldr	r3, [pc, #84]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 80002e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002ea:	4b14      	ldr	r3, [pc, #80]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 80002ec:	2102      	movs	r1, #2
 80002ee:	438a      	bics	r2, r1
 80002f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002f2:	e01f      	b.n	8000334 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOC)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a13      	ldr	r2, [pc, #76]	@ (8000344 <GPIO_PeriClkControl+0x104>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d106      	bne.n	800030a <GPIO_PeriClkControl+0xca>
			GPIOC_PCLK_DI();
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 80002fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000300:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 8000302:	2104      	movs	r1, #4
 8000304:	438a      	bics	r2, r1
 8000306:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000308:	e014      	b.n	8000334 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOD)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a0e      	ldr	r2, [pc, #56]	@ (8000348 <GPIO_PeriClkControl+0x108>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PeriClkControl+0xe0>
			GPIOD_PCLK_DI();
 8000312:	4b0a      	ldr	r3, [pc, #40]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 8000314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000316:	4b09      	ldr	r3, [pc, #36]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 8000318:	2108      	movs	r1, #8
 800031a:	438a      	bics	r2, r1
 800031c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800031e:	e009      	b.n	8000334 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOF)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a0a      	ldr	r2, [pc, #40]	@ (800034c <GPIO_PeriClkControl+0x10c>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d105      	bne.n	8000334 <GPIO_PeriClkControl+0xf4>
			GPIOF_PCLK_DI();
 8000328:	4b04      	ldr	r3, [pc, #16]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 800032a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800032c:	4b03      	ldr	r3, [pc, #12]	@ (800033c <GPIO_PeriClkControl+0xfc>)
 800032e:	2120      	movs	r1, #32
 8000330:	438a      	bics	r2, r1
 8000332:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000334:	46c0      	nop			@ (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40021000 	.word	0x40021000
 8000340:	50000400 	.word	0x50000400
 8000344:	50000800 	.word	0x50000800
 8000348:	50000c00 	.word	0x50000c00
 800034c:	50001400 	.word	0x50001400

08000350 <SYSCFG_PeriClkControl>:

void SYSCFG_PeriClkControl (uint8_t EnOrDi)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	0002      	movs	r2, r0
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE)
 800035c:	1dfb      	adds	r3, r7, #7
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d106      	bne.n	8000372 <SYSCFG_PeriClkControl+0x22>
	{
		SYSCFG_PCLK_EN();
 8000364:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <SYSCFG_PeriClkControl+0x38>)
 8000366:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000368:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <SYSCFG_PeriClkControl+0x38>)
 800036a:	2101      	movs	r1, #1
 800036c:	430a      	orrs	r2, r1
 800036e:	641a      	str	r2, [r3, #64]	@ 0x40
	}
	else
	{
		SYSCFG_PCLK_DI();
	}
}
 8000370:	e005      	b.n	800037e <SYSCFG_PeriClkControl+0x2e>
		SYSCFG_PCLK_DI();
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <SYSCFG_PeriClkControl+0x38>)
 8000374:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000376:	4b04      	ldr	r3, [pc, #16]	@ (8000388 <SYSCFG_PeriClkControl+0x38>)
 8000378:	2101      	movs	r1, #1
 800037a:	438a      	bics	r2, r1
 800037c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800037e:	46c0      	nop			@ (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	b002      	add	sp, #8
 8000384:	bd80      	pop	{r7, pc}
 8000386:	46c0      	nop			@ (mov r8, r8)
 8000388:	40021000 	.word	0x40021000

0800038c <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b087      	sub	sp, #28
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; //temporary register
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]

	//1. Configure the mode of GPIO pin

	if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	795b      	ldrb	r3, [r3, #5]
 800039c:	2b03      	cmp	r3, #3
 800039e:	d820      	bhi.n	80003e2 <GPIO_Init+0x56>
	{
		// Non interrupt mode
		temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	795b      	ldrb	r3, [r3, #5]
 80003a4:	001a      	movs	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	791b      	ldrb	r3, [r3, #4]
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	409a      	lsls	r2, r3
 80003ae:	0013      	movs	r3, r2
 80003b0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2* pGPIOHandle->GPIOPinConfig.GPIO_PinNumber)); // Clearing the required bits to avoid manipulation while setting them below.
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	791b      	ldrb	r3, [r3, #4]
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	2103      	movs	r1, #3
 80003c0:	4099      	lsls	r1, r3
 80003c2:	000b      	movs	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	0019      	movs	r1, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	400a      	ands	r2, r1
 80003ce:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	6819      	ldr	r1, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	697a      	ldr	r2, [r7, #20]
 80003dc:	430a      	orrs	r2, r1
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	e0b8      	b.n	8000554 <GPIO_Init+0x1c8>

	else
	{
		// Whenever the Pin is in Interupt mode, it requires some input, hence the pin set to input mode .

		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2* pGPIOHandle->GPIOPinConfig.GPIO_PinNumber));
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	791b      	ldrb	r3, [r3, #4]
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	2103      	movs	r1, #3
 80003f0:	4099      	lsls	r1, r3
 80003f2:	000b      	movs	r3, r1
 80003f4:	43db      	mvns	r3, r3
 80003f6:	0019      	movs	r1, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	400a      	ands	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]

		// Non interrupt mode
		if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	795b      	ldrb	r3, [r3, #5]
 8000404:	2b04      	cmp	r3, #4
 8000406:	d117      	bne.n	8000438 <GPIO_Init+0xac>
		{
			// Configure the FTSR

			EXTI->EXTI_FTSR1 |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 8000408:	4bac      	ldr	r3, [pc, #688]	@ (80006bc <GPIO_Init+0x330>)
 800040a:	685a      	ldr	r2, [r3, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	791b      	ldrb	r3, [r3, #4]
 8000410:	0019      	movs	r1, r3
 8000412:	2301      	movs	r3, #1
 8000414:	408b      	lsls	r3, r1
 8000416:	0019      	movs	r1, r3
 8000418:	4ba8      	ldr	r3, [pc, #672]	@ (80006bc <GPIO_Init+0x330>)
 800041a:	430a      	orrs	r2, r1
 800041c:	605a      	str	r2, [r3, #4]

			// clear RTSR to be sure
			EXTI->EXTI_RTSR1 &= ~( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 800041e:	4ba7      	ldr	r3, [pc, #668]	@ (80006bc <GPIO_Init+0x330>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	791b      	ldrb	r3, [r3, #4]
 8000426:	0019      	movs	r1, r3
 8000428:	2301      	movs	r3, #1
 800042a:	408b      	lsls	r3, r1
 800042c:	43db      	mvns	r3, r3
 800042e:	0019      	movs	r1, r3
 8000430:	4ba2      	ldr	r3, [pc, #648]	@ (80006bc <GPIO_Init+0x330>)
 8000432:	400a      	ands	r2, r1
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	e035      	b.n	80004a4 <GPIO_Init+0x118>
		}
		else if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	795b      	ldrb	r3, [r3, #5]
 800043c:	2b05      	cmp	r3, #5
 800043e:	d117      	bne.n	8000470 <GPIO_Init+0xe4>
		{
			// Configure the RTSR
			EXTI->EXTI_RTSR1 |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 8000440:	4b9e      	ldr	r3, [pc, #632]	@ (80006bc <GPIO_Init+0x330>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	791b      	ldrb	r3, [r3, #4]
 8000448:	0019      	movs	r1, r3
 800044a:	2301      	movs	r3, #1
 800044c:	408b      	lsls	r3, r1
 800044e:	0019      	movs	r1, r3
 8000450:	4b9a      	ldr	r3, [pc, #616]	@ (80006bc <GPIO_Init+0x330>)
 8000452:	430a      	orrs	r2, r1
 8000454:	601a      	str	r2, [r3, #0]

			// clear FTSR to be sure
			EXTI->EXTI_FTSR1 &= ~( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 8000456:	4b99      	ldr	r3, [pc, #612]	@ (80006bc <GPIO_Init+0x330>)
 8000458:	685a      	ldr	r2, [r3, #4]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	0019      	movs	r1, r3
 8000460:	2301      	movs	r3, #1
 8000462:	408b      	lsls	r3, r1
 8000464:	43db      	mvns	r3, r3
 8000466:	0019      	movs	r1, r3
 8000468:	4b94      	ldr	r3, [pc, #592]	@ (80006bc <GPIO_Init+0x330>)
 800046a:	400a      	ands	r2, r1
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	e019      	b.n	80004a4 <GPIO_Init+0x118>
		}
		else if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	2b03      	cmp	r3, #3
 8000476:	d115      	bne.n	80004a4 <GPIO_Init+0x118>
		{
			// Configure both FTSR and RTSR
			EXTI->EXTI_FTSR1 |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 8000478:	4b90      	ldr	r3, [pc, #576]	@ (80006bc <GPIO_Init+0x330>)
 800047a:	685a      	ldr	r2, [r3, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	0019      	movs	r1, r3
 8000482:	2301      	movs	r3, #1
 8000484:	408b      	lsls	r3, r1
 8000486:	0019      	movs	r1, r3
 8000488:	4b8c      	ldr	r3, [pc, #560]	@ (80006bc <GPIO_Init+0x330>)
 800048a:	430a      	orrs	r2, r1
 800048c:	605a      	str	r2, [r3, #4]

			// Set RTSR as well
			EXTI->EXTI_RTSR1 |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 800048e:	4b8b      	ldr	r3, [pc, #556]	@ (80006bc <GPIO_Init+0x330>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	0019      	movs	r1, r3
 8000498:	2301      	movs	r3, #1
 800049a:	408b      	lsls	r3, r1
 800049c:	0019      	movs	r1, r3
 800049e:	4b87      	ldr	r3, [pc, #540]	@ (80006bc <GPIO_Init+0x330>)
 80004a0:	430a      	orrs	r2, r1
 80004a2:	601a      	str	r2, [r3, #0]
		}

		// COnfigure the GPIO port selection EXTI_EXTICR (This register is available in EXTI register itself unlike in the course )

		uint8_t temp1 = pGPIOHandle->GPIOPinConfig.GPIO_PinNumber / 4;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	791a      	ldrb	r2, [r3, #4]
 80004a8:	2313      	movs	r3, #19
 80004aa:	18fb      	adds	r3, r7, r3
 80004ac:	0892      	lsrs	r2, r2, #2
 80004ae:	701a      	strb	r2, [r3, #0]
		uint8_t temp2 = pGPIOHandle->GPIOPinConfig.GPIO_PinNumber % 4;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	791a      	ldrb	r2, [r3, #4]
 80004b4:	2312      	movs	r3, #18
 80004b6:	18fb      	adds	r3, r7, r3
 80004b8:	2103      	movs	r1, #3
 80004ba:	400a      	ands	r2, r1
 80004bc:	701a      	strb	r2, [r3, #0]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle ->pGPIOx);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	23a0      	movs	r3, #160	@ 0xa0
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d01d      	beq.n	8000506 <GPIO_Init+0x17a>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a7c      	ldr	r2, [pc, #496]	@ (80006c0 <GPIO_Init+0x334>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d016      	beq.n	8000502 <GPIO_Init+0x176>
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a7a      	ldr	r2, [pc, #488]	@ (80006c4 <GPIO_Init+0x338>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d00f      	beq.n	80004fe <GPIO_Init+0x172>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a79      	ldr	r2, [pc, #484]	@ (80006c8 <GPIO_Init+0x33c>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d008      	beq.n	80004fa <GPIO_Init+0x16e>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a77      	ldr	r2, [pc, #476]	@ (80006cc <GPIO_Init+0x340>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d101      	bne.n	80004f6 <GPIO_Init+0x16a>
 80004f2:	2305      	movs	r3, #5
 80004f4:	e008      	b.n	8000508 <GPIO_Init+0x17c>
 80004f6:	2300      	movs	r3, #0
 80004f8:	e006      	b.n	8000508 <GPIO_Init+0x17c>
 80004fa:	2303      	movs	r3, #3
 80004fc:	e004      	b.n	8000508 <GPIO_Init+0x17c>
 80004fe:	2302      	movs	r3, #2
 8000500:	e002      	b.n	8000508 <GPIO_Init+0x17c>
 8000502:	2301      	movs	r3, #1
 8000504:	e000      	b.n	8000508 <GPIO_Init+0x17c>
 8000506:	2300      	movs	r3, #0
 8000508:	2111      	movs	r1, #17
 800050a:	187a      	adds	r2, r7, r1
 800050c:	7013      	strb	r3, [r2, #0]

		EXTI->EXTI_EXTICR[temp1] |= (portcode << (8 * temp2) );
 800050e:	4a6b      	ldr	r2, [pc, #428]	@ (80006bc <GPIO_Init+0x330>)
 8000510:	2413      	movs	r4, #19
 8000512:	193b      	adds	r3, r7, r4
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	3318      	adds	r3, #24
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	589a      	ldr	r2, [r3, r2]
 800051c:	187b      	adds	r3, r7, r1
 800051e:	7819      	ldrb	r1, [r3, #0]
 8000520:	2312      	movs	r3, #18
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	4099      	lsls	r1, r3
 800052a:	000b      	movs	r3, r1
 800052c:	0018      	movs	r0, r3
 800052e:	4963      	ldr	r1, [pc, #396]	@ (80006bc <GPIO_Init+0x330>)
 8000530:	193b      	adds	r3, r7, r4
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4302      	orrs	r2, r0
 8000536:	3318      	adds	r3, #24
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	505a      	str	r2, [r3, r1]

		// Enable the EXTI interupt delivery using IMR
		EXTI->EXTI_IMR1 |= (1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 800053c:	4a5f      	ldr	r2, [pc, #380]	@ (80006bc <GPIO_Init+0x330>)
 800053e:	2380      	movs	r3, #128	@ 0x80
 8000540:	58d3      	ldr	r3, [r2, r3]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	7912      	ldrb	r2, [r2, #4]
 8000546:	0011      	movs	r1, r2
 8000548:	2201      	movs	r2, #1
 800054a:	408a      	lsls	r2, r1
 800054c:	495b      	ldr	r1, [pc, #364]	@ (80006bc <GPIO_Init+0x330>)
 800054e:	4313      	orrs	r3, r2
 8000550:	2280      	movs	r2, #128	@ 0x80
 8000552:	508b      	str	r3, [r1, r2]
	}
	temp = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]

	//2. Configure the speed of GPIO pin

	temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	799b      	ldrb	r3, [r3, #6]
 800055c:	001a      	movs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	409a      	lsls	r2, r3
 8000566:	0013      	movs	r3, r2
 8000568:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	689a      	ldr	r2, [r3, #8]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	2103      	movs	r1, #3
 8000578:	4099      	lsls	r1, r3
 800057a:	000b      	movs	r3, r1
 800057c:	43db      	mvns	r3, r3
 800057e:	0019      	movs	r1, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	400a      	ands	r2, r1
 8000586:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	6899      	ldr	r1, [r3, #8]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	697a      	ldr	r2, [r7, #20]
 8000594:	430a      	orrs	r2, r1
 8000596:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]

	//3. Configure the pupd of GPIO pin
	temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	79db      	ldrb	r3, [r3, #7]
 80005a0:	001a      	movs	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	409a      	lsls	r2, r3
 80005aa:	0013      	movs	r3, r2
 80005ac:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	68da      	ldr	r2, [r3, #12]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	2103      	movs	r1, #3
 80005bc:	4099      	lsls	r1, r3
 80005be:	000b      	movs	r3, r1
 80005c0:	43db      	mvns	r3, r3
 80005c2:	0019      	movs	r1, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	400a      	ands	r2, r1
 80005ca:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	68d9      	ldr	r1, [r3, #12]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	430a      	orrs	r2, r1
 80005da:	60da      	str	r2, [r3, #12]
	temp = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]

	//4. Configure the optype of GPIO pin
	temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinOPType << (pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7a1b      	ldrb	r3, [r3, #8]
 80005e4:	001a      	movs	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	409a      	lsls	r2, r3
 80005ec:	0013      	movs	r3, r2
 80005ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	685a      	ldr	r2, [r3, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	0019      	movs	r1, r3
 80005fc:	2301      	movs	r3, #1
 80005fe:	408b      	lsls	r3, r1
 8000600:	43db      	mvns	r3, r3
 8000602:	0019      	movs	r1, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	400a      	ands	r2, r1
 800060a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6859      	ldr	r1, [r3, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	697a      	ldr	r2, [r7, #20]
 8000618:	430a      	orrs	r2, r1
 800061a:	605a      	str	r2, [r3, #4]
	temp = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]

	//5. Configure the Alternate functionality of GPIO pin
	if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_AF)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d144      	bne.n	80006b2 <GPIO_Init+0x326>
	{
		// if the mode if ALternate function, only then configure AF.

		uint32_t temp1 = pGPIOHandle-> GPIOPinConfig.GPIO_PinNumber % 8 ;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	001a      	movs	r2, r3
 800062e:	2307      	movs	r3, #7
 8000630:	4013      	ands	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]

		if (pGPIOHandle-> GPIOPinConfig.GPIO_PinNumber < 8 )
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	2b07      	cmp	r3, #7
 800063a:	d81d      	bhi.n	8000678 <GPIO_Init+0x2ec>
		{
			pGPIOHandle->pGPIOx->AFRL &= ~(0xf << (4 * temp1));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	6a1a      	ldr	r2, [r3, #32]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	210f      	movs	r1, #15
 8000648:	4099      	lsls	r1, r3
 800064a:	000b      	movs	r3, r1
 800064c:	43db      	mvns	r3, r3
 800064e:	0019      	movs	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	400a      	ands	r2, r1
 8000656:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle-> GPIOPinConfig.GPIO_PinAltFuncMode << (4 * temp1));
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	6a1a      	ldr	r2, [r3, #32]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7a5b      	ldrb	r3, [r3, #9]
 8000662:	0019      	movs	r1, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4099      	lsls	r1, r3
 800066a:	000b      	movs	r3, r1
 800066c:	0019      	movs	r1, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	430a      	orrs	r2, r1
 8000674:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xf << (4 * temp1));
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle-> GPIOPinConfig.GPIO_PinAltFuncMode << (4 * temp1));
		}
	}

}
 8000676:	e01c      	b.n	80006b2 <GPIO_Init+0x326>
			pGPIOHandle->pGPIOx->AFRH &= ~(0xf << (4 * temp1));
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	210f      	movs	r1, #15
 8000684:	4099      	lsls	r1, r3
 8000686:	000b      	movs	r3, r1
 8000688:	43db      	mvns	r3, r3
 800068a:	0019      	movs	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	400a      	ands	r2, r1
 8000692:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle-> GPIOPinConfig.GPIO_PinAltFuncMode << (4 * temp1));
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	7a5b      	ldrb	r3, [r3, #9]
 800069e:	0019      	movs	r1, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4099      	lsls	r1, r3
 80006a6:	000b      	movs	r3, r1
 80006a8:	0019      	movs	r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	430a      	orrs	r2, r1
 80006b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b007      	add	sp, #28
 80006b8:	bd90      	pop	{r4, r7, pc}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	40021800 	.word	0x40021800
 80006c0:	50000400 	.word	0x50000400
 80006c4:	50000800 	.word	0x50000800
 80006c8:	50000c00 	.word	0x50000c00
 80006cc:	50001400 	.word	0x50001400

080006d0 <GPIO_ToggleOutputPin>:
{

	Value = pGPIOx->ODR;
}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	000a      	movs	r2, r1
 80006da:	1cfb      	adds	r3, r7, #3
 80006dc:	701a      	strb	r2, [r3, #0]
	pGPIOx->ODR ^= (1 << PinNumber);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	1cfa      	adds	r2, r7, #3
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	2101      	movs	r1, #1
 80006e8:	4091      	lsls	r1, r2
 80006ea:	000a      	movs	r2, r1
 80006ec:	405a      	eors	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	615a      	str	r2, [r3, #20]
}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b002      	add	sp, #8
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <GPIO_IRQConfig>:

void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQ_Priority, uint8_t EnOrDi)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	0004      	movs	r4, r0
 8000704:	0008      	movs	r0, r1
 8000706:	0011      	movs	r1, r2
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	1c22      	adds	r2, r4, #0
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	1dbb      	adds	r3, r7, #6
 8000710:	1c02      	adds	r2, r0, #0
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	1d7b      	adds	r3, r7, #5
 8000716:	1c0a      	adds	r2, r1, #0
 8000718:	701a      	strb	r2, [r3, #0]
	// 1. ENABLE or Disable the the interupt in processor(NVIC)
	if (EnOrDi == ENABLE){
 800071a:	1d7b      	adds	r3, r7, #5
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d10f      	bne.n	8000742 <GPIO_IRQConfig+0x46>
		//Check is the provided IRQ number is well within the range (In ths board, we have only 1 register)
		if (IRQNumber <= 31)
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b1f      	cmp	r3, #31
 8000728:	d81a      	bhi.n	8000760 <GPIO_IRQConfig+0x64>
		{
			// Program ISER register
			*NVIC_ISER_BASE_ADDR |= (1 << IRQNumber);
 800072a:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <GPIO_IRQConfig+0xc4>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2101      	movs	r1, #1
 8000734:	4099      	lsls	r1, r3
 8000736:	000b      	movs	r3, r1
 8000738:	0019      	movs	r1, r3
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <GPIO_IRQConfig+0xc4>)
 800073c:	430a      	orrs	r2, r1
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	e00e      	b.n	8000760 <GPIO_IRQConfig+0x64>
			//Do nothing
		}
	}
	else{
		//Check is the provided IRQ number is well within the range (In ths board, we have only 1 register)
		if (IRQNumber <= 31)
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b1f      	cmp	r3, #31
 8000748:	d80a      	bhi.n	8000760 <GPIO_IRQConfig+0x64>
		{
			// Program ICER register
			*NVIC_ICER_BASE_ADDR |= (1 << IRQNumber);
 800074a:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <GPIO_IRQConfig+0xc8>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2101      	movs	r1, #1
 8000754:	4099      	lsls	r1, r3
 8000756:	000b      	movs	r3, r1
 8000758:	0019      	movs	r1, r3
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <GPIO_IRQConfig+0xc8>)
 800075c:	430a      	orrs	r2, r1
 800075e:	601a      	str	r2, [r3, #0]
		}
	}

	//2. Set the priority for each IRQNumber

	uint8_t iprx = IRQNumber / 4;
 8000760:	200f      	movs	r0, #15
 8000762:	183b      	adds	r3, r7, r0
 8000764:	1dfa      	adds	r2, r7, #7
 8000766:	7812      	ldrb	r2, [r2, #0]
 8000768:	0892      	lsrs	r2, r2, #2
 800076a:	701a      	strb	r2, [r3, #0]
	uint8_t iprx_section = IRQNumber % 4;
 800076c:	240e      	movs	r4, #14
 800076e:	193b      	adds	r3, r7, r4
 8000770:	1dfa      	adds	r2, r7, #7
 8000772:	7812      	ldrb	r2, [r2, #0]
 8000774:	2103      	movs	r1, #3
 8000776:	400a      	ands	r2, r1
 8000778:	701a      	strb	r2, [r3, #0]
	uint8_t shift_amount = (iprx_section * 8) + (8 - NO_PR_BITS_IMPLEMENTED);
 800077a:	193b      	adds	r3, r7, r4
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	b2da      	uxtb	r2, r3
 8000782:	240d      	movs	r4, #13
 8000784:	193b      	adds	r3, r7, r4
 8000786:	3206      	adds	r2, #6
 8000788:	701a      	strb	r2, [r3, #0]

	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQ_Priority << shift_amount); // When dealing with pointers +1 will actually add +1*data type
 800078a:	183b      	adds	r3, r7, r0
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4a0d      	ldr	r2, [pc, #52]	@ (80007c8 <GPIO_IRQConfig+0xcc>)
 8000792:	4694      	mov	ip, r2
 8000794:	4463      	add	r3, ip
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	1dbb      	adds	r3, r7, #6
 800079a:	7819      	ldrb	r1, [r3, #0]
 800079c:	193b      	adds	r3, r7, r4
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4099      	lsls	r1, r3
 80007a2:	000b      	movs	r3, r1
 80007a4:	0019      	movs	r1, r3
 80007a6:	183b      	adds	r3, r7, r0
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4806      	ldr	r0, [pc, #24]	@ (80007c8 <GPIO_IRQConfig+0xcc>)
 80007ae:	4684      	mov	ip, r0
 80007b0:	4463      	add	r3, ip
 80007b2:	430a      	orrs	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]


}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b005      	add	sp, #20
 80007bc:	bd90      	pop	{r4, r7, pc}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000e180 	.word	0xe000e180
 80007c8:	e000e400 	.word	0xe000e400

080007cc <GPIO_IRQHandling>:
void GPIO_IRQHandling(uint8_t PinNumber)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	0002      	movs	r2, r0
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	701a      	strb	r2, [r3, #0]
	//Clear the EXTI pending register
	if (EXTI->EXTI_FPR1 & (1 << PinNumber))
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <GPIO_IRQHandling+0x64>)
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	1dfa      	adds	r2, r7, #7
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	2101      	movs	r1, #1
 80007e2:	4091      	lsls	r1, r2
 80007e4:	000a      	movs	r2, r1
 80007e6:	4013      	ands	r3, r2
 80007e8:	d00a      	beq.n	8000800 <GPIO_IRQHandling+0x34>
	{
		EXTI-> EXTI_FPR1 |= (1<< PinNumber);
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <GPIO_IRQHandling+0x64>)
 80007ec:	691a      	ldr	r2, [r3, #16]
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2101      	movs	r1, #1
 80007f4:	4099      	lsls	r1, r3
 80007f6:	000b      	movs	r3, r1
 80007f8:	0019      	movs	r1, r3
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <GPIO_IRQHandling+0x64>)
 80007fc:	430a      	orrs	r2, r1
 80007fe:	611a      	str	r2, [r3, #16]
	}

	//Clear the EXTI pending register
	if (EXTI->EXTI_RPR1 & (1 << PinNumber))
 8000800:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <GPIO_IRQHandling+0x64>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	1dfa      	adds	r2, r7, #7
 8000806:	7812      	ldrb	r2, [r2, #0]
 8000808:	2101      	movs	r1, #1
 800080a:	4091      	lsls	r1, r2
 800080c:	000a      	movs	r2, r1
 800080e:	4013      	ands	r3, r2
 8000810:	d00a      	beq.n	8000828 <GPIO_IRQHandling+0x5c>
	{
		EXTI-> EXTI_RPR1 |= (1<< PinNumber);
 8000812:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <GPIO_IRQHandling+0x64>)
 8000814:	68da      	ldr	r2, [r3, #12]
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2101      	movs	r1, #1
 800081c:	4099      	lsls	r1, r3
 800081e:	000b      	movs	r3, r1
 8000820:	0019      	movs	r1, r3
 8000822:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <GPIO_IRQHandling+0x64>)
 8000824:	430a      	orrs	r2, r1
 8000826:	60da      	str	r2, [r3, #12]
	}

}
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021800 	.word	0x40021800

08000834 <memset>:
 8000834:	0003      	movs	r3, r0
 8000836:	1882      	adds	r2, r0, r2
 8000838:	4293      	cmp	r3, r2
 800083a:	d100      	bne.n	800083e <memset+0xa>
 800083c:	4770      	bx	lr
 800083e:	7019      	strb	r1, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	e7f9      	b.n	8000838 <memset+0x4>

08000844 <__libc_init_array>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	2600      	movs	r6, #0
 8000848:	4c0c      	ldr	r4, [pc, #48]	@ (800087c <__libc_init_array+0x38>)
 800084a:	4d0d      	ldr	r5, [pc, #52]	@ (8000880 <__libc_init_array+0x3c>)
 800084c:	1b64      	subs	r4, r4, r5
 800084e:	10a4      	asrs	r4, r4, #2
 8000850:	42a6      	cmp	r6, r4
 8000852:	d109      	bne.n	8000868 <__libc_init_array+0x24>
 8000854:	2600      	movs	r6, #0
 8000856:	f000 f819 	bl	800088c <_init>
 800085a:	4c0a      	ldr	r4, [pc, #40]	@ (8000884 <__libc_init_array+0x40>)
 800085c:	4d0a      	ldr	r5, [pc, #40]	@ (8000888 <__libc_init_array+0x44>)
 800085e:	1b64      	subs	r4, r4, r5
 8000860:	10a4      	asrs	r4, r4, #2
 8000862:	42a6      	cmp	r6, r4
 8000864:	d105      	bne.n	8000872 <__libc_init_array+0x2e>
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	00b3      	lsls	r3, r6, #2
 800086a:	58eb      	ldr	r3, [r5, r3]
 800086c:	4798      	blx	r3
 800086e:	3601      	adds	r6, #1
 8000870:	e7ee      	b.n	8000850 <__libc_init_array+0xc>
 8000872:	00b3      	lsls	r3, r6, #2
 8000874:	58eb      	ldr	r3, [r5, r3]
 8000876:	4798      	blx	r3
 8000878:	3601      	adds	r6, #1
 800087a:	e7f2      	b.n	8000862 <__libc_init_array+0x1e>
 800087c:	080008a4 	.word	0x080008a4
 8000880:	080008a4 	.word	0x080008a4
 8000884:	080008a8 	.word	0x080008a8
 8000888:	080008a4 	.word	0x080008a4

0800088c <_init>:
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000892:	bc08      	pop	{r3}
 8000894:	469e      	mov	lr, r3
 8000896:	4770      	bx	lr

08000898 <_fini>:
 8000898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800089e:	bc08      	pop	{r3}
 80008a0:	469e      	mov	lr, r3
 80008a2:	4770      	bx	lr
