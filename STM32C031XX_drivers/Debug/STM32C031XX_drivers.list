
STM32C031XX_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c28  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001cdc  08001cdc  00002cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d58  08001d58  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d58  08001d58  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d58  08001d58  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d58  08001d58  00002d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d5c  08001d5c  00002d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001d60  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001dbc  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001dbc  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b23  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000720  00000000  00000000  00004ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000230  00000000  00000000  000052c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000019b  00000000  00000000  000054f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000304c  00000000  00000000  00005693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000026b5  00000000  00000000  000086df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b11f  00000000  00000000  0000ad94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00015eb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ea4  00000000  00000000  00015ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00016d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	2000005c 	.word	0x2000005c
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08001cc4 	.word	0x08001cc4

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000060 	.word	0x20000060
 80000f8:	08001cc4 	.word	0x08001cc4

080000fc <__gnu_thumb1_case_shi>:
 80000fc:	b403      	push	{r0, r1}
 80000fe:	4671      	mov	r1, lr
 8000100:	0849      	lsrs	r1, r1, #1
 8000102:	0040      	lsls	r0, r0, #1
 8000104:	0049      	lsls	r1, r1, #1
 8000106:	5e09      	ldrsh	r1, [r1, r0]
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	448e      	add	lr, r1
 800010c:	bc03      	pop	{r0, r1}
 800010e:	4770      	bx	lr

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f806 	bl	8000224 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__aeabi_idiv0>:
 8000224:	4770      	bx	lr
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <SPI1_GpioInit>:
 * PB5 -> SPI1_MOSI
 */


void SPI1_GpioInit(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI_Pins;
	SPI_Pins.pGPIOx = GPIOB;
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4a16      	ldr	r2, [pc, #88]	@ (800028c <SPI1_GpioInit+0x64>)
 8000232:	601a      	str	r2, [r3, #0]
	SPI_Pins.GPIOPinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2202      	movs	r2, #2
 8000238:	715a      	strb	r2, [r3, #5]
	SPI_Pins.GPIOPinConfig.GPIO_PinAltFuncMode = 0;
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2200      	movs	r2, #0
 800023e:	725a      	strb	r2, [r3, #9]
	SPI_Pins.GPIOPinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	721a      	strb	r2, [r3, #8]
	SPI_Pins.GPIOPinConfig.GPIO_PinPuPdControl = GPIO_NO_PP;
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2200      	movs	r2, #0
 800024a:	71da      	strb	r2, [r3, #7]

	// SPI1_NSS
	SPI_Pins.GPIOPinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPI_Pins);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	0018      	movs	r0, r3
 8000256:	f000 fa25 	bl	80006a4 <GPIO_Init>

	//SPI1_SCK
	SPI_Pins.GPIOPinConfig.GPIO_PinNumber = GPIO_PIN_3;
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2203      	movs	r2, #3
 800025e:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPI_Pins);
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fa1e 	bl	80006a4 <GPIO_Init>

	//SPI1_MISO
	SPI_Pins.GPIOPinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2204      	movs	r2, #4
 800026c:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPI_Pins);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fa17 	bl	80006a4 <GPIO_Init>

	//SPI1_MOSI

	SPI_Pins.GPIOPinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2205      	movs	r2, #5
 800027a:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPI_Pins);
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	0018      	movs	r0, r3
 8000280:	f000 fa10 	bl	80006a4 <GPIO_Init>

}
 8000284:	46c0      	nop			@ (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	b004      	add	sp, #16
 800028a:	bd80      	pop	{r7, pc}
 800028c:	50000400 	.word	0x50000400

08000290 <SPI1_Init>:

void SPI1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1Handle;

	SPI1Handle.pSPIx = SPI1;
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4a0f      	ldr	r2, [pc, #60]	@ (80002d8 <SPI1_Init+0x48>)
 800029a:	601a      	str	r2, [r3, #0]
	SPI1Handle.SPIConfig.SPI_BusConfig = SPI_BUSCFG_FD;
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2201      	movs	r2, #1
 80002a0:	715a      	strb	r2, [r3, #5]
	SPI1Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICEMODE_SLAVE;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	711a      	strb	r2, [r3, #4]
	SPI1Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2202      	movs	r2, #2
 80002ac:	719a      	strb	r2, [r3, #6]
	SPI1Handle.SPIConfig.SPI_DS = SPI_DFF_8BITS;
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2207      	movs	r2, #7
 80002b2:	71da      	strb	r2, [r3, #7]
	SPI1Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	725a      	strb	r2, [r3, #9]
	SPI1Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2200      	movs	r2, #0
 80002be:	721a      	strb	r2, [r3, #8]
	SPI1Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // SW slave management enabled for SPI1
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI1Handle);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fc03 	bl	8000ad4 <SPI_Init>
}
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	46bd      	mov	sp, r7
 80002d2:	b008      	add	sp, #32
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	40013000 	.word	0x40013000

080002dc <GPIOLed_Init>:

	GPIO_Init(&GpioButton);
}

void GPIOLed_Init()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx =GPIOA;
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	22a0      	movs	r2, #160	@ 0xa0
 80002e6:	05d2      	lsls	r2, r2, #23
 80002e8:	601a      	str	r2, [r3, #0]

	GpioLed.GPIOPinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2205      	movs	r2, #5
 80002ee:	711a      	strb	r2, [r3, #4]

	GpioLed.GPIOPinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2201      	movs	r2, #1
 80002f4:	715a      	strb	r2, [r3, #5]

	GpioLed.GPIOPinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2202      	movs	r2, #2
 80002fa:	719a      	strb	r2, [r3, #6]

	GpioLed.GPIOPinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2201      	movs	r2, #1
 8000300:	721a      	strb	r2, [r3, #8]

	GpioLed.GPIOPinConfig.GPIO_PinPuPdControl  = GPIO_PIN_PU;
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2201      	movs	r2, #1
 8000306:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClkControl(GPIOA, ENABLE);
 8000308:	23a0      	movs	r3, #160	@ 0xa0
 800030a:	05db      	lsls	r3, r3, #23
 800030c:	2101      	movs	r1, #1
 800030e:	0018      	movs	r0, r3
 8000310:	f000 f940 	bl	8000594 <GPIO_PeriClkControl>

	GPIO_Init(&GpioLed);
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	0018      	movs	r0, r3
 8000318:	f000 f9c4 	bl	80006a4 <GPIO_Init>
}
 800031c:	46c0      	nop			@ (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b004      	add	sp, #16
 8000322:	bd80      	pop	{r7, pc}

08000324 <main>:


int main ()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	22ff      	movs	r2, #255	@ 0xff
 800032e:	701a      	strb	r2, [r3, #0]
	uint8_t dummy_read;

	// function to initailaise GPIO pins as SPI1
	SPI1_GpioInit();
 8000330:	f7ff ff7a 	bl	8000228 <SPI1_GpioInit>

	SPI1_Init();
 8000334:	f7ff ffac 	bl	8000290 <SPI1_Init>

	GPIOLed_Init();
 8000338:	f7ff ffd0 	bl	80002dc <GPIOLed_Init>
		 * Making SSOE 1, makes NSSoutput enable,The NSS pin is automatically managed by hardware.
		 * i.e., when SPE =1, NSS will be 0
		 * when SPE =0, NSS =1
		 */

		SPI_SSOEConfig(SPI1, ENABLE);
 800033c:	4b2d      	ldr	r3, [pc, #180]	@ (80003f4 <main+0xd0>)
 800033e:	2101      	movs	r1, #1
 8000340:	0018      	movs	r0, r3
 8000342:	f000 fca1 	bl	8000c88 <SPI_SSOEConfig>

		SPI_PeripheralControl(SPI1, ENABLE);
 8000346:	4b2b      	ldr	r3, [pc, #172]	@ (80003f4 <main+0xd0>)
 8000348:	2101      	movs	r1, #1
 800034a:	0018      	movs	r0, r3
 800034c:	f000 fc7f 	bl	8000c4e <SPI_PeripheralControl>

		uint8_t commandcode;
		uint8_t args;

		//Actual Data
		SPI_ReceiveData(SPI1, &commandcode, 1);
 8000350:	1d7b      	adds	r3, r7, #5
 8000352:	4828      	ldr	r0, [pc, #160]	@ (80003f4 <main+0xd0>)
 8000354:	2201      	movs	r2, #1
 8000356:	0019      	movs	r1, r3
 8000358:	f000 fcb3 	bl	8000cc2 <SPI_ReceiveData>

		printf("Received data is %x\n", commandcode);
 800035c:	1d7b      	adds	r3, r7, #5
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	001a      	movs	r2, r3
 8000362:	4b25      	ldr	r3, [pc, #148]	@ (80003f8 <main+0xd4>)
 8000364:	0011      	movs	r1, r2
 8000366:	0018      	movs	r0, r3
 8000368:	f000 fdae 	bl	8000ec8 <iprintf>

		if (commandcode == CMD_LED_CTRL)
 800036c:	1d7b      	adds	r3, r7, #5
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b50      	cmp	r3, #80	@ 0x50
 8000372:	d10a      	bne.n	800038a <main+0x66>
		{
			SPI_SendData(SPI1, (uint8_t*)ACK, 1);
 8000374:	4b1f      	ldr	r3, [pc, #124]	@ (80003f4 <main+0xd0>)
 8000376:	2201      	movs	r2, #1
 8000378:	21f5      	movs	r1, #245	@ 0xf5
 800037a:	0018      	movs	r0, r3
 800037c:	f000 fc28 	bl	8000bd0 <SPI_SendData>
			printf("Sending ACK to Master\n");
 8000380:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <main+0xd8>)
 8000382:	0018      	movs	r0, r3
 8000384:	f000 fe06 	bl	8000f94 <puts>
 8000388:	e009      	b.n	800039e <main+0x7a>
		}
		else
		{
			SPI_SendData(SPI1, (uint8_t*)NACK, 1);
 800038a:	4b1a      	ldr	r3, [pc, #104]	@ (80003f4 <main+0xd0>)
 800038c:	2201      	movs	r2, #1
 800038e:	21a5      	movs	r1, #165	@ 0xa5
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fc1d 	bl	8000bd0 <SPI_SendData>
			printf("Sending NACK to Master\n");
 8000396:	4b1a      	ldr	r3, [pc, #104]	@ (8000400 <main+0xdc>)
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fdfb 	bl	8000f94 <puts>
		}

		SPI_ReceiveData(SPI1, &dummy_read, 1);
 800039e:	1dbb      	adds	r3, r7, #6
 80003a0:	4814      	ldr	r0, [pc, #80]	@ (80003f4 <main+0xd0>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	0019      	movs	r1, r3
 80003a6:	f000 fc8c 	bl	8000cc2 <SPI_ReceiveData>

		SPI_ReceiveData(SPI1, &args, 1);
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4811      	ldr	r0, [pc, #68]	@ (80003f4 <main+0xd0>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	0019      	movs	r1, r3
 80003b2:	f000 fc86 	bl	8000cc2 <SPI_ReceiveData>

		if (args == LED_PB7)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b1b      	cmp	r3, #27
 80003bc:	d106      	bne.n	80003cc <main+0xa8>
		{
			GPIO_WriteToOutputPin(GPIOB, 7, 1);
 80003be:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <main+0xe0>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	2107      	movs	r1, #7
 80003c4:	0018      	movs	r0, r3
 80003c6:	f000 fb15 	bl	80009f4 <GPIO_WriteToOutputPin>
 80003ca:	e005      	b.n	80003d8 <main+0xb4>
		}
		else
		{
			GPIO_WriteToOutputPin(GPIOB, 7, 0);
 80003cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000404 <main+0xe0>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	2107      	movs	r1, #7
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 fb0e 	bl	80009f4 <GPIO_WriteToOutputPin>
		}

		// SPI should not be busy before closing or disabling the Peripheral.

		while (SPI_GetFlagStatus(SPI1, SPI_BUSY_FLAG));
 80003d8:	46c0      	nop			@ (mov r8, r8)
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <main+0xd0>)
 80003dc:	2180      	movs	r1, #128	@ 0x80
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 fbd6 	bl	8000b90 <SPI_GetFlagStatus>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d1f8      	bne.n	80003da <main+0xb6>

		SPI_PeripheralControl(SPI1, DISABLE);
 80003e8:	4b02      	ldr	r3, [pc, #8]	@ (80003f4 <main+0xd0>)
 80003ea:	2100      	movs	r1, #0
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 fc2e 	bl	8000c4e <SPI_PeripheralControl>
	{
 80003f2:	e7a3      	b.n	800033c <main+0x18>
 80003f4:	40013000 	.word	0x40013000
 80003f8:	08001cdc 	.word	0x08001cdc
 80003fc:	08001cf4 	.word	0x08001cf4
 8000400:	08001d0c 	.word	0x08001d0c
 8000404:	50000400 	.word	0x50000400

08000408 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
 8000418:	e00a      	b.n	8000430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800041a:	e000      	b.n	800041e <_read+0x16>
 800041c:	bf00      	nop
 800041e:	0001      	movs	r1, r0
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	60ba      	str	r2, [r7, #8]
 8000426:	b2ca      	uxtb	r2, r1
 8000428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	3301      	adds	r3, #1
 800042e:	617b      	str	r3, [r7, #20]
 8000430:	697a      	ldr	r2, [r7, #20]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	429a      	cmp	r2, r3
 8000436:	dbf0      	blt.n	800041a <_read+0x12>
  }

  return len;
 8000438:	687b      	ldr	r3, [r7, #4]
}
 800043a:	0018      	movs	r0, r3
 800043c:	46bd      	mov	sp, r7
 800043e:	b006      	add	sp, #24
 8000440:	bd80      	pop	{r7, pc}

08000442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b086      	sub	sp, #24
 8000446:	af00      	add	r7, sp, #0
 8000448:	60f8      	str	r0, [r7, #12]
 800044a:	60b9      	str	r1, [r7, #8]
 800044c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
 8000452:	e009      	b.n	8000468 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	60ba      	str	r2, [r7, #8]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	0018      	movs	r0, r3
 800045e:	e000      	b.n	8000462 <_write+0x20>
 8000460:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	3301      	adds	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	697a      	ldr	r2, [r7, #20]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	429a      	cmp	r2, r3
 800046e:	dbf1      	blt.n	8000454 <_write+0x12>
  }
  return len;
 8000470:	687b      	ldr	r3, [r7, #4]
}
 8000472:	0018      	movs	r0, r3
 8000474:	46bd      	mov	sp, r7
 8000476:	b006      	add	sp, #24
 8000478:	bd80      	pop	{r7, pc}

0800047a <_close>:

int _close(int file)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000482:	2301      	movs	r3, #1
 8000484:	425b      	negs	r3, r3
}
 8000486:	0018      	movs	r0, r3
 8000488:	46bd      	mov	sp, r7
 800048a:	b002      	add	sp, #8
 800048c:	bd80      	pop	{r7, pc}

0800048e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	2280      	movs	r2, #128	@ 0x80
 800049c:	0192      	lsls	r2, r2, #6
 800049e:	605a      	str	r2, [r3, #4]
  return 0;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	0018      	movs	r0, r3
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b002      	add	sp, #8
 80004a8:	bd80      	pop	{r7, pc}

080004aa <_isatty>:

int _isatty(int file)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004b2:	2301      	movs	r3, #1
}
 80004b4:	0018      	movs	r0, r3
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b002      	add	sp, #8
 80004ba:	bd80      	pop	{r7, pc}

080004bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	0018      	movs	r0, r3
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b004      	add	sp, #16
 80004d0:	bd80      	pop	{r7, pc}
	...

080004d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004dc:	4a14      	ldr	r2, [pc, #80]	@ (8000530 <_sbrk+0x5c>)
 80004de:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <_sbrk+0x60>)
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004e8:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <_sbrk+0x64>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d102      	bne.n	80004f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f0:	4b11      	ldr	r3, [pc, #68]	@ (8000538 <_sbrk+0x64>)
 80004f2:	4a12      	ldr	r2, [pc, #72]	@ (800053c <_sbrk+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004f6:	4b10      	ldr	r3, [pc, #64]	@ (8000538 <_sbrk+0x64>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	18d3      	adds	r3, r2, r3
 80004fe:	693a      	ldr	r2, [r7, #16]
 8000500:	429a      	cmp	r2, r3
 8000502:	d207      	bcs.n	8000514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000504:	f000 fe92 	bl	800122c <__errno>
 8000508:	0003      	movs	r3, r0
 800050a:	220c      	movs	r2, #12
 800050c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800050e:	2301      	movs	r3, #1
 8000510:	425b      	negs	r3, r3
 8000512:	e009      	b.n	8000528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000514:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <_sbrk+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <_sbrk+0x64>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	18d2      	adds	r2, r2, r3
 8000522:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <_sbrk+0x64>)
 8000524:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000526:	68fb      	ldr	r3, [r7, #12]
}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b006      	add	sp, #24
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20003000 	.word	0x20003000
 8000534:	00000400 	.word	0x00000400
 8000538:	20000078 	.word	0x20000078
 800053c:	200001c8 	.word	0x200001c8

08000540 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000540:	480d      	ldr	r0, [pc, #52]	@ (8000578 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000542:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000544:	e000      	b.n	8000548 <Reset_Handler+0x8>
 8000546:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000548:	480c      	ldr	r0, [pc, #48]	@ (800057c <LoopForever+0x6>)
  ldr r1, =_edata
 800054a:	490d      	ldr	r1, [pc, #52]	@ (8000580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800054c:	4a0d      	ldr	r2, [pc, #52]	@ (8000584 <LoopForever+0xe>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000550:	e002      	b.n	8000558 <LoopCopyDataInit>

08000552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000556:	3304      	adds	r3, #4

08000558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800055c:	d3f9      	bcc.n	8000552 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055e:	4a0a      	ldr	r2, [pc, #40]	@ (8000588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000560:	4c0a      	ldr	r4, [pc, #40]	@ (800058c <LoopForever+0x16>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000564:	e001      	b.n	800056a <LoopFillZerobss>

08000566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000568:	3204      	adds	r2, #4

0800056a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800056c:	d3fb      	bcc.n	8000566 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800056e:	f000 fe63 	bl	8001238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000572:	f7ff fed7 	bl	8000324 <main>

08000576 <LoopForever>:

LoopForever:
  b LoopForever
 8000576:	e7fe      	b.n	8000576 <LoopForever>
  ldr   r0, =_estack
 8000578:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000584:	08001d60 	.word	0x08001d60
  ldr r2, =_sbss
 8000588:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800058c:	200001c8 	.word	0x200001c8

08000590 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC_IRQHandler>
	...

08000594 <GPIO_PeriClkControl>:
 */

#include "stm32c031xx_gpio_driver.h"

void GPIO_PeriClkControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	000a      	movs	r2, r1
 800059e:	1cfb      	adds	r3, r7, #3
 80005a0:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE)
 80005a2:	1cfb      	adds	r3, r7, #3
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d137      	bne.n	800061a <GPIO_PeriClkControl+0x86>
	{
		if (pGPIOx == GPIOA)
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	23a0      	movs	r3, #160	@ 0xa0
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d106      	bne.n	80005c2 <GPIO_PeriClkControl+0x2e>
		{
			GPIOA_PCLK_EN();
 80005b4:	4b36      	ldr	r3, [pc, #216]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 80005b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005b8:	4b35      	ldr	r3, [pc, #212]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 80005ba:	2101      	movs	r1, #1
 80005bc:	430a      	orrs	r2, r1
 80005be:	635a      	str	r2, [r3, #52]	@ 0x34
		else
		{
			// Do nothing
		}
	}
}
 80005c0:	e062      	b.n	8000688 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOB)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a33      	ldr	r2, [pc, #204]	@ (8000694 <GPIO_PeriClkControl+0x100>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d106      	bne.n	80005d8 <GPIO_PeriClkControl+0x44>
			GPIOB_PCLK_EN();
 80005ca:	4b31      	ldr	r3, [pc, #196]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 80005cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ce:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 80005d0:	2102      	movs	r1, #2
 80005d2:	430a      	orrs	r2, r1
 80005d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005d6:	e057      	b.n	8000688 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOC)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a2f      	ldr	r2, [pc, #188]	@ (8000698 <GPIO_PeriClkControl+0x104>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d106      	bne.n	80005ee <GPIO_PeriClkControl+0x5a>
			GPIOC_PCLK_EN();
 80005e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 80005e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 80005e6:	2104      	movs	r1, #4
 80005e8:	430a      	orrs	r2, r1
 80005ea:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005ec:	e04c      	b.n	8000688 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOD)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a2a      	ldr	r2, [pc, #168]	@ (800069c <GPIO_PeriClkControl+0x108>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d106      	bne.n	8000604 <GPIO_PeriClkControl+0x70>
			GPIOD_PCLK_EN();
 80005f6:	4b26      	ldr	r3, [pc, #152]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 80005f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005fa:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 80005fc:	2108      	movs	r1, #8
 80005fe:	430a      	orrs	r2, r1
 8000600:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000602:	e041      	b.n	8000688 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOF)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a26      	ldr	r2, [pc, #152]	@ (80006a0 <GPIO_PeriClkControl+0x10c>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d13d      	bne.n	8000688 <GPIO_PeriClkControl+0xf4>
			GPIOF_PCLK_EN();
 800060c:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 800060e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000610:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 8000612:	2120      	movs	r1, #32
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000618:	e036      	b.n	8000688 <GPIO_PeriClkControl+0xf4>
		if (pGPIOx == GPIOA)
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	23a0      	movs	r3, #160	@ 0xa0
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	429a      	cmp	r2, r3
 8000622:	d106      	bne.n	8000632 <GPIO_PeriClkControl+0x9e>
			GPIOA_PCLK_DI();
 8000624:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 800062a:	2101      	movs	r1, #1
 800062c:	438a      	bics	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000630:	e02a      	b.n	8000688 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOB)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a17      	ldr	r2, [pc, #92]	@ (8000694 <GPIO_PeriClkControl+0x100>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d106      	bne.n	8000648 <GPIO_PeriClkControl+0xb4>
			GPIOB_PCLK_DI();
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 800063c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800063e:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 8000640:	2102      	movs	r1, #2
 8000642:	438a      	bics	r2, r1
 8000644:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000646:	e01f      	b.n	8000688 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOC)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a13      	ldr	r2, [pc, #76]	@ (8000698 <GPIO_PeriClkControl+0x104>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d106      	bne.n	800065e <GPIO_PeriClkControl+0xca>
			GPIOC_PCLK_DI();
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 8000652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000654:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 8000656:	2104      	movs	r1, #4
 8000658:	438a      	bics	r2, r1
 800065a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800065c:	e014      	b.n	8000688 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOD)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a0e      	ldr	r2, [pc, #56]	@ (800069c <GPIO_PeriClkControl+0x108>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d106      	bne.n	8000674 <GPIO_PeriClkControl+0xe0>
			GPIOD_PCLK_DI();
 8000666:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 8000668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 800066c:	2108      	movs	r1, #8
 800066e:	438a      	bics	r2, r1
 8000670:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000672:	e009      	b.n	8000688 <GPIO_PeriClkControl+0xf4>
		else if (pGPIOx == GPIOF)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <GPIO_PeriClkControl+0x10c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d105      	bne.n	8000688 <GPIO_PeriClkControl+0xf4>
			GPIOF_PCLK_DI();
 800067c:	4b04      	ldr	r3, [pc, #16]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 800067e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <GPIO_PeriClkControl+0xfc>)
 8000682:	2120      	movs	r1, #32
 8000684:	438a      	bics	r2, r1
 8000686:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b002      	add	sp, #8
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	50000400 	.word	0x50000400
 8000698:	50000800 	.word	0x50000800
 800069c:	50000c00 	.word	0x50000c00
 80006a0:	50001400 	.word	0x50001400

080006a4 <GPIO_Init>:
		SYSCFG_PCLK_DI();
	}
}

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b087      	sub	sp, #28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	// Enable the peripheral clock, so that it is not required by the user to manually write it.
	GPIO_PeriClkControl(pGPIOHandle->pGPIOx, ENABLE);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2101      	movs	r1, #1
 80006b2:	0018      	movs	r0, r3
 80006b4:	f7ff ff6e 	bl	8000594 <GPIO_PeriClkControl>

	uint32_t temp = 0; //temporary register
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]

	//1. Configure the mode of GPIO pin

	if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	795b      	ldrb	r3, [r3, #5]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d820      	bhi.n	8000706 <GPIO_Init+0x62>
	{
		// Non interrupt mode
		temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	795b      	ldrb	r3, [r3, #5]
 80006c8:	001a      	movs	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	409a      	lsls	r2, r3
 80006d2:	0013      	movs	r3, r2
 80006d4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2* pGPIOHandle->GPIOPinConfig.GPIO_PinNumber)); // Clearing the required bits to avoid manipulation while setting them below.
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	2103      	movs	r1, #3
 80006e4:	4099      	lsls	r1, r3
 80006e6:	000b      	movs	r3, r1
 80006e8:	43db      	mvns	r3, r3
 80006ea:	0019      	movs	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	400a      	ands	r2, r1
 80006f2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6819      	ldr	r1, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	430a      	orrs	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	e0b8      	b.n	8000878 <GPIO_Init+0x1d4>

	else
	{
		// Whenever the Pin is in Interupt mode, it requires some input, hence the pin set to input mode .

		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2* pGPIOHandle->GPIOPinConfig.GPIO_PinNumber));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	2103      	movs	r1, #3
 8000714:	4099      	lsls	r1, r3
 8000716:	000b      	movs	r3, r1
 8000718:	43db      	mvns	r3, r3
 800071a:	0019      	movs	r1, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	400a      	ands	r2, r1
 8000722:	601a      	str	r2, [r3, #0]

		// Non interrupt mode
		if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	795b      	ldrb	r3, [r3, #5]
 8000728:	2b04      	cmp	r3, #4
 800072a:	d117      	bne.n	800075c <GPIO_Init+0xb8>
		{
			// Configure the FTSR

			EXTI->EXTI_FTSR1 |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 800072c:	4bac      	ldr	r3, [pc, #688]	@ (80009e0 <GPIO_Init+0x33c>)
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	0019      	movs	r1, r3
 8000736:	2301      	movs	r3, #1
 8000738:	408b      	lsls	r3, r1
 800073a:	0019      	movs	r1, r3
 800073c:	4ba8      	ldr	r3, [pc, #672]	@ (80009e0 <GPIO_Init+0x33c>)
 800073e:	430a      	orrs	r2, r1
 8000740:	605a      	str	r2, [r3, #4]

			// clear RTSR to be sure
			EXTI->EXTI_RTSR1 &= ~( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 8000742:	4ba7      	ldr	r3, [pc, #668]	@ (80009e0 <GPIO_Init+0x33c>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	0019      	movs	r1, r3
 800074c:	2301      	movs	r3, #1
 800074e:	408b      	lsls	r3, r1
 8000750:	43db      	mvns	r3, r3
 8000752:	0019      	movs	r1, r3
 8000754:	4ba2      	ldr	r3, [pc, #648]	@ (80009e0 <GPIO_Init+0x33c>)
 8000756:	400a      	ands	r2, r1
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	e035      	b.n	80007c8 <GPIO_Init+0x124>
		}
		else if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	795b      	ldrb	r3, [r3, #5]
 8000760:	2b05      	cmp	r3, #5
 8000762:	d117      	bne.n	8000794 <GPIO_Init+0xf0>
		{
			// Configure the RTSR
			EXTI->EXTI_RTSR1 |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 8000764:	4b9e      	ldr	r3, [pc, #632]	@ (80009e0 <GPIO_Init+0x33c>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	0019      	movs	r1, r3
 800076e:	2301      	movs	r3, #1
 8000770:	408b      	lsls	r3, r1
 8000772:	0019      	movs	r1, r3
 8000774:	4b9a      	ldr	r3, [pc, #616]	@ (80009e0 <GPIO_Init+0x33c>)
 8000776:	430a      	orrs	r2, r1
 8000778:	601a      	str	r2, [r3, #0]

			// clear FTSR to be sure
			EXTI->EXTI_FTSR1 &= ~( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 800077a:	4b99      	ldr	r3, [pc, #612]	@ (80009e0 <GPIO_Init+0x33c>)
 800077c:	685a      	ldr	r2, [r3, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	0019      	movs	r1, r3
 8000784:	2301      	movs	r3, #1
 8000786:	408b      	lsls	r3, r1
 8000788:	43db      	mvns	r3, r3
 800078a:	0019      	movs	r1, r3
 800078c:	4b94      	ldr	r3, [pc, #592]	@ (80009e0 <GPIO_Init+0x33c>)
 800078e:	400a      	ands	r2, r1
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	e019      	b.n	80007c8 <GPIO_Init+0x124>
		}
		else if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	795b      	ldrb	r3, [r3, #5]
 8000798:	2b03      	cmp	r3, #3
 800079a:	d115      	bne.n	80007c8 <GPIO_Init+0x124>
		{
			// Configure both FTSR and RTSR
			EXTI->EXTI_FTSR1 |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 800079c:	4b90      	ldr	r3, [pc, #576]	@ (80009e0 <GPIO_Init+0x33c>)
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	0019      	movs	r1, r3
 80007a6:	2301      	movs	r3, #1
 80007a8:	408b      	lsls	r3, r1
 80007aa:	0019      	movs	r1, r3
 80007ac:	4b8c      	ldr	r3, [pc, #560]	@ (80009e0 <GPIO_Init+0x33c>)
 80007ae:	430a      	orrs	r2, r1
 80007b0:	605a      	str	r2, [r3, #4]

			// Set RTSR as well
			EXTI->EXTI_RTSR1 |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 80007b2:	4b8b      	ldr	r3, [pc, #556]	@ (80009e0 <GPIO_Init+0x33c>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791b      	ldrb	r3, [r3, #4]
 80007ba:	0019      	movs	r1, r3
 80007bc:	2301      	movs	r3, #1
 80007be:	408b      	lsls	r3, r1
 80007c0:	0019      	movs	r1, r3
 80007c2:	4b87      	ldr	r3, [pc, #540]	@ (80009e0 <GPIO_Init+0x33c>)
 80007c4:	430a      	orrs	r2, r1
 80007c6:	601a      	str	r2, [r3, #0]
		}

		// COnfigure the GPIO port selection EXTI_EXTICR (This register is available in EXTI register itself unlike in the course )

		uint8_t temp1 = pGPIOHandle->GPIOPinConfig.GPIO_PinNumber / 4;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	791a      	ldrb	r2, [r3, #4]
 80007cc:	2313      	movs	r3, #19
 80007ce:	18fb      	adds	r3, r7, r3
 80007d0:	0892      	lsrs	r2, r2, #2
 80007d2:	701a      	strb	r2, [r3, #0]
		uint8_t temp2 = pGPIOHandle->GPIOPinConfig.GPIO_PinNumber % 4;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791a      	ldrb	r2, [r3, #4]
 80007d8:	2312      	movs	r3, #18
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	2103      	movs	r1, #3
 80007de:	400a      	ands	r2, r1
 80007e0:	701a      	strb	r2, [r3, #0]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle ->pGPIOx);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	23a0      	movs	r3, #160	@ 0xa0
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d01d      	beq.n	800082a <GPIO_Init+0x186>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a7c      	ldr	r2, [pc, #496]	@ (80009e4 <GPIO_Init+0x340>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d016      	beq.n	8000826 <GPIO_Init+0x182>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a7a      	ldr	r2, [pc, #488]	@ (80009e8 <GPIO_Init+0x344>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d00f      	beq.n	8000822 <GPIO_Init+0x17e>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a79      	ldr	r2, [pc, #484]	@ (80009ec <GPIO_Init+0x348>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d008      	beq.n	800081e <GPIO_Init+0x17a>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a77      	ldr	r2, [pc, #476]	@ (80009f0 <GPIO_Init+0x34c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d101      	bne.n	800081a <GPIO_Init+0x176>
 8000816:	2305      	movs	r3, #5
 8000818:	e008      	b.n	800082c <GPIO_Init+0x188>
 800081a:	2300      	movs	r3, #0
 800081c:	e006      	b.n	800082c <GPIO_Init+0x188>
 800081e:	2303      	movs	r3, #3
 8000820:	e004      	b.n	800082c <GPIO_Init+0x188>
 8000822:	2302      	movs	r3, #2
 8000824:	e002      	b.n	800082c <GPIO_Init+0x188>
 8000826:	2301      	movs	r3, #1
 8000828:	e000      	b.n	800082c <GPIO_Init+0x188>
 800082a:	2300      	movs	r3, #0
 800082c:	2111      	movs	r1, #17
 800082e:	187a      	adds	r2, r7, r1
 8000830:	7013      	strb	r3, [r2, #0]

		EXTI->EXTI_EXTICR[temp1] |= (portcode << (8 * temp2) );
 8000832:	4a6b      	ldr	r2, [pc, #428]	@ (80009e0 <GPIO_Init+0x33c>)
 8000834:	2413      	movs	r4, #19
 8000836:	193b      	adds	r3, r7, r4
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	3318      	adds	r3, #24
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	589a      	ldr	r2, [r3, r2]
 8000840:	187b      	adds	r3, r7, r1
 8000842:	7819      	ldrb	r1, [r3, #0]
 8000844:	2312      	movs	r3, #18
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	4099      	lsls	r1, r3
 800084e:	000b      	movs	r3, r1
 8000850:	0018      	movs	r0, r3
 8000852:	4963      	ldr	r1, [pc, #396]	@ (80009e0 <GPIO_Init+0x33c>)
 8000854:	193b      	adds	r3, r7, r4
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4302      	orrs	r2, r0
 800085a:	3318      	adds	r3, #24
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	505a      	str	r2, [r3, r1]

		// Enable the EXTI interupt delivery using IMR
		EXTI->EXTI_IMR1 |= (1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 8000860:	4a5f      	ldr	r2, [pc, #380]	@ (80009e0 <GPIO_Init+0x33c>)
 8000862:	2380      	movs	r3, #128	@ 0x80
 8000864:	58d3      	ldr	r3, [r2, r3]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	7912      	ldrb	r2, [r2, #4]
 800086a:	0011      	movs	r1, r2
 800086c:	2201      	movs	r2, #1
 800086e:	408a      	lsls	r2, r1
 8000870:	495b      	ldr	r1, [pc, #364]	@ (80009e0 <GPIO_Init+0x33c>)
 8000872:	4313      	orrs	r3, r2
 8000874:	2280      	movs	r2, #128	@ 0x80
 8000876:	508b      	str	r3, [r1, r2]
	}
	temp = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

	//2. Configure the speed of GPIO pin

	temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	799b      	ldrb	r3, [r3, #6]
 8000880:	001a      	movs	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	409a      	lsls	r2, r3
 800088a:	0013      	movs	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	791b      	ldrb	r3, [r3, #4]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2103      	movs	r1, #3
 800089c:	4099      	lsls	r1, r3
 800089e:	000b      	movs	r3, r1
 80008a0:	43db      	mvns	r3, r3
 80008a2:	0019      	movs	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	400a      	ands	r2, r1
 80008aa:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6899      	ldr	r1, [r3, #8]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	609a      	str	r2, [r3, #8]
	temp = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

	//3. Configure the pupd of GPIO pin
	temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	79db      	ldrb	r3, [r3, #7]
 80008c4:	001a      	movs	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	409a      	lsls	r2, r3
 80008ce:	0013      	movs	r3, r2
 80008d0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2103      	movs	r1, #3
 80008e0:	4099      	lsls	r1, r3
 80008e2:	000b      	movs	r3, r1
 80008e4:	43db      	mvns	r3, r3
 80008e6:	0019      	movs	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	400a      	ands	r2, r1
 80008ee:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	68d9      	ldr	r1, [r3, #12]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]

	//4. Configure the optype of GPIO pin
	temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinOPType << (pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7a1b      	ldrb	r3, [r3, #8]
 8000908:	001a      	movs	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	409a      	lsls	r2, r3
 8000910:	0013      	movs	r3, r2
 8000912:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	791b      	ldrb	r3, [r3, #4]
 800091e:	0019      	movs	r1, r3
 8000920:	2301      	movs	r3, #1
 8000922:	408b      	lsls	r3, r1
 8000924:	43db      	mvns	r3, r3
 8000926:	0019      	movs	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	400a      	ands	r2, r1
 800092e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	6859      	ldr	r1, [r3, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	430a      	orrs	r2, r1
 800093e:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

	//5. Configure the Alternate functionality of GPIO pin
	if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_AF)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	795b      	ldrb	r3, [r3, #5]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d144      	bne.n	80009d6 <GPIO_Init+0x332>
	{
		// if the mode if ALternate function, only then configure AF.

		uint32_t temp1 = pGPIOHandle-> GPIOPinConfig.GPIO_PinNumber % 8 ;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	791b      	ldrb	r3, [r3, #4]
 8000950:	001a      	movs	r2, r3
 8000952:	2307      	movs	r3, #7
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]

		if (pGPIOHandle-> GPIOPinConfig.GPIO_PinNumber < 8 )
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	791b      	ldrb	r3, [r3, #4]
 800095c:	2b07      	cmp	r3, #7
 800095e:	d81d      	bhi.n	800099c <GPIO_Init+0x2f8>
		{
			pGPIOHandle->pGPIOx->AFRL &= ~(0xf << (4 * temp1));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6a1a      	ldr	r2, [r3, #32]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	210f      	movs	r1, #15
 800096c:	4099      	lsls	r1, r3
 800096e:	000b      	movs	r3, r1
 8000970:	43db      	mvns	r3, r3
 8000972:	0019      	movs	r1, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	400a      	ands	r2, r1
 800097a:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle-> GPIOPinConfig.GPIO_PinAltFuncMode << (4 * temp1));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6a1a      	ldr	r2, [r3, #32]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7a5b      	ldrb	r3, [r3, #9]
 8000986:	0019      	movs	r1, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4099      	lsls	r1, r3
 800098e:	000b      	movs	r3, r1
 8000990:	0019      	movs	r1, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	430a      	orrs	r2, r1
 8000998:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xf << (4 * temp1));
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle-> GPIOPinConfig.GPIO_PinAltFuncMode << (4 * temp1));
		}
	}

}
 800099a:	e01c      	b.n	80009d6 <GPIO_Init+0x332>
			pGPIOHandle->pGPIOx->AFRH &= ~(0xf << (4 * temp1));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	210f      	movs	r1, #15
 80009a8:	4099      	lsls	r1, r3
 80009aa:	000b      	movs	r3, r1
 80009ac:	43db      	mvns	r3, r3
 80009ae:	0019      	movs	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	400a      	ands	r2, r1
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle-> GPIOPinConfig.GPIO_PinAltFuncMode << (4 * temp1));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	7a5b      	ldrb	r3, [r3, #9]
 80009c2:	0019      	movs	r1, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4099      	lsls	r1, r3
 80009ca:	000b      	movs	r3, r1
 80009cc:	0019      	movs	r1, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	430a      	orrs	r2, r1
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b007      	add	sp, #28
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	40021800 	.word	0x40021800
 80009e4:	50000400 	.word	0x50000400
 80009e8:	50000800 	.word	0x50000800
 80009ec:	50000c00 	.word	0x50000c00
 80009f0:	50001400 	.word	0x50001400

080009f4 <GPIO_WriteToOutputPin>:
	value = (uint16_t) (pGPIOx->IDR) ;
	return value;
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	0008      	movs	r0, r1
 80009fe:	0011      	movs	r1, r2
 8000a00:	1cfb      	adds	r3, r7, #3
 8000a02:	1c02      	adds	r2, r0, #0
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	1cbb      	adds	r3, r7, #2
 8000a08:	1c0a      	adds	r2, r1, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
	if (Value == GPIO_PIN_SET)
 8000a0c:	1cbb      	adds	r3, r7, #2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10a      	bne.n	8000a2a <GPIO_WriteToOutputPin+0x36>
	{
		// Set the pin of the corresponding bit field of the port
		pGPIOx->ODR |= (1 << PinNumber);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	1cfa      	adds	r2, r7, #3
 8000a1a:	7812      	ldrb	r2, [r2, #0]
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4091      	lsls	r1, r2
 8000a20:	000a      	movs	r2, r1
 8000a22:	431a      	orrs	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	615a      	str	r2, [r3, #20]
	{
		//Clear the pin
		pGPIOx->ODR &= ~(1 << PinNumber);
	}

}
 8000a28:	e00a      	b.n	8000a40 <GPIO_WriteToOutputPin+0x4c>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	1cfa      	adds	r2, r7, #3
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	2101      	movs	r1, #1
 8000a34:	4091      	lsls	r1, r2
 8000a36:	000a      	movs	r2, r1
 8000a38:	43d2      	mvns	r2, r2
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	615a      	str	r2, [r3, #20]
}
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b002      	add	sp, #8
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <SPI_PeriClkControl>:
#include "stm32c031xx_spi_driver.h"

#include "stm32c031xx.h"

void SPI_PeriClkControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	000a      	movs	r2, r1
 8000a52:	1cfb      	adds	r3, r7, #3
 8000a54:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE)
 8000a56:	1cfb      	adds	r3, r7, #3
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d117      	bne.n	8000a8e <SPI_PeriClkControl+0x46>
	{
		if (pSPIx == SPI1)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <SPI_PeriClkControl+0x78>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d107      	bne.n	8000a76 <SPI_PeriClkControl+0x2e>
		{
			SPI1_PCLK_EN();
 8000a66:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <SPI_PeriClkControl+0x7c>)
 8000a68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <SPI_PeriClkControl+0x7c>)
 8000a6c:	2180      	movs	r1, #128	@ 0x80
 8000a6e:	0149      	lsls	r1, r1, #5
 8000a70:	430a      	orrs	r2, r1
 8000a72:	641a      	str	r2, [r3, #64]	@ 0x40
		else
		{
			// Do nothing
		}
	}
}
 8000a74:	e020      	b.n	8000ab8 <SPI_PeriClkControl+0x70>
		else if (pSPIx == SPI2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a13      	ldr	r2, [pc, #76]	@ (8000ac8 <SPI_PeriClkControl+0x80>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d11c      	bne.n	8000ab8 <SPI_PeriClkControl+0x70>
			SPI2_PCLK_EN();
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <SPI_PeriClkControl+0x7c>)
 8000a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <SPI_PeriClkControl+0x7c>)
 8000a84:	2180      	movs	r1, #128	@ 0x80
 8000a86:	01c9      	lsls	r1, r1, #7
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000a8c:	e014      	b.n	8000ab8 <SPI_PeriClkControl+0x70>
		if (pSPIx == SPI1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac0 <SPI_PeriClkControl+0x78>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d106      	bne.n	8000aa4 <SPI_PeriClkControl+0x5c>
			SPI1_PCLK_DI();
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <SPI_PeriClkControl+0x7c>)
 8000a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <SPI_PeriClkControl+0x7c>)
 8000a9c:	490b      	ldr	r1, [pc, #44]	@ (8000acc <SPI_PeriClkControl+0x84>)
 8000a9e:	400a      	ands	r2, r1
 8000aa0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000aa2:	e009      	b.n	8000ab8 <SPI_PeriClkControl+0x70>
		else if (pSPIx == SPI2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <SPI_PeriClkControl+0x80>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d105      	bne.n	8000ab8 <SPI_PeriClkControl+0x70>
			SPI2_PCLK_DI();
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <SPI_PeriClkControl+0x7c>)
 8000aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <SPI_PeriClkControl+0x7c>)
 8000ab2:	4907      	ldr	r1, [pc, #28]	@ (8000ad0 <SPI_PeriClkControl+0x88>)
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b002      	add	sp, #8
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40013000 	.word	0x40013000
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40003000 	.word	0x40003000
 8000acc:	ffffefff 	.word	0xffffefff
 8000ad0:	ffffbfff 	.word	0xffffbfff

08000ad4 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

	SPI_PeriClkControl(pSPIHandle->pSPIx, ENABLE);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff ffb0 	bl	8000a48 <SPI_PeriClkControl>

	uint32_t tempreg = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]

	// 1. Set the mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPIx_CR1_MSTR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]


	// 2. Configure the Bus config

	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUSCFG_FD)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	795b      	ldrb	r3, [r3, #5]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d104      	bne.n	8000b0a <SPI_Init+0x36>
	{
		// Clear the BIDIMODE bit
		tempreg &= ~(1 << SPIx_CR1_BIDIMODE);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4a22      	ldr	r2, [pc, #136]	@ (8000b8c <SPI_Init+0xb8>)
 8000b04:	4013      	ands	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	e016      	b.n	8000b38 <SPI_Init+0x64>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUSCFG_HD)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	795b      	ldrb	r3, [r3, #5]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d105      	bne.n	8000b1e <SPI_Init+0x4a>
	{
		// Set the BIDIMODE bit
		tempreg |= (1 << SPIx_CR1_BIDIMODE);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2280      	movs	r2, #128	@ 0x80
 8000b16:	0212      	lsls	r2, r2, #8
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	e00c      	b.n	8000b38 <SPI_Init+0x64>

		//Configure BIDIOE bit for direction of transfer??

	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUSCFG_SIMPLEX_RX)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	795b      	ldrb	r3, [r3, #5]
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	d108      	bne.n	8000b38 <SPI_Init+0x64>
	{
		// Clear the BIDIMODE bit
		tempreg &= ~(1 << SPIx_CR1_BIDIMODE);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4a18      	ldr	r2, [pc, #96]	@ (8000b8c <SPI_Init+0xb8>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]

		// RXONLY bit must be set
		tempreg |= (1 << SPIx_CR1_RXONLY);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2280      	movs	r2, #128	@ 0x80
 8000b32:	00d2      	lsls	r2, r2, #3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
	}


	// Configure SPI SClock

	tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPIx_CR1_BR);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	799b      	ldrb	r3, [r3, #6]
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]

	// Configure SPI DFF (Data Size DS) is present in CR2

	pSPIHandle->pSPIx->CR2 |= (pSPIHandle->SPIConfig.SPI_DS << SPIx_CR2_DS);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6859      	ldr	r1, [r3, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	79db      	ldrb	r3, [r3, #7]
 8000b4e:	021a      	lsls	r2, r3, #8
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	430a      	orrs	r2, r1
 8000b56:	605a      	str	r2, [r3, #4]

	// Configure SPI CPOL

	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPIx_CR1_CPOL);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7a1b      	ldrb	r3, [r3, #8]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]

	// Configure SPI CPHA

	tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA << SPIx_CR1_CPHA);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7a5b      	ldrb	r3, [r3, #9]
 8000b68:	001a      	movs	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]

	// Configure SPI SSM

	tempreg |= (pSPIHandle->SPIConfig.SPI_SSM << SPIx_CR1_SSM);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7a9b      	ldrb	r3, [r3, #10]
 8000b74:	025b      	lsls	r3, r3, #9
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 = tempreg;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	601a      	str	r2, [r3, #0]

}
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b004      	add	sp, #16
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	ffff7fff 	.word	0xffff7fff

08000b90 <SPI_GetFlagStatus>:
		// DO nothing
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d001      	beq.n	8000ba8 <SPI_GetFlagStatus+0x18>
	{
		return FLAG_SET;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e000      	b.n	8000baa <SPI_GetFlagStatus+0x1a>
	}
	return FLAG_RESET;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	0018      	movs	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <SPI_GetDataLength>:

uint16_t SPI_GetDataLength(SPI_RegDef_t *pSPIx)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
	return ((pSPIx->CR2 >> SPIx_CR2_DS) & 15);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	0a1b      	lsrs	r3, r3, #8
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	b29b      	uxth	r3, r3
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b002      	add	sp, #8
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <SPI_SendData>:


/* This is a blocking call function as the while loops will be running till a;; the bits are sent */

void SPI_SendData (SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
	while (Len > 0)
 8000bdc:	e02f      	b.n	8000c3e <SPI_SendData+0x6e>
	{
		// 1. wait until TXE is SET
		while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2102      	movs	r1, #2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff ffd3 	bl	8000b90 <SPI_GetFlagStatus>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d0f8      	beq.n	8000be0 <SPI_SendData+0x10>

		// 2. CHeck DFF bit
		if (SPI_GetDataLength(pSPIx) == SPI_DFF_8BITS)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff ffde 	bl	8000bb2 <SPI_GetDataLength>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	2b07      	cmp	r3, #7
 8000bfa:	d10b      	bne.n	8000c14 <SPI_SendData+0x44>
		{
			// 8 bit
			pSPIx->DR = *pTxBuffer;
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	001a      	movs	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	60da      	str	r2, [r3, #12]
			Len--;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	e014      	b.n	8000c3e <SPI_SendData+0x6e>
		}
		else if (SPI_GetDataLength(pSPIx) == SPI_DFF_16BITS)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff ffcb 	bl	8000bb2 <SPI_GetDataLength>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	2b0f      	cmp	r3, #15
 8000c20:	d10d      	bne.n	8000c3e <SPI_SendData+0x6e>
		{
			// 16 bit
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	001a      	movs	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	60da      	str	r2, [r3, #12]
			Len--;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	607b      	str	r3, [r7, #4]
			Len--; // Since 2 bytes of data is sent in 16 bit length data
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
	while (Len > 0)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1cc      	bne.n	8000bde <SPI_SendData+0xe>
		}
	}



}
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b004      	add	sp, #16
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	000a      	movs	r2, r1
 8000c58:	1cfb      	adds	r3, r7, #3
 8000c5a:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE)
 8000c5c:	1cfb      	adds	r3, r7, #3
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d106      	bne.n	8000c72 <SPI_PeripheralControl+0x24>
	{
		pSPIx->CR1 |= (1 << SPIx_CR1_SPE);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2240      	movs	r2, #64	@ 0x40
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	601a      	str	r2, [r3, #0]

	else
	{
		pSPIx->CR1 &= ~(1 << SPIx_CR1_SPE);
	}
}
 8000c70:	e006      	b.n	8000c80 <SPI_PeripheralControl+0x32>
		pSPIx->CR1 &= ~(1 << SPIx_CR1_SPE);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2240      	movs	r2, #64	@ 0x40
 8000c78:	4393      	bics	r3, r2
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <SPI_SSOEConfig>:
		pSPIx->CR1 &= ~(1 << SPIx_CR1_SSI);
	}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	000a      	movs	r2, r1
 8000c92:	1cfb      	adds	r3, r7, #3
 8000c94:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE)
 8000c96:	1cfb      	adds	r3, r7, #3
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d106      	bne.n	8000cac <SPI_SSOEConfig+0x24>
	{
		pSPIx->CR2 |= (1 << SPIx_CR2_SSOE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	605a      	str	r2, [r3, #4]

	else
	{
		pSPIx->CR2 &= ~(1 << SPIx_CR2_SSOE);
	}
}
 8000caa:	e006      	b.n	8000cba <SPI_SSOEConfig+0x32>
		pSPIx->CR2 &= ~(1 << SPIx_CR2_SSOE);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	4393      	bics	r3, r2
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	605a      	str	r2, [r3, #4]
}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <SPI_ReceiveData>:

void SPI_ReceiveData (SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	60f8      	str	r0, [r7, #12]
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
	while (Len > 0)
 8000cce:	e02f      	b.n	8000d30 <SPI_ReceiveData+0x6e>
	{
		// 1. wait until RXNE is SET
		while (SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff ff5a 	bl	8000b90 <SPI_GetFlagStatus>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d0f8      	beq.n	8000cd2 <SPI_ReceiveData+0x10>

		// 2. CHeck DFF bit
		if (SPI_GetDataLength(pSPIx) == SPI_DFF_8BITS)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff ff65 	bl	8000bb2 <SPI_GetDataLength>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	2b07      	cmp	r3, #7
 8000cec:	d10b      	bne.n	8000d06 <SPI_ReceiveData+0x44>
		{
			// 8 bit
			*pRxBuffer = pSPIx->DR;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	701a      	strb	r2, [r3, #0]
			Len--;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	e014      	b.n	8000d30 <SPI_ReceiveData+0x6e>
		}
		else if (SPI_GetDataLength(pSPIx) == SPI_DFF_16BITS)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ff52 	bl	8000bb2 <SPI_GetDataLength>
 8000d0e:	0003      	movs	r3, r0
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d10d      	bne.n	8000d30 <SPI_ReceiveData+0x6e>
		{
			// 16 bit
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	801a      	strh	r2, [r3, #0]
			Len--;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
			Len--; // Since 2 bytes of data is sent in 16 bit length data
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
	while (Len > 0)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1cc      	bne.n	8000cd0 <SPI_ReceiveData+0xe>
		}
	}
}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b004      	add	sp, #16
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <std>:
 8000d40:	2300      	movs	r3, #0
 8000d42:	b510      	push	{r4, lr}
 8000d44:	0004      	movs	r4, r0
 8000d46:	6003      	str	r3, [r0, #0]
 8000d48:	6043      	str	r3, [r0, #4]
 8000d4a:	6083      	str	r3, [r0, #8]
 8000d4c:	8181      	strh	r1, [r0, #12]
 8000d4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000d50:	81c2      	strh	r2, [r0, #14]
 8000d52:	6103      	str	r3, [r0, #16]
 8000d54:	6143      	str	r3, [r0, #20]
 8000d56:	6183      	str	r3, [r0, #24]
 8000d58:	0019      	movs	r1, r3
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	305c      	adds	r0, #92	@ 0x5c
 8000d5e:	f000 fa0f 	bl	8001180 <memset>
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <std+0x50>)
 8000d64:	6224      	str	r4, [r4, #32]
 8000d66:	6263      	str	r3, [r4, #36]	@ 0x24
 8000d68:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <std+0x54>)
 8000d6a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <std+0x58>)
 8000d6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000d70:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <std+0x5c>)
 8000d72:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d74:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <std+0x60>)
 8000d76:	429c      	cmp	r4, r3
 8000d78:	d005      	beq.n	8000d86 <std+0x46>
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <std+0x64>)
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	d002      	beq.n	8000d86 <std+0x46>
 8000d80:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <std+0x68>)
 8000d82:	429c      	cmp	r4, r3
 8000d84:	d103      	bne.n	8000d8e <std+0x4e>
 8000d86:	0020      	movs	r0, r4
 8000d88:	3058      	adds	r0, #88	@ 0x58
 8000d8a:	f000 fa79 	bl	8001280 <__retarget_lock_init_recursive>
 8000d8e:	bd10      	pop	{r4, pc}
 8000d90:	08000fa9 	.word	0x08000fa9
 8000d94:	08000fd1 	.word	0x08000fd1
 8000d98:	08001009 	.word	0x08001009
 8000d9c:	08001035 	.word	0x08001035
 8000da0:	2000007c 	.word	0x2000007c
 8000da4:	200000e4 	.word	0x200000e4
 8000da8:	2000014c 	.word	0x2000014c

08000dac <stdio_exit_handler>:
 8000dac:	b510      	push	{r4, lr}
 8000dae:	4a03      	ldr	r2, [pc, #12]	@ (8000dbc <stdio_exit_handler+0x10>)
 8000db0:	4903      	ldr	r1, [pc, #12]	@ (8000dc0 <stdio_exit_handler+0x14>)
 8000db2:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <stdio_exit_handler+0x18>)
 8000db4:	f000 f86c 	bl	8000e90 <_fwalk_sglue>
 8000db8:	bd10      	pop	{r4, pc}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	08001b11 	.word	0x08001b11
 8000dc4:	20000010 	.word	0x20000010

08000dc8 <cleanup_stdio>:
 8000dc8:	6841      	ldr	r1, [r0, #4]
 8000dca:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <cleanup_stdio+0x30>)
 8000dcc:	b510      	push	{r4, lr}
 8000dce:	0004      	movs	r4, r0
 8000dd0:	4299      	cmp	r1, r3
 8000dd2:	d001      	beq.n	8000dd8 <cleanup_stdio+0x10>
 8000dd4:	f000 fe9c 	bl	8001b10 <_fflush_r>
 8000dd8:	68a1      	ldr	r1, [r4, #8]
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <cleanup_stdio+0x34>)
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d002      	beq.n	8000de6 <cleanup_stdio+0x1e>
 8000de0:	0020      	movs	r0, r4
 8000de2:	f000 fe95 	bl	8001b10 <_fflush_r>
 8000de6:	68e1      	ldr	r1, [r4, #12]
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <cleanup_stdio+0x38>)
 8000dea:	4299      	cmp	r1, r3
 8000dec:	d002      	beq.n	8000df4 <cleanup_stdio+0x2c>
 8000dee:	0020      	movs	r0, r4
 8000df0:	f000 fe8e 	bl	8001b10 <_fflush_r>
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	2000007c 	.word	0x2000007c
 8000dfc:	200000e4 	.word	0x200000e4
 8000e00:	2000014c 	.word	0x2000014c

08000e04 <global_stdio_init.part.0>:
 8000e04:	b510      	push	{r4, lr}
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <global_stdio_init.part.0+0x28>)
 8000e08:	4a09      	ldr	r2, [pc, #36]	@ (8000e30 <global_stdio_init.part.0+0x2c>)
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	4809      	ldr	r0, [pc, #36]	@ (8000e34 <global_stdio_init.part.0+0x30>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	f7ff ff95 	bl	8000d40 <std>
 8000e16:	2201      	movs	r2, #1
 8000e18:	2109      	movs	r1, #9
 8000e1a:	4807      	ldr	r0, [pc, #28]	@ (8000e38 <global_stdio_init.part.0+0x34>)
 8000e1c:	f7ff ff90 	bl	8000d40 <std>
 8000e20:	2202      	movs	r2, #2
 8000e22:	2112      	movs	r1, #18
 8000e24:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <global_stdio_init.part.0+0x38>)
 8000e26:	f7ff ff8b 	bl	8000d40 <std>
 8000e2a:	bd10      	pop	{r4, pc}
 8000e2c:	200001b4 	.word	0x200001b4
 8000e30:	08000dad 	.word	0x08000dad
 8000e34:	2000007c 	.word	0x2000007c
 8000e38:	200000e4 	.word	0x200000e4
 8000e3c:	2000014c 	.word	0x2000014c

08000e40 <__sfp_lock_acquire>:
 8000e40:	b510      	push	{r4, lr}
 8000e42:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <__sfp_lock_acquire+0xc>)
 8000e44:	f000 fa1d 	bl	8001282 <__retarget_lock_acquire_recursive>
 8000e48:	bd10      	pop	{r4, pc}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	200001bd 	.word	0x200001bd

08000e50 <__sfp_lock_release>:
 8000e50:	b510      	push	{r4, lr}
 8000e52:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <__sfp_lock_release+0xc>)
 8000e54:	f000 fa16 	bl	8001284 <__retarget_lock_release_recursive>
 8000e58:	bd10      	pop	{r4, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	200001bd 	.word	0x200001bd

08000e60 <__sinit>:
 8000e60:	b510      	push	{r4, lr}
 8000e62:	0004      	movs	r4, r0
 8000e64:	f7ff ffec 	bl	8000e40 <__sfp_lock_acquire>
 8000e68:	6a23      	ldr	r3, [r4, #32]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <__sinit+0x14>
 8000e6e:	f7ff ffef 	bl	8000e50 <__sfp_lock_release>
 8000e72:	bd10      	pop	{r4, pc}
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <__sinit+0x28>)
 8000e76:	6223      	str	r3, [r4, #32]
 8000e78:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <__sinit+0x2c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f6      	bne.n	8000e6e <__sinit+0xe>
 8000e80:	f7ff ffc0 	bl	8000e04 <global_stdio_init.part.0>
 8000e84:	e7f3      	b.n	8000e6e <__sinit+0xe>
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	08000dc9 	.word	0x08000dc9
 8000e8c:	200001b4 	.word	0x200001b4

08000e90 <_fwalk_sglue>:
 8000e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e92:	0014      	movs	r4, r2
 8000e94:	2600      	movs	r6, #0
 8000e96:	9000      	str	r0, [sp, #0]
 8000e98:	9101      	str	r1, [sp, #4]
 8000e9a:	68a5      	ldr	r5, [r4, #8]
 8000e9c:	6867      	ldr	r7, [r4, #4]
 8000e9e:	3f01      	subs	r7, #1
 8000ea0:	d504      	bpl.n	8000eac <_fwalk_sglue+0x1c>
 8000ea2:	6824      	ldr	r4, [r4, #0]
 8000ea4:	2c00      	cmp	r4, #0
 8000ea6:	d1f8      	bne.n	8000e9a <_fwalk_sglue+0xa>
 8000ea8:	0030      	movs	r0, r6
 8000eaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000eac:	89ab      	ldrh	r3, [r5, #12]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d908      	bls.n	8000ec4 <_fwalk_sglue+0x34>
 8000eb2:	220e      	movs	r2, #14
 8000eb4:	5eab      	ldrsh	r3, [r5, r2]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	d004      	beq.n	8000ec4 <_fwalk_sglue+0x34>
 8000eba:	0029      	movs	r1, r5
 8000ebc:	9800      	ldr	r0, [sp, #0]
 8000ebe:	9b01      	ldr	r3, [sp, #4]
 8000ec0:	4798      	blx	r3
 8000ec2:	4306      	orrs	r6, r0
 8000ec4:	3568      	adds	r5, #104	@ 0x68
 8000ec6:	e7ea      	b.n	8000e9e <_fwalk_sglue+0xe>

08000ec8 <iprintf>:
 8000ec8:	b40f      	push	{r0, r1, r2, r3}
 8000eca:	b507      	push	{r0, r1, r2, lr}
 8000ecc:	4905      	ldr	r1, [pc, #20]	@ (8000ee4 <iprintf+0x1c>)
 8000ece:	ab04      	add	r3, sp, #16
 8000ed0:	6808      	ldr	r0, [r1, #0]
 8000ed2:	cb04      	ldmia	r3!, {r2}
 8000ed4:	6881      	ldr	r1, [r0, #8]
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	f000 fafa 	bl	80014d0 <_vfiprintf_r>
 8000edc:	b003      	add	sp, #12
 8000ede:	bc08      	pop	{r3}
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4718      	bx	r3
 8000ee4:	2000000c 	.word	0x2000000c

08000ee8 <_puts_r>:
 8000ee8:	6a03      	ldr	r3, [r0, #32]
 8000eea:	b570      	push	{r4, r5, r6, lr}
 8000eec:	0005      	movs	r5, r0
 8000eee:	000e      	movs	r6, r1
 8000ef0:	6884      	ldr	r4, [r0, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <_puts_r+0x12>
 8000ef6:	f7ff ffb3 	bl	8000e60 <__sinit>
 8000efa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000efc:	07db      	lsls	r3, r3, #31
 8000efe:	d405      	bmi.n	8000f0c <_puts_r+0x24>
 8000f00:	89a3      	ldrh	r3, [r4, #12]
 8000f02:	059b      	lsls	r3, r3, #22
 8000f04:	d402      	bmi.n	8000f0c <_puts_r+0x24>
 8000f06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f08:	f000 f9bb 	bl	8001282 <__retarget_lock_acquire_recursive>
 8000f0c:	89a3      	ldrh	r3, [r4, #12]
 8000f0e:	071b      	lsls	r3, r3, #28
 8000f10:	d502      	bpl.n	8000f18 <_puts_r+0x30>
 8000f12:	6923      	ldr	r3, [r4, #16]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d11f      	bne.n	8000f58 <_puts_r+0x70>
 8000f18:	0021      	movs	r1, r4
 8000f1a:	0028      	movs	r0, r5
 8000f1c:	f000 f8d2 	bl	80010c4 <__swsetup_r>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d019      	beq.n	8000f58 <_puts_r+0x70>
 8000f24:	2501      	movs	r5, #1
 8000f26:	426d      	negs	r5, r5
 8000f28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000f2a:	07db      	lsls	r3, r3, #31
 8000f2c:	d405      	bmi.n	8000f3a <_puts_r+0x52>
 8000f2e:	89a3      	ldrh	r3, [r4, #12]
 8000f30:	059b      	lsls	r3, r3, #22
 8000f32:	d402      	bmi.n	8000f3a <_puts_r+0x52>
 8000f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f36:	f000 f9a5 	bl	8001284 <__retarget_lock_release_recursive>
 8000f3a:	0028      	movs	r0, r5
 8000f3c:	bd70      	pop	{r4, r5, r6, pc}
 8000f3e:	3601      	adds	r6, #1
 8000f40:	60a3      	str	r3, [r4, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	da04      	bge.n	8000f50 <_puts_r+0x68>
 8000f46:	69a2      	ldr	r2, [r4, #24]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dc16      	bgt.n	8000f7a <_puts_r+0x92>
 8000f4c:	290a      	cmp	r1, #10
 8000f4e:	d014      	beq.n	8000f7a <_puts_r+0x92>
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	6022      	str	r2, [r4, #0]
 8000f56:	7019      	strb	r1, [r3, #0]
 8000f58:	68a3      	ldr	r3, [r4, #8]
 8000f5a:	7831      	ldrb	r1, [r6, #0]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	2900      	cmp	r1, #0
 8000f60:	d1ed      	bne.n	8000f3e <_puts_r+0x56>
 8000f62:	60a3      	str	r3, [r4, #8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	da0f      	bge.n	8000f88 <_puts_r+0xa0>
 8000f68:	0022      	movs	r2, r4
 8000f6a:	0028      	movs	r0, r5
 8000f6c:	310a      	adds	r1, #10
 8000f6e:	f000 f867 	bl	8001040 <__swbuf_r>
 8000f72:	3001      	adds	r0, #1
 8000f74:	d0d6      	beq.n	8000f24 <_puts_r+0x3c>
 8000f76:	250a      	movs	r5, #10
 8000f78:	e7d6      	b.n	8000f28 <_puts_r+0x40>
 8000f7a:	0022      	movs	r2, r4
 8000f7c:	0028      	movs	r0, r5
 8000f7e:	f000 f85f 	bl	8001040 <__swbuf_r>
 8000f82:	3001      	adds	r0, #1
 8000f84:	d1e8      	bne.n	8000f58 <_puts_r+0x70>
 8000f86:	e7cd      	b.n	8000f24 <_puts_r+0x3c>
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	6022      	str	r2, [r4, #0]
 8000f8e:	220a      	movs	r2, #10
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e7f0      	b.n	8000f76 <_puts_r+0x8e>

08000f94 <puts>:
 8000f94:	b510      	push	{r4, lr}
 8000f96:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <puts+0x10>)
 8000f98:	0001      	movs	r1, r0
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	f7ff ffa4 	bl	8000ee8 <_puts_r>
 8000fa0:	bd10      	pop	{r4, pc}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	2000000c 	.word	0x2000000c

08000fa8 <__sread>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	000c      	movs	r4, r1
 8000fac:	250e      	movs	r5, #14
 8000fae:	5f49      	ldrsh	r1, [r1, r5]
 8000fb0:	f000 f914 	bl	80011dc <_read_r>
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	db03      	blt.n	8000fc0 <__sread+0x18>
 8000fb8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000fba:	181b      	adds	r3, r3, r0
 8000fbc:	6563      	str	r3, [r4, #84]	@ 0x54
 8000fbe:	bd70      	pop	{r4, r5, r6, pc}
 8000fc0:	89a3      	ldrh	r3, [r4, #12]
 8000fc2:	4a02      	ldr	r2, [pc, #8]	@ (8000fcc <__sread+0x24>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	81a3      	strh	r3, [r4, #12]
 8000fc8:	e7f9      	b.n	8000fbe <__sread+0x16>
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	ffffefff 	.word	0xffffefff

08000fd0 <__swrite>:
 8000fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd2:	001f      	movs	r7, r3
 8000fd4:	898b      	ldrh	r3, [r1, #12]
 8000fd6:	0005      	movs	r5, r0
 8000fd8:	000c      	movs	r4, r1
 8000fda:	0016      	movs	r6, r2
 8000fdc:	05db      	lsls	r3, r3, #23
 8000fde:	d505      	bpl.n	8000fec <__swrite+0x1c>
 8000fe0:	230e      	movs	r3, #14
 8000fe2:	5ec9      	ldrsh	r1, [r1, r3]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f000 f8e4 	bl	80011b4 <_lseek_r>
 8000fec:	89a3      	ldrh	r3, [r4, #12]
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <__swrite+0x34>)
 8000ff0:	0028      	movs	r0, r5
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	81a3      	strh	r3, [r4, #12]
 8000ff6:	0032      	movs	r2, r6
 8000ff8:	230e      	movs	r3, #14
 8000ffa:	5ee1      	ldrsh	r1, [r4, r3]
 8000ffc:	003b      	movs	r3, r7
 8000ffe:	f000 f901 	bl	8001204 <_write_r>
 8001002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001004:	ffffefff 	.word	0xffffefff

08001008 <__sseek>:
 8001008:	b570      	push	{r4, r5, r6, lr}
 800100a:	000c      	movs	r4, r1
 800100c:	250e      	movs	r5, #14
 800100e:	5f49      	ldrsh	r1, [r1, r5]
 8001010:	f000 f8d0 	bl	80011b4 <_lseek_r>
 8001014:	89a3      	ldrh	r3, [r4, #12]
 8001016:	1c42      	adds	r2, r0, #1
 8001018:	d103      	bne.n	8001022 <__sseek+0x1a>
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <__sseek+0x28>)
 800101c:	4013      	ands	r3, r2
 800101e:	81a3      	strh	r3, [r4, #12]
 8001020:	bd70      	pop	{r4, r5, r6, pc}
 8001022:	2280      	movs	r2, #128	@ 0x80
 8001024:	0152      	lsls	r2, r2, #5
 8001026:	4313      	orrs	r3, r2
 8001028:	81a3      	strh	r3, [r4, #12]
 800102a:	6560      	str	r0, [r4, #84]	@ 0x54
 800102c:	e7f8      	b.n	8001020 <__sseek+0x18>
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	ffffefff 	.word	0xffffefff

08001034 <__sclose>:
 8001034:	b510      	push	{r4, lr}
 8001036:	230e      	movs	r3, #14
 8001038:	5ec9      	ldrsh	r1, [r1, r3]
 800103a:	f000 f8a9 	bl	8001190 <_close_r>
 800103e:	bd10      	pop	{r4, pc}

08001040 <__swbuf_r>:
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001042:	0006      	movs	r6, r0
 8001044:	000d      	movs	r5, r1
 8001046:	0014      	movs	r4, r2
 8001048:	2800      	cmp	r0, #0
 800104a:	d004      	beq.n	8001056 <__swbuf_r+0x16>
 800104c:	6a03      	ldr	r3, [r0, #32]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <__swbuf_r+0x16>
 8001052:	f7ff ff05 	bl	8000e60 <__sinit>
 8001056:	69a3      	ldr	r3, [r4, #24]
 8001058:	60a3      	str	r3, [r4, #8]
 800105a:	89a3      	ldrh	r3, [r4, #12]
 800105c:	071b      	lsls	r3, r3, #28
 800105e:	d502      	bpl.n	8001066 <__swbuf_r+0x26>
 8001060:	6923      	ldr	r3, [r4, #16]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d109      	bne.n	800107a <__swbuf_r+0x3a>
 8001066:	0021      	movs	r1, r4
 8001068:	0030      	movs	r0, r6
 800106a:	f000 f82b 	bl	80010c4 <__swsetup_r>
 800106e:	2800      	cmp	r0, #0
 8001070:	d003      	beq.n	800107a <__swbuf_r+0x3a>
 8001072:	2501      	movs	r5, #1
 8001074:	426d      	negs	r5, r5
 8001076:	0028      	movs	r0, r5
 8001078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800107a:	6923      	ldr	r3, [r4, #16]
 800107c:	6820      	ldr	r0, [r4, #0]
 800107e:	b2ef      	uxtb	r7, r5
 8001080:	1ac0      	subs	r0, r0, r3
 8001082:	6963      	ldr	r3, [r4, #20]
 8001084:	b2ed      	uxtb	r5, r5
 8001086:	4283      	cmp	r3, r0
 8001088:	dc05      	bgt.n	8001096 <__swbuf_r+0x56>
 800108a:	0021      	movs	r1, r4
 800108c:	0030      	movs	r0, r6
 800108e:	f000 fd3f 	bl	8001b10 <_fflush_r>
 8001092:	2800      	cmp	r0, #0
 8001094:	d1ed      	bne.n	8001072 <__swbuf_r+0x32>
 8001096:	68a3      	ldr	r3, [r4, #8]
 8001098:	3001      	adds	r0, #1
 800109a:	3b01      	subs	r3, #1
 800109c:	60a3      	str	r3, [r4, #8]
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	6022      	str	r2, [r4, #0]
 80010a4:	701f      	strb	r7, [r3, #0]
 80010a6:	6963      	ldr	r3, [r4, #20]
 80010a8:	4283      	cmp	r3, r0
 80010aa:	d004      	beq.n	80010b6 <__swbuf_r+0x76>
 80010ac:	89a3      	ldrh	r3, [r4, #12]
 80010ae:	07db      	lsls	r3, r3, #31
 80010b0:	d5e1      	bpl.n	8001076 <__swbuf_r+0x36>
 80010b2:	2d0a      	cmp	r5, #10
 80010b4:	d1df      	bne.n	8001076 <__swbuf_r+0x36>
 80010b6:	0021      	movs	r1, r4
 80010b8:	0030      	movs	r0, r6
 80010ba:	f000 fd29 	bl	8001b10 <_fflush_r>
 80010be:	2800      	cmp	r0, #0
 80010c0:	d0d9      	beq.n	8001076 <__swbuf_r+0x36>
 80010c2:	e7d6      	b.n	8001072 <__swbuf_r+0x32>

080010c4 <__swsetup_r>:
 80010c4:	4b2d      	ldr	r3, [pc, #180]	@ (800117c <__swsetup_r+0xb8>)
 80010c6:	b570      	push	{r4, r5, r6, lr}
 80010c8:	0005      	movs	r5, r0
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	000c      	movs	r4, r1
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d004      	beq.n	80010dc <__swsetup_r+0x18>
 80010d2:	6a03      	ldr	r3, [r0, #32]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <__swsetup_r+0x18>
 80010d8:	f7ff fec2 	bl	8000e60 <__sinit>
 80010dc:	230c      	movs	r3, #12
 80010de:	5ee2      	ldrsh	r2, [r4, r3]
 80010e0:	0713      	lsls	r3, r2, #28
 80010e2:	d423      	bmi.n	800112c <__swsetup_r+0x68>
 80010e4:	06d3      	lsls	r3, r2, #27
 80010e6:	d407      	bmi.n	80010f8 <__swsetup_r+0x34>
 80010e8:	2309      	movs	r3, #9
 80010ea:	602b      	str	r3, [r5, #0]
 80010ec:	2340      	movs	r3, #64	@ 0x40
 80010ee:	2001      	movs	r0, #1
 80010f0:	4313      	orrs	r3, r2
 80010f2:	81a3      	strh	r3, [r4, #12]
 80010f4:	4240      	negs	r0, r0
 80010f6:	e03a      	b.n	800116e <__swsetup_r+0xaa>
 80010f8:	0752      	lsls	r2, r2, #29
 80010fa:	d513      	bpl.n	8001124 <__swsetup_r+0x60>
 80010fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010fe:	2900      	cmp	r1, #0
 8001100:	d008      	beq.n	8001114 <__swsetup_r+0x50>
 8001102:	0023      	movs	r3, r4
 8001104:	3344      	adds	r3, #68	@ 0x44
 8001106:	4299      	cmp	r1, r3
 8001108:	d002      	beq.n	8001110 <__swsetup_r+0x4c>
 800110a:	0028      	movs	r0, r5
 800110c:	f000 f8bc 	bl	8001288 <_free_r>
 8001110:	2300      	movs	r3, #0
 8001112:	6363      	str	r3, [r4, #52]	@ 0x34
 8001114:	2224      	movs	r2, #36	@ 0x24
 8001116:	89a3      	ldrh	r3, [r4, #12]
 8001118:	4393      	bics	r3, r2
 800111a:	81a3      	strh	r3, [r4, #12]
 800111c:	2300      	movs	r3, #0
 800111e:	6063      	str	r3, [r4, #4]
 8001120:	6923      	ldr	r3, [r4, #16]
 8001122:	6023      	str	r3, [r4, #0]
 8001124:	2308      	movs	r3, #8
 8001126:	89a2      	ldrh	r2, [r4, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	81a3      	strh	r3, [r4, #12]
 800112c:	6923      	ldr	r3, [r4, #16]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10b      	bne.n	800114a <__swsetup_r+0x86>
 8001132:	21a0      	movs	r1, #160	@ 0xa0
 8001134:	2280      	movs	r2, #128	@ 0x80
 8001136:	89a3      	ldrh	r3, [r4, #12]
 8001138:	0089      	lsls	r1, r1, #2
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	400b      	ands	r3, r1
 800113e:	4293      	cmp	r3, r2
 8001140:	d003      	beq.n	800114a <__swsetup_r+0x86>
 8001142:	0021      	movs	r1, r4
 8001144:	0028      	movs	r0, r5
 8001146:	f000 fd39 	bl	8001bbc <__smakebuf_r>
 800114a:	230c      	movs	r3, #12
 800114c:	5ee2      	ldrsh	r2, [r4, r3]
 800114e:	2101      	movs	r1, #1
 8001150:	0013      	movs	r3, r2
 8001152:	400b      	ands	r3, r1
 8001154:	420a      	tst	r2, r1
 8001156:	d00b      	beq.n	8001170 <__swsetup_r+0xac>
 8001158:	2300      	movs	r3, #0
 800115a:	60a3      	str	r3, [r4, #8]
 800115c:	6963      	ldr	r3, [r4, #20]
 800115e:	425b      	negs	r3, r3
 8001160:	61a3      	str	r3, [r4, #24]
 8001162:	2000      	movs	r0, #0
 8001164:	6923      	ldr	r3, [r4, #16]
 8001166:	4283      	cmp	r3, r0
 8001168:	d101      	bne.n	800116e <__swsetup_r+0xaa>
 800116a:	0613      	lsls	r3, r2, #24
 800116c:	d4be      	bmi.n	80010ec <__swsetup_r+0x28>
 800116e:	bd70      	pop	{r4, r5, r6, pc}
 8001170:	0791      	lsls	r1, r2, #30
 8001172:	d400      	bmi.n	8001176 <__swsetup_r+0xb2>
 8001174:	6963      	ldr	r3, [r4, #20]
 8001176:	60a3      	str	r3, [r4, #8]
 8001178:	e7f3      	b.n	8001162 <__swsetup_r+0x9e>
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	2000000c 	.word	0x2000000c

08001180 <memset>:
 8001180:	0003      	movs	r3, r0
 8001182:	1882      	adds	r2, r0, r2
 8001184:	4293      	cmp	r3, r2
 8001186:	d100      	bne.n	800118a <memset+0xa>
 8001188:	4770      	bx	lr
 800118a:	7019      	strb	r1, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	e7f9      	b.n	8001184 <memset+0x4>

08001190 <_close_r>:
 8001190:	2300      	movs	r3, #0
 8001192:	b570      	push	{r4, r5, r6, lr}
 8001194:	4d06      	ldr	r5, [pc, #24]	@ (80011b0 <_close_r+0x20>)
 8001196:	0004      	movs	r4, r0
 8001198:	0008      	movs	r0, r1
 800119a:	602b      	str	r3, [r5, #0]
 800119c:	f7ff f96d 	bl	800047a <_close>
 80011a0:	1c43      	adds	r3, r0, #1
 80011a2:	d103      	bne.n	80011ac <_close_r+0x1c>
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d000      	beq.n	80011ac <_close_r+0x1c>
 80011aa:	6023      	str	r3, [r4, #0]
 80011ac:	bd70      	pop	{r4, r5, r6, pc}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	200001b8 	.word	0x200001b8

080011b4 <_lseek_r>:
 80011b4:	b570      	push	{r4, r5, r6, lr}
 80011b6:	0004      	movs	r4, r0
 80011b8:	0008      	movs	r0, r1
 80011ba:	0011      	movs	r1, r2
 80011bc:	001a      	movs	r2, r3
 80011be:	2300      	movs	r3, #0
 80011c0:	4d05      	ldr	r5, [pc, #20]	@ (80011d8 <_lseek_r+0x24>)
 80011c2:	602b      	str	r3, [r5, #0]
 80011c4:	f7ff f97a 	bl	80004bc <_lseek>
 80011c8:	1c43      	adds	r3, r0, #1
 80011ca:	d103      	bne.n	80011d4 <_lseek_r+0x20>
 80011cc:	682b      	ldr	r3, [r5, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d000      	beq.n	80011d4 <_lseek_r+0x20>
 80011d2:	6023      	str	r3, [r4, #0]
 80011d4:	bd70      	pop	{r4, r5, r6, pc}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	200001b8 	.word	0x200001b8

080011dc <_read_r>:
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	0004      	movs	r4, r0
 80011e0:	0008      	movs	r0, r1
 80011e2:	0011      	movs	r1, r2
 80011e4:	001a      	movs	r2, r3
 80011e6:	2300      	movs	r3, #0
 80011e8:	4d05      	ldr	r5, [pc, #20]	@ (8001200 <_read_r+0x24>)
 80011ea:	602b      	str	r3, [r5, #0]
 80011ec:	f7ff f90c 	bl	8000408 <_read>
 80011f0:	1c43      	adds	r3, r0, #1
 80011f2:	d103      	bne.n	80011fc <_read_r+0x20>
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d000      	beq.n	80011fc <_read_r+0x20>
 80011fa:	6023      	str	r3, [r4, #0]
 80011fc:	bd70      	pop	{r4, r5, r6, pc}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	200001b8 	.word	0x200001b8

08001204 <_write_r>:
 8001204:	b570      	push	{r4, r5, r6, lr}
 8001206:	0004      	movs	r4, r0
 8001208:	0008      	movs	r0, r1
 800120a:	0011      	movs	r1, r2
 800120c:	001a      	movs	r2, r3
 800120e:	2300      	movs	r3, #0
 8001210:	4d05      	ldr	r5, [pc, #20]	@ (8001228 <_write_r+0x24>)
 8001212:	602b      	str	r3, [r5, #0]
 8001214:	f7ff f915 	bl	8000442 <_write>
 8001218:	1c43      	adds	r3, r0, #1
 800121a:	d103      	bne.n	8001224 <_write_r+0x20>
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d000      	beq.n	8001224 <_write_r+0x20>
 8001222:	6023      	str	r3, [r4, #0]
 8001224:	bd70      	pop	{r4, r5, r6, pc}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	200001b8 	.word	0x200001b8

0800122c <__errno>:
 800122c:	4b01      	ldr	r3, [pc, #4]	@ (8001234 <__errno+0x8>)
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	4770      	bx	lr
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	2000000c 	.word	0x2000000c

08001238 <__libc_init_array>:
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	2600      	movs	r6, #0
 800123c:	4c0c      	ldr	r4, [pc, #48]	@ (8001270 <__libc_init_array+0x38>)
 800123e:	4d0d      	ldr	r5, [pc, #52]	@ (8001274 <__libc_init_array+0x3c>)
 8001240:	1b64      	subs	r4, r4, r5
 8001242:	10a4      	asrs	r4, r4, #2
 8001244:	42a6      	cmp	r6, r4
 8001246:	d109      	bne.n	800125c <__libc_init_array+0x24>
 8001248:	2600      	movs	r6, #0
 800124a:	f000 fd3b 	bl	8001cc4 <_init>
 800124e:	4c0a      	ldr	r4, [pc, #40]	@ (8001278 <__libc_init_array+0x40>)
 8001250:	4d0a      	ldr	r5, [pc, #40]	@ (800127c <__libc_init_array+0x44>)
 8001252:	1b64      	subs	r4, r4, r5
 8001254:	10a4      	asrs	r4, r4, #2
 8001256:	42a6      	cmp	r6, r4
 8001258:	d105      	bne.n	8001266 <__libc_init_array+0x2e>
 800125a:	bd70      	pop	{r4, r5, r6, pc}
 800125c:	00b3      	lsls	r3, r6, #2
 800125e:	58eb      	ldr	r3, [r5, r3]
 8001260:	4798      	blx	r3
 8001262:	3601      	adds	r6, #1
 8001264:	e7ee      	b.n	8001244 <__libc_init_array+0xc>
 8001266:	00b3      	lsls	r3, r6, #2
 8001268:	58eb      	ldr	r3, [r5, r3]
 800126a:	4798      	blx	r3
 800126c:	3601      	adds	r6, #1
 800126e:	e7f2      	b.n	8001256 <__libc_init_array+0x1e>
 8001270:	08001d58 	.word	0x08001d58
 8001274:	08001d58 	.word	0x08001d58
 8001278:	08001d5c 	.word	0x08001d5c
 800127c:	08001d58 	.word	0x08001d58

08001280 <__retarget_lock_init_recursive>:
 8001280:	4770      	bx	lr

08001282 <__retarget_lock_acquire_recursive>:
 8001282:	4770      	bx	lr

08001284 <__retarget_lock_release_recursive>:
 8001284:	4770      	bx	lr
	...

08001288 <_free_r>:
 8001288:	b570      	push	{r4, r5, r6, lr}
 800128a:	0005      	movs	r5, r0
 800128c:	1e0c      	subs	r4, r1, #0
 800128e:	d010      	beq.n	80012b2 <_free_r+0x2a>
 8001290:	3c04      	subs	r4, #4
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	da00      	bge.n	800129a <_free_r+0x12>
 8001298:	18e4      	adds	r4, r4, r3
 800129a:	0028      	movs	r0, r5
 800129c:	f000 f8e0 	bl	8001460 <__malloc_lock>
 80012a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001318 <_free_r+0x90>)
 80012a2:	6813      	ldr	r3, [r2, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <_free_r+0x2c>
 80012a8:	6063      	str	r3, [r4, #4]
 80012aa:	6014      	str	r4, [r2, #0]
 80012ac:	0028      	movs	r0, r5
 80012ae:	f000 f8df 	bl	8001470 <__malloc_unlock>
 80012b2:	bd70      	pop	{r4, r5, r6, pc}
 80012b4:	42a3      	cmp	r3, r4
 80012b6:	d908      	bls.n	80012ca <_free_r+0x42>
 80012b8:	6820      	ldr	r0, [r4, #0]
 80012ba:	1821      	adds	r1, r4, r0
 80012bc:	428b      	cmp	r3, r1
 80012be:	d1f3      	bne.n	80012a8 <_free_r+0x20>
 80012c0:	6819      	ldr	r1, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	1809      	adds	r1, r1, r0
 80012c6:	6021      	str	r1, [r4, #0]
 80012c8:	e7ee      	b.n	80012a8 <_free_r+0x20>
 80012ca:	001a      	movs	r2, r3
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <_free_r+0x4e>
 80012d2:	42a3      	cmp	r3, r4
 80012d4:	d9f9      	bls.n	80012ca <_free_r+0x42>
 80012d6:	6811      	ldr	r1, [r2, #0]
 80012d8:	1850      	adds	r0, r2, r1
 80012da:	42a0      	cmp	r0, r4
 80012dc:	d10b      	bne.n	80012f6 <_free_r+0x6e>
 80012de:	6820      	ldr	r0, [r4, #0]
 80012e0:	1809      	adds	r1, r1, r0
 80012e2:	1850      	adds	r0, r2, r1
 80012e4:	6011      	str	r1, [r2, #0]
 80012e6:	4283      	cmp	r3, r0
 80012e8:	d1e0      	bne.n	80012ac <_free_r+0x24>
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	1841      	adds	r1, r0, r1
 80012f0:	6011      	str	r1, [r2, #0]
 80012f2:	6053      	str	r3, [r2, #4]
 80012f4:	e7da      	b.n	80012ac <_free_r+0x24>
 80012f6:	42a0      	cmp	r0, r4
 80012f8:	d902      	bls.n	8001300 <_free_r+0x78>
 80012fa:	230c      	movs	r3, #12
 80012fc:	602b      	str	r3, [r5, #0]
 80012fe:	e7d5      	b.n	80012ac <_free_r+0x24>
 8001300:	6820      	ldr	r0, [r4, #0]
 8001302:	1821      	adds	r1, r4, r0
 8001304:	428b      	cmp	r3, r1
 8001306:	d103      	bne.n	8001310 <_free_r+0x88>
 8001308:	6819      	ldr	r1, [r3, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	1809      	adds	r1, r1, r0
 800130e:	6021      	str	r1, [r4, #0]
 8001310:	6063      	str	r3, [r4, #4]
 8001312:	6054      	str	r4, [r2, #4]
 8001314:	e7ca      	b.n	80012ac <_free_r+0x24>
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	200001c4 	.word	0x200001c4

0800131c <sbrk_aligned>:
 800131c:	b570      	push	{r4, r5, r6, lr}
 800131e:	4e0f      	ldr	r6, [pc, #60]	@ (800135c <sbrk_aligned+0x40>)
 8001320:	000d      	movs	r5, r1
 8001322:	6831      	ldr	r1, [r6, #0]
 8001324:	0004      	movs	r4, r0
 8001326:	2900      	cmp	r1, #0
 8001328:	d102      	bne.n	8001330 <sbrk_aligned+0x14>
 800132a:	f000 fcad 	bl	8001c88 <_sbrk_r>
 800132e:	6030      	str	r0, [r6, #0]
 8001330:	0029      	movs	r1, r5
 8001332:	0020      	movs	r0, r4
 8001334:	f000 fca8 	bl	8001c88 <_sbrk_r>
 8001338:	1c43      	adds	r3, r0, #1
 800133a:	d103      	bne.n	8001344 <sbrk_aligned+0x28>
 800133c:	2501      	movs	r5, #1
 800133e:	426d      	negs	r5, r5
 8001340:	0028      	movs	r0, r5
 8001342:	bd70      	pop	{r4, r5, r6, pc}
 8001344:	2303      	movs	r3, #3
 8001346:	1cc5      	adds	r5, r0, #3
 8001348:	439d      	bics	r5, r3
 800134a:	42a8      	cmp	r0, r5
 800134c:	d0f8      	beq.n	8001340 <sbrk_aligned+0x24>
 800134e:	1a29      	subs	r1, r5, r0
 8001350:	0020      	movs	r0, r4
 8001352:	f000 fc99 	bl	8001c88 <_sbrk_r>
 8001356:	3001      	adds	r0, #1
 8001358:	d1f2      	bne.n	8001340 <sbrk_aligned+0x24>
 800135a:	e7ef      	b.n	800133c <sbrk_aligned+0x20>
 800135c:	200001c0 	.word	0x200001c0

08001360 <_malloc_r>:
 8001360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001362:	2203      	movs	r2, #3
 8001364:	1ccb      	adds	r3, r1, #3
 8001366:	4393      	bics	r3, r2
 8001368:	3308      	adds	r3, #8
 800136a:	0005      	movs	r5, r0
 800136c:	001f      	movs	r7, r3
 800136e:	2b0c      	cmp	r3, #12
 8001370:	d234      	bcs.n	80013dc <_malloc_r+0x7c>
 8001372:	270c      	movs	r7, #12
 8001374:	42b9      	cmp	r1, r7
 8001376:	d833      	bhi.n	80013e0 <_malloc_r+0x80>
 8001378:	0028      	movs	r0, r5
 800137a:	f000 f871 	bl	8001460 <__malloc_lock>
 800137e:	4e37      	ldr	r6, [pc, #220]	@ (800145c <_malloc_r+0xfc>)
 8001380:	6833      	ldr	r3, [r6, #0]
 8001382:	001c      	movs	r4, r3
 8001384:	2c00      	cmp	r4, #0
 8001386:	d12f      	bne.n	80013e8 <_malloc_r+0x88>
 8001388:	0039      	movs	r1, r7
 800138a:	0028      	movs	r0, r5
 800138c:	f7ff ffc6 	bl	800131c <sbrk_aligned>
 8001390:	0004      	movs	r4, r0
 8001392:	1c43      	adds	r3, r0, #1
 8001394:	d15f      	bne.n	8001456 <_malloc_r+0xf6>
 8001396:	6834      	ldr	r4, [r6, #0]
 8001398:	9400      	str	r4, [sp, #0]
 800139a:	9b00      	ldr	r3, [sp, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d14a      	bne.n	8001436 <_malloc_r+0xd6>
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d052      	beq.n	800144a <_malloc_r+0xea>
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	0028      	movs	r0, r5
 80013a8:	18e3      	adds	r3, r4, r3
 80013aa:	9900      	ldr	r1, [sp, #0]
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	f000 fc6b 	bl	8001c88 <_sbrk_r>
 80013b2:	9b01      	ldr	r3, [sp, #4]
 80013b4:	4283      	cmp	r3, r0
 80013b6:	d148      	bne.n	800144a <_malloc_r+0xea>
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	0028      	movs	r0, r5
 80013bc:	1aff      	subs	r7, r7, r3
 80013be:	0039      	movs	r1, r7
 80013c0:	f7ff ffac 	bl	800131c <sbrk_aligned>
 80013c4:	3001      	adds	r0, #1
 80013c6:	d040      	beq.n	800144a <_malloc_r+0xea>
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	19db      	adds	r3, r3, r7
 80013cc:	6023      	str	r3, [r4, #0]
 80013ce:	6833      	ldr	r3, [r6, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d133      	bne.n	800143e <_malloc_r+0xde>
 80013d6:	9b00      	ldr	r3, [sp, #0]
 80013d8:	6033      	str	r3, [r6, #0]
 80013da:	e019      	b.n	8001410 <_malloc_r+0xb0>
 80013dc:	2b00      	cmp	r3, #0
 80013de:	dac9      	bge.n	8001374 <_malloc_r+0x14>
 80013e0:	230c      	movs	r3, #12
 80013e2:	602b      	str	r3, [r5, #0]
 80013e4:	2000      	movs	r0, #0
 80013e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80013e8:	6821      	ldr	r1, [r4, #0]
 80013ea:	1bc9      	subs	r1, r1, r7
 80013ec:	d420      	bmi.n	8001430 <_malloc_r+0xd0>
 80013ee:	290b      	cmp	r1, #11
 80013f0:	d90a      	bls.n	8001408 <_malloc_r+0xa8>
 80013f2:	19e2      	adds	r2, r4, r7
 80013f4:	6027      	str	r7, [r4, #0]
 80013f6:	42a3      	cmp	r3, r4
 80013f8:	d104      	bne.n	8001404 <_malloc_r+0xa4>
 80013fa:	6032      	str	r2, [r6, #0]
 80013fc:	6863      	ldr	r3, [r4, #4]
 80013fe:	6011      	str	r1, [r2, #0]
 8001400:	6053      	str	r3, [r2, #4]
 8001402:	e005      	b.n	8001410 <_malloc_r+0xb0>
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	e7f9      	b.n	80013fc <_malloc_r+0x9c>
 8001408:	6862      	ldr	r2, [r4, #4]
 800140a:	42a3      	cmp	r3, r4
 800140c:	d10e      	bne.n	800142c <_malloc_r+0xcc>
 800140e:	6032      	str	r2, [r6, #0]
 8001410:	0028      	movs	r0, r5
 8001412:	f000 f82d 	bl	8001470 <__malloc_unlock>
 8001416:	0020      	movs	r0, r4
 8001418:	2207      	movs	r2, #7
 800141a:	300b      	adds	r0, #11
 800141c:	1d23      	adds	r3, r4, #4
 800141e:	4390      	bics	r0, r2
 8001420:	1ac2      	subs	r2, r0, r3
 8001422:	4298      	cmp	r0, r3
 8001424:	d0df      	beq.n	80013e6 <_malloc_r+0x86>
 8001426:	1a1b      	subs	r3, r3, r0
 8001428:	50a3      	str	r3, [r4, r2]
 800142a:	e7dc      	b.n	80013e6 <_malloc_r+0x86>
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	e7ef      	b.n	8001410 <_malloc_r+0xb0>
 8001430:	0023      	movs	r3, r4
 8001432:	6864      	ldr	r4, [r4, #4]
 8001434:	e7a6      	b.n	8001384 <_malloc_r+0x24>
 8001436:	9c00      	ldr	r4, [sp, #0]
 8001438:	6863      	ldr	r3, [r4, #4]
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	e7ad      	b.n	800139a <_malloc_r+0x3a>
 800143e:	001a      	movs	r2, r3
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	42a3      	cmp	r3, r4
 8001444:	d1fb      	bne.n	800143e <_malloc_r+0xde>
 8001446:	2300      	movs	r3, #0
 8001448:	e7da      	b.n	8001400 <_malloc_r+0xa0>
 800144a:	230c      	movs	r3, #12
 800144c:	0028      	movs	r0, r5
 800144e:	602b      	str	r3, [r5, #0]
 8001450:	f000 f80e 	bl	8001470 <__malloc_unlock>
 8001454:	e7c6      	b.n	80013e4 <_malloc_r+0x84>
 8001456:	6007      	str	r7, [r0, #0]
 8001458:	e7da      	b.n	8001410 <_malloc_r+0xb0>
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	200001c4 	.word	0x200001c4

08001460 <__malloc_lock>:
 8001460:	b510      	push	{r4, lr}
 8001462:	4802      	ldr	r0, [pc, #8]	@ (800146c <__malloc_lock+0xc>)
 8001464:	f7ff ff0d 	bl	8001282 <__retarget_lock_acquire_recursive>
 8001468:	bd10      	pop	{r4, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	200001bc 	.word	0x200001bc

08001470 <__malloc_unlock>:
 8001470:	b510      	push	{r4, lr}
 8001472:	4802      	ldr	r0, [pc, #8]	@ (800147c <__malloc_unlock+0xc>)
 8001474:	f7ff ff06 	bl	8001284 <__retarget_lock_release_recursive>
 8001478:	bd10      	pop	{r4, pc}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	200001bc 	.word	0x200001bc

08001480 <__sfputc_r>:
 8001480:	6893      	ldr	r3, [r2, #8]
 8001482:	b510      	push	{r4, lr}
 8001484:	3b01      	subs	r3, #1
 8001486:	6093      	str	r3, [r2, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	da04      	bge.n	8001496 <__sfputc_r+0x16>
 800148c:	6994      	ldr	r4, [r2, #24]
 800148e:	42a3      	cmp	r3, r4
 8001490:	db07      	blt.n	80014a2 <__sfputc_r+0x22>
 8001492:	290a      	cmp	r1, #10
 8001494:	d005      	beq.n	80014a2 <__sfputc_r+0x22>
 8001496:	6813      	ldr	r3, [r2, #0]
 8001498:	1c58      	adds	r0, r3, #1
 800149a:	6010      	str	r0, [r2, #0]
 800149c:	7019      	strb	r1, [r3, #0]
 800149e:	0008      	movs	r0, r1
 80014a0:	bd10      	pop	{r4, pc}
 80014a2:	f7ff fdcd 	bl	8001040 <__swbuf_r>
 80014a6:	0001      	movs	r1, r0
 80014a8:	e7f9      	b.n	800149e <__sfputc_r+0x1e>

080014aa <__sfputs_r>:
 80014aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ac:	0006      	movs	r6, r0
 80014ae:	000f      	movs	r7, r1
 80014b0:	0014      	movs	r4, r2
 80014b2:	18d5      	adds	r5, r2, r3
 80014b4:	42ac      	cmp	r4, r5
 80014b6:	d101      	bne.n	80014bc <__sfputs_r+0x12>
 80014b8:	2000      	movs	r0, #0
 80014ba:	e007      	b.n	80014cc <__sfputs_r+0x22>
 80014bc:	7821      	ldrb	r1, [r4, #0]
 80014be:	003a      	movs	r2, r7
 80014c0:	0030      	movs	r0, r6
 80014c2:	f7ff ffdd 	bl	8001480 <__sfputc_r>
 80014c6:	3401      	adds	r4, #1
 80014c8:	1c43      	adds	r3, r0, #1
 80014ca:	d1f3      	bne.n	80014b4 <__sfputs_r+0xa>
 80014cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080014d0 <_vfiprintf_r>:
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	b0a1      	sub	sp, #132	@ 0x84
 80014d4:	000f      	movs	r7, r1
 80014d6:	0015      	movs	r5, r2
 80014d8:	001e      	movs	r6, r3
 80014da:	9003      	str	r0, [sp, #12]
 80014dc:	2800      	cmp	r0, #0
 80014de:	d004      	beq.n	80014ea <_vfiprintf_r+0x1a>
 80014e0:	6a03      	ldr	r3, [r0, #32]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <_vfiprintf_r+0x1a>
 80014e6:	f7ff fcbb 	bl	8000e60 <__sinit>
 80014ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014ec:	07db      	lsls	r3, r3, #31
 80014ee:	d405      	bmi.n	80014fc <_vfiprintf_r+0x2c>
 80014f0:	89bb      	ldrh	r3, [r7, #12]
 80014f2:	059b      	lsls	r3, r3, #22
 80014f4:	d402      	bmi.n	80014fc <_vfiprintf_r+0x2c>
 80014f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80014f8:	f7ff fec3 	bl	8001282 <__retarget_lock_acquire_recursive>
 80014fc:	89bb      	ldrh	r3, [r7, #12]
 80014fe:	071b      	lsls	r3, r3, #28
 8001500:	d502      	bpl.n	8001508 <_vfiprintf_r+0x38>
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d113      	bne.n	8001530 <_vfiprintf_r+0x60>
 8001508:	0039      	movs	r1, r7
 800150a:	9803      	ldr	r0, [sp, #12]
 800150c:	f7ff fdda 	bl	80010c4 <__swsetup_r>
 8001510:	2800      	cmp	r0, #0
 8001512:	d00d      	beq.n	8001530 <_vfiprintf_r+0x60>
 8001514:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001516:	07db      	lsls	r3, r3, #31
 8001518:	d503      	bpl.n	8001522 <_vfiprintf_r+0x52>
 800151a:	2001      	movs	r0, #1
 800151c:	4240      	negs	r0, r0
 800151e:	b021      	add	sp, #132	@ 0x84
 8001520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001522:	89bb      	ldrh	r3, [r7, #12]
 8001524:	059b      	lsls	r3, r3, #22
 8001526:	d4f8      	bmi.n	800151a <_vfiprintf_r+0x4a>
 8001528:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800152a:	f7ff feab 	bl	8001284 <__retarget_lock_release_recursive>
 800152e:	e7f4      	b.n	800151a <_vfiprintf_r+0x4a>
 8001530:	2300      	movs	r3, #0
 8001532:	ac08      	add	r4, sp, #32
 8001534:	6163      	str	r3, [r4, #20]
 8001536:	3320      	adds	r3, #32
 8001538:	7663      	strb	r3, [r4, #25]
 800153a:	3310      	adds	r3, #16
 800153c:	76a3      	strb	r3, [r4, #26]
 800153e:	9607      	str	r6, [sp, #28]
 8001540:	002e      	movs	r6, r5
 8001542:	7833      	ldrb	r3, [r6, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <_vfiprintf_r+0x7c>
 8001548:	2b25      	cmp	r3, #37	@ 0x25
 800154a:	d148      	bne.n	80015de <_vfiprintf_r+0x10e>
 800154c:	1b73      	subs	r3, r6, r5
 800154e:	9305      	str	r3, [sp, #20]
 8001550:	42ae      	cmp	r6, r5
 8001552:	d00b      	beq.n	800156c <_vfiprintf_r+0x9c>
 8001554:	002a      	movs	r2, r5
 8001556:	0039      	movs	r1, r7
 8001558:	9803      	ldr	r0, [sp, #12]
 800155a:	f7ff ffa6 	bl	80014aa <__sfputs_r>
 800155e:	3001      	adds	r0, #1
 8001560:	d100      	bne.n	8001564 <_vfiprintf_r+0x94>
 8001562:	e0ae      	b.n	80016c2 <_vfiprintf_r+0x1f2>
 8001564:	6963      	ldr	r3, [r4, #20]
 8001566:	9a05      	ldr	r2, [sp, #20]
 8001568:	189b      	adds	r3, r3, r2
 800156a:	6163      	str	r3, [r4, #20]
 800156c:	7833      	ldrb	r3, [r6, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d100      	bne.n	8001574 <_vfiprintf_r+0xa4>
 8001572:	e0a6      	b.n	80016c2 <_vfiprintf_r+0x1f2>
 8001574:	2201      	movs	r2, #1
 8001576:	2300      	movs	r3, #0
 8001578:	4252      	negs	r2, r2
 800157a:	6062      	str	r2, [r4, #4]
 800157c:	a904      	add	r1, sp, #16
 800157e:	3254      	adds	r2, #84	@ 0x54
 8001580:	1852      	adds	r2, r2, r1
 8001582:	1c75      	adds	r5, r6, #1
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	60e3      	str	r3, [r4, #12]
 8001588:	60a3      	str	r3, [r4, #8]
 800158a:	7013      	strb	r3, [r2, #0]
 800158c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800158e:	4b59      	ldr	r3, [pc, #356]	@ (80016f4 <_vfiprintf_r+0x224>)
 8001590:	2205      	movs	r2, #5
 8001592:	0018      	movs	r0, r3
 8001594:	7829      	ldrb	r1, [r5, #0]
 8001596:	9305      	str	r3, [sp, #20]
 8001598:	f000 fb88 	bl	8001cac <memchr>
 800159c:	1c6e      	adds	r6, r5, #1
 800159e:	2800      	cmp	r0, #0
 80015a0:	d11f      	bne.n	80015e2 <_vfiprintf_r+0x112>
 80015a2:	6822      	ldr	r2, [r4, #0]
 80015a4:	06d3      	lsls	r3, r2, #27
 80015a6:	d504      	bpl.n	80015b2 <_vfiprintf_r+0xe2>
 80015a8:	2353      	movs	r3, #83	@ 0x53
 80015aa:	a904      	add	r1, sp, #16
 80015ac:	185b      	adds	r3, r3, r1
 80015ae:	2120      	movs	r1, #32
 80015b0:	7019      	strb	r1, [r3, #0]
 80015b2:	0713      	lsls	r3, r2, #28
 80015b4:	d504      	bpl.n	80015c0 <_vfiprintf_r+0xf0>
 80015b6:	2353      	movs	r3, #83	@ 0x53
 80015b8:	a904      	add	r1, sp, #16
 80015ba:	185b      	adds	r3, r3, r1
 80015bc:	212b      	movs	r1, #43	@ 0x2b
 80015be:	7019      	strb	r1, [r3, #0]
 80015c0:	782b      	ldrb	r3, [r5, #0]
 80015c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80015c4:	d016      	beq.n	80015f4 <_vfiprintf_r+0x124>
 80015c6:	002e      	movs	r6, r5
 80015c8:	2100      	movs	r1, #0
 80015ca:	200a      	movs	r0, #10
 80015cc:	68e3      	ldr	r3, [r4, #12]
 80015ce:	7832      	ldrb	r2, [r6, #0]
 80015d0:	1c75      	adds	r5, r6, #1
 80015d2:	3a30      	subs	r2, #48	@ 0x30
 80015d4:	2a09      	cmp	r2, #9
 80015d6:	d950      	bls.n	800167a <_vfiprintf_r+0x1aa>
 80015d8:	2900      	cmp	r1, #0
 80015da:	d111      	bne.n	8001600 <_vfiprintf_r+0x130>
 80015dc:	e017      	b.n	800160e <_vfiprintf_r+0x13e>
 80015de:	3601      	adds	r6, #1
 80015e0:	e7af      	b.n	8001542 <_vfiprintf_r+0x72>
 80015e2:	9b05      	ldr	r3, [sp, #20]
 80015e4:	6822      	ldr	r2, [r4, #0]
 80015e6:	1ac0      	subs	r0, r0, r3
 80015e8:	2301      	movs	r3, #1
 80015ea:	4083      	lsls	r3, r0
 80015ec:	4313      	orrs	r3, r2
 80015ee:	0035      	movs	r5, r6
 80015f0:	6023      	str	r3, [r4, #0]
 80015f2:	e7cc      	b.n	800158e <_vfiprintf_r+0xbe>
 80015f4:	9b07      	ldr	r3, [sp, #28]
 80015f6:	1d19      	adds	r1, r3, #4
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	9107      	str	r1, [sp, #28]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db01      	blt.n	8001604 <_vfiprintf_r+0x134>
 8001600:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001602:	e004      	b.n	800160e <_vfiprintf_r+0x13e>
 8001604:	425b      	negs	r3, r3
 8001606:	60e3      	str	r3, [r4, #12]
 8001608:	2302      	movs	r3, #2
 800160a:	4313      	orrs	r3, r2
 800160c:	6023      	str	r3, [r4, #0]
 800160e:	7833      	ldrb	r3, [r6, #0]
 8001610:	2b2e      	cmp	r3, #46	@ 0x2e
 8001612:	d10c      	bne.n	800162e <_vfiprintf_r+0x15e>
 8001614:	7873      	ldrb	r3, [r6, #1]
 8001616:	2b2a      	cmp	r3, #42	@ 0x2a
 8001618:	d134      	bne.n	8001684 <_vfiprintf_r+0x1b4>
 800161a:	9b07      	ldr	r3, [sp, #28]
 800161c:	3602      	adds	r6, #2
 800161e:	1d1a      	adds	r2, r3, #4
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	9207      	str	r2, [sp, #28]
 8001624:	2b00      	cmp	r3, #0
 8001626:	da01      	bge.n	800162c <_vfiprintf_r+0x15c>
 8001628:	2301      	movs	r3, #1
 800162a:	425b      	negs	r3, r3
 800162c:	9309      	str	r3, [sp, #36]	@ 0x24
 800162e:	4d32      	ldr	r5, [pc, #200]	@ (80016f8 <_vfiprintf_r+0x228>)
 8001630:	2203      	movs	r2, #3
 8001632:	0028      	movs	r0, r5
 8001634:	7831      	ldrb	r1, [r6, #0]
 8001636:	f000 fb39 	bl	8001cac <memchr>
 800163a:	2800      	cmp	r0, #0
 800163c:	d006      	beq.n	800164c <_vfiprintf_r+0x17c>
 800163e:	2340      	movs	r3, #64	@ 0x40
 8001640:	1b40      	subs	r0, r0, r5
 8001642:	4083      	lsls	r3, r0
 8001644:	6822      	ldr	r2, [r4, #0]
 8001646:	3601      	adds	r6, #1
 8001648:	4313      	orrs	r3, r2
 800164a:	6023      	str	r3, [r4, #0]
 800164c:	7831      	ldrb	r1, [r6, #0]
 800164e:	2206      	movs	r2, #6
 8001650:	482a      	ldr	r0, [pc, #168]	@ (80016fc <_vfiprintf_r+0x22c>)
 8001652:	1c75      	adds	r5, r6, #1
 8001654:	7621      	strb	r1, [r4, #24]
 8001656:	f000 fb29 	bl	8001cac <memchr>
 800165a:	2800      	cmp	r0, #0
 800165c:	d040      	beq.n	80016e0 <_vfiprintf_r+0x210>
 800165e:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <_vfiprintf_r+0x230>)
 8001660:	2b00      	cmp	r3, #0
 8001662:	d122      	bne.n	80016aa <_vfiprintf_r+0x1da>
 8001664:	2207      	movs	r2, #7
 8001666:	9b07      	ldr	r3, [sp, #28]
 8001668:	3307      	adds	r3, #7
 800166a:	4393      	bics	r3, r2
 800166c:	3308      	adds	r3, #8
 800166e:	9307      	str	r3, [sp, #28]
 8001670:	6963      	ldr	r3, [r4, #20]
 8001672:	9a04      	ldr	r2, [sp, #16]
 8001674:	189b      	adds	r3, r3, r2
 8001676:	6163      	str	r3, [r4, #20]
 8001678:	e762      	b.n	8001540 <_vfiprintf_r+0x70>
 800167a:	4343      	muls	r3, r0
 800167c:	002e      	movs	r6, r5
 800167e:	2101      	movs	r1, #1
 8001680:	189b      	adds	r3, r3, r2
 8001682:	e7a4      	b.n	80015ce <_vfiprintf_r+0xfe>
 8001684:	2300      	movs	r3, #0
 8001686:	200a      	movs	r0, #10
 8001688:	0019      	movs	r1, r3
 800168a:	3601      	adds	r6, #1
 800168c:	6063      	str	r3, [r4, #4]
 800168e:	7832      	ldrb	r2, [r6, #0]
 8001690:	1c75      	adds	r5, r6, #1
 8001692:	3a30      	subs	r2, #48	@ 0x30
 8001694:	2a09      	cmp	r2, #9
 8001696:	d903      	bls.n	80016a0 <_vfiprintf_r+0x1d0>
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0c8      	beq.n	800162e <_vfiprintf_r+0x15e>
 800169c:	9109      	str	r1, [sp, #36]	@ 0x24
 800169e:	e7c6      	b.n	800162e <_vfiprintf_r+0x15e>
 80016a0:	4341      	muls	r1, r0
 80016a2:	002e      	movs	r6, r5
 80016a4:	2301      	movs	r3, #1
 80016a6:	1889      	adds	r1, r1, r2
 80016a8:	e7f1      	b.n	800168e <_vfiprintf_r+0x1be>
 80016aa:	aa07      	add	r2, sp, #28
 80016ac:	9200      	str	r2, [sp, #0]
 80016ae:	0021      	movs	r1, r4
 80016b0:	003a      	movs	r2, r7
 80016b2:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <_vfiprintf_r+0x234>)
 80016b4:	9803      	ldr	r0, [sp, #12]
 80016b6:	e000      	b.n	80016ba <_vfiprintf_r+0x1ea>
 80016b8:	bf00      	nop
 80016ba:	9004      	str	r0, [sp, #16]
 80016bc:	9b04      	ldr	r3, [sp, #16]
 80016be:	3301      	adds	r3, #1
 80016c0:	d1d6      	bne.n	8001670 <_vfiprintf_r+0x1a0>
 80016c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016c4:	07db      	lsls	r3, r3, #31
 80016c6:	d405      	bmi.n	80016d4 <_vfiprintf_r+0x204>
 80016c8:	89bb      	ldrh	r3, [r7, #12]
 80016ca:	059b      	lsls	r3, r3, #22
 80016cc:	d402      	bmi.n	80016d4 <_vfiprintf_r+0x204>
 80016ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80016d0:	f7ff fdd8 	bl	8001284 <__retarget_lock_release_recursive>
 80016d4:	89bb      	ldrh	r3, [r7, #12]
 80016d6:	065b      	lsls	r3, r3, #25
 80016d8:	d500      	bpl.n	80016dc <_vfiprintf_r+0x20c>
 80016da:	e71e      	b.n	800151a <_vfiprintf_r+0x4a>
 80016dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80016de:	e71e      	b.n	800151e <_vfiprintf_r+0x4e>
 80016e0:	aa07      	add	r2, sp, #28
 80016e2:	9200      	str	r2, [sp, #0]
 80016e4:	0021      	movs	r1, r4
 80016e6:	003a      	movs	r2, r7
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <_vfiprintf_r+0x234>)
 80016ea:	9803      	ldr	r0, [sp, #12]
 80016ec:	f000 f87c 	bl	80017e8 <_printf_i>
 80016f0:	e7e3      	b.n	80016ba <_vfiprintf_r+0x1ea>
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	08001d23 	.word	0x08001d23
 80016f8:	08001d29 	.word	0x08001d29
 80016fc:	08001d2d 	.word	0x08001d2d
 8001700:	00000000 	.word	0x00000000
 8001704:	080014ab 	.word	0x080014ab

08001708 <_printf_common>:
 8001708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800170a:	0016      	movs	r6, r2
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	688a      	ldr	r2, [r1, #8]
 8001710:	690b      	ldr	r3, [r1, #16]
 8001712:	000c      	movs	r4, r1
 8001714:	9000      	str	r0, [sp, #0]
 8001716:	4293      	cmp	r3, r2
 8001718:	da00      	bge.n	800171c <_printf_common+0x14>
 800171a:	0013      	movs	r3, r2
 800171c:	0022      	movs	r2, r4
 800171e:	6033      	str	r3, [r6, #0]
 8001720:	3243      	adds	r2, #67	@ 0x43
 8001722:	7812      	ldrb	r2, [r2, #0]
 8001724:	2a00      	cmp	r2, #0
 8001726:	d001      	beq.n	800172c <_printf_common+0x24>
 8001728:	3301      	adds	r3, #1
 800172a:	6033      	str	r3, [r6, #0]
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	069b      	lsls	r3, r3, #26
 8001730:	d502      	bpl.n	8001738 <_printf_common+0x30>
 8001732:	6833      	ldr	r3, [r6, #0]
 8001734:	3302      	adds	r3, #2
 8001736:	6033      	str	r3, [r6, #0]
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	2306      	movs	r3, #6
 800173c:	0015      	movs	r5, r2
 800173e:	401d      	ands	r5, r3
 8001740:	421a      	tst	r2, r3
 8001742:	d027      	beq.n	8001794 <_printf_common+0x8c>
 8001744:	0023      	movs	r3, r4
 8001746:	3343      	adds	r3, #67	@ 0x43
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	1e5a      	subs	r2, r3, #1
 800174c:	4193      	sbcs	r3, r2
 800174e:	6822      	ldr	r2, [r4, #0]
 8001750:	0692      	lsls	r2, r2, #26
 8001752:	d430      	bmi.n	80017b6 <_printf_common+0xae>
 8001754:	0022      	movs	r2, r4
 8001756:	9901      	ldr	r1, [sp, #4]
 8001758:	9800      	ldr	r0, [sp, #0]
 800175a:	9d08      	ldr	r5, [sp, #32]
 800175c:	3243      	adds	r2, #67	@ 0x43
 800175e:	47a8      	blx	r5
 8001760:	3001      	adds	r0, #1
 8001762:	d025      	beq.n	80017b0 <_printf_common+0xa8>
 8001764:	2206      	movs	r2, #6
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	2500      	movs	r5, #0
 800176a:	4013      	ands	r3, r2
 800176c:	2b04      	cmp	r3, #4
 800176e:	d105      	bne.n	800177c <_printf_common+0x74>
 8001770:	6833      	ldr	r3, [r6, #0]
 8001772:	68e5      	ldr	r5, [r4, #12]
 8001774:	1aed      	subs	r5, r5, r3
 8001776:	43eb      	mvns	r3, r5
 8001778:	17db      	asrs	r3, r3, #31
 800177a:	401d      	ands	r5, r3
 800177c:	68a3      	ldr	r3, [r4, #8]
 800177e:	6922      	ldr	r2, [r4, #16]
 8001780:	4293      	cmp	r3, r2
 8001782:	dd01      	ble.n	8001788 <_printf_common+0x80>
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	18ed      	adds	r5, r5, r3
 8001788:	2600      	movs	r6, #0
 800178a:	42b5      	cmp	r5, r6
 800178c:	d120      	bne.n	80017d0 <_printf_common+0xc8>
 800178e:	2000      	movs	r0, #0
 8001790:	e010      	b.n	80017b4 <_printf_common+0xac>
 8001792:	3501      	adds	r5, #1
 8001794:	68e3      	ldr	r3, [r4, #12]
 8001796:	6832      	ldr	r2, [r6, #0]
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	42ab      	cmp	r3, r5
 800179c:	ddd2      	ble.n	8001744 <_printf_common+0x3c>
 800179e:	0022      	movs	r2, r4
 80017a0:	2301      	movs	r3, #1
 80017a2:	9901      	ldr	r1, [sp, #4]
 80017a4:	9800      	ldr	r0, [sp, #0]
 80017a6:	9f08      	ldr	r7, [sp, #32]
 80017a8:	3219      	adds	r2, #25
 80017aa:	47b8      	blx	r7
 80017ac:	3001      	adds	r0, #1
 80017ae:	d1f0      	bne.n	8001792 <_printf_common+0x8a>
 80017b0:	2001      	movs	r0, #1
 80017b2:	4240      	negs	r0, r0
 80017b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80017b6:	2030      	movs	r0, #48	@ 0x30
 80017b8:	18e1      	adds	r1, r4, r3
 80017ba:	3143      	adds	r1, #67	@ 0x43
 80017bc:	7008      	strb	r0, [r1, #0]
 80017be:	0021      	movs	r1, r4
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	3145      	adds	r1, #69	@ 0x45
 80017c4:	7809      	ldrb	r1, [r1, #0]
 80017c6:	18a2      	adds	r2, r4, r2
 80017c8:	3243      	adds	r2, #67	@ 0x43
 80017ca:	3302      	adds	r3, #2
 80017cc:	7011      	strb	r1, [r2, #0]
 80017ce:	e7c1      	b.n	8001754 <_printf_common+0x4c>
 80017d0:	0022      	movs	r2, r4
 80017d2:	2301      	movs	r3, #1
 80017d4:	9901      	ldr	r1, [sp, #4]
 80017d6:	9800      	ldr	r0, [sp, #0]
 80017d8:	9f08      	ldr	r7, [sp, #32]
 80017da:	321a      	adds	r2, #26
 80017dc:	47b8      	blx	r7
 80017de:	3001      	adds	r0, #1
 80017e0:	d0e6      	beq.n	80017b0 <_printf_common+0xa8>
 80017e2:	3601      	adds	r6, #1
 80017e4:	e7d1      	b.n	800178a <_printf_common+0x82>
	...

080017e8 <_printf_i>:
 80017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ea:	b08b      	sub	sp, #44	@ 0x2c
 80017ec:	9206      	str	r2, [sp, #24]
 80017ee:	000a      	movs	r2, r1
 80017f0:	3243      	adds	r2, #67	@ 0x43
 80017f2:	9307      	str	r3, [sp, #28]
 80017f4:	9005      	str	r0, [sp, #20]
 80017f6:	9203      	str	r2, [sp, #12]
 80017f8:	7e0a      	ldrb	r2, [r1, #24]
 80017fa:	000c      	movs	r4, r1
 80017fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80017fe:	2a78      	cmp	r2, #120	@ 0x78
 8001800:	d809      	bhi.n	8001816 <_printf_i+0x2e>
 8001802:	2a62      	cmp	r2, #98	@ 0x62
 8001804:	d80b      	bhi.n	800181e <_printf_i+0x36>
 8001806:	2a00      	cmp	r2, #0
 8001808:	d100      	bne.n	800180c <_printf_i+0x24>
 800180a:	e0bc      	b.n	8001986 <_printf_i+0x19e>
 800180c:	497b      	ldr	r1, [pc, #492]	@ (80019fc <_printf_i+0x214>)
 800180e:	9104      	str	r1, [sp, #16]
 8001810:	2a58      	cmp	r2, #88	@ 0x58
 8001812:	d100      	bne.n	8001816 <_printf_i+0x2e>
 8001814:	e090      	b.n	8001938 <_printf_i+0x150>
 8001816:	0025      	movs	r5, r4
 8001818:	3542      	adds	r5, #66	@ 0x42
 800181a:	702a      	strb	r2, [r5, #0]
 800181c:	e022      	b.n	8001864 <_printf_i+0x7c>
 800181e:	0010      	movs	r0, r2
 8001820:	3863      	subs	r0, #99	@ 0x63
 8001822:	2815      	cmp	r0, #21
 8001824:	d8f7      	bhi.n	8001816 <_printf_i+0x2e>
 8001826:	f7fe fc69 	bl	80000fc <__gnu_thumb1_case_shi>
 800182a:	0016      	.short	0x0016
 800182c:	fff6001f 	.word	0xfff6001f
 8001830:	fff6fff6 	.word	0xfff6fff6
 8001834:	001ffff6 	.word	0x001ffff6
 8001838:	fff6fff6 	.word	0xfff6fff6
 800183c:	fff6fff6 	.word	0xfff6fff6
 8001840:	003600a1 	.word	0x003600a1
 8001844:	fff60080 	.word	0xfff60080
 8001848:	00b2fff6 	.word	0x00b2fff6
 800184c:	0036fff6 	.word	0x0036fff6
 8001850:	fff6fff6 	.word	0xfff6fff6
 8001854:	0084      	.short	0x0084
 8001856:	0025      	movs	r5, r4
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	3542      	adds	r5, #66	@ 0x42
 800185c:	1d11      	adds	r1, r2, #4
 800185e:	6019      	str	r1, [r3, #0]
 8001860:	6813      	ldr	r3, [r2, #0]
 8001862:	702b      	strb	r3, [r5, #0]
 8001864:	2301      	movs	r3, #1
 8001866:	e0a0      	b.n	80019aa <_printf_i+0x1c2>
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	6809      	ldr	r1, [r1, #0]
 800186c:	1d02      	adds	r2, r0, #4
 800186e:	060d      	lsls	r5, r1, #24
 8001870:	d50b      	bpl.n	800188a <_printf_i+0xa2>
 8001872:	6806      	ldr	r6, [r0, #0]
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	2e00      	cmp	r6, #0
 8001878:	da03      	bge.n	8001882 <_printf_i+0x9a>
 800187a:	232d      	movs	r3, #45	@ 0x2d
 800187c:	9a03      	ldr	r2, [sp, #12]
 800187e:	4276      	negs	r6, r6
 8001880:	7013      	strb	r3, [r2, #0]
 8001882:	4b5e      	ldr	r3, [pc, #376]	@ (80019fc <_printf_i+0x214>)
 8001884:	270a      	movs	r7, #10
 8001886:	9304      	str	r3, [sp, #16]
 8001888:	e018      	b.n	80018bc <_printf_i+0xd4>
 800188a:	6806      	ldr	r6, [r0, #0]
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	0649      	lsls	r1, r1, #25
 8001890:	d5f1      	bpl.n	8001876 <_printf_i+0x8e>
 8001892:	b236      	sxth	r6, r6
 8001894:	e7ef      	b.n	8001876 <_printf_i+0x8e>
 8001896:	6808      	ldr	r0, [r1, #0]
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	c940      	ldmia	r1!, {r6}
 800189c:	0605      	lsls	r5, r0, #24
 800189e:	d402      	bmi.n	80018a6 <_printf_i+0xbe>
 80018a0:	0640      	lsls	r0, r0, #25
 80018a2:	d500      	bpl.n	80018a6 <_printf_i+0xbe>
 80018a4:	b2b6      	uxth	r6, r6
 80018a6:	6019      	str	r1, [r3, #0]
 80018a8:	4b54      	ldr	r3, [pc, #336]	@ (80019fc <_printf_i+0x214>)
 80018aa:	270a      	movs	r7, #10
 80018ac:	9304      	str	r3, [sp, #16]
 80018ae:	2a6f      	cmp	r2, #111	@ 0x6f
 80018b0:	d100      	bne.n	80018b4 <_printf_i+0xcc>
 80018b2:	3f02      	subs	r7, #2
 80018b4:	0023      	movs	r3, r4
 80018b6:	2200      	movs	r2, #0
 80018b8:	3343      	adds	r3, #67	@ 0x43
 80018ba:	701a      	strb	r2, [r3, #0]
 80018bc:	6863      	ldr	r3, [r4, #4]
 80018be:	60a3      	str	r3, [r4, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db03      	blt.n	80018cc <_printf_i+0xe4>
 80018c4:	2104      	movs	r1, #4
 80018c6:	6822      	ldr	r2, [r4, #0]
 80018c8:	438a      	bics	r2, r1
 80018ca:	6022      	str	r2, [r4, #0]
 80018cc:	2e00      	cmp	r6, #0
 80018ce:	d102      	bne.n	80018d6 <_printf_i+0xee>
 80018d0:	9d03      	ldr	r5, [sp, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00c      	beq.n	80018f0 <_printf_i+0x108>
 80018d6:	9d03      	ldr	r5, [sp, #12]
 80018d8:	0030      	movs	r0, r6
 80018da:	0039      	movs	r1, r7
 80018dc:	f7fe fc9e 	bl	800021c <__aeabi_uidivmod>
 80018e0:	9b04      	ldr	r3, [sp, #16]
 80018e2:	3d01      	subs	r5, #1
 80018e4:	5c5b      	ldrb	r3, [r3, r1]
 80018e6:	702b      	strb	r3, [r5, #0]
 80018e8:	0033      	movs	r3, r6
 80018ea:	0006      	movs	r6, r0
 80018ec:	429f      	cmp	r7, r3
 80018ee:	d9f3      	bls.n	80018d8 <_printf_i+0xf0>
 80018f0:	2f08      	cmp	r7, #8
 80018f2:	d109      	bne.n	8001908 <_printf_i+0x120>
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	07db      	lsls	r3, r3, #31
 80018f8:	d506      	bpl.n	8001908 <_printf_i+0x120>
 80018fa:	6862      	ldr	r2, [r4, #4]
 80018fc:	6923      	ldr	r3, [r4, #16]
 80018fe:	429a      	cmp	r2, r3
 8001900:	dc02      	bgt.n	8001908 <_printf_i+0x120>
 8001902:	2330      	movs	r3, #48	@ 0x30
 8001904:	3d01      	subs	r5, #1
 8001906:	702b      	strb	r3, [r5, #0]
 8001908:	9b03      	ldr	r3, [sp, #12]
 800190a:	1b5b      	subs	r3, r3, r5
 800190c:	6123      	str	r3, [r4, #16]
 800190e:	9b07      	ldr	r3, [sp, #28]
 8001910:	0021      	movs	r1, r4
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	9805      	ldr	r0, [sp, #20]
 8001916:	9b06      	ldr	r3, [sp, #24]
 8001918:	aa09      	add	r2, sp, #36	@ 0x24
 800191a:	f7ff fef5 	bl	8001708 <_printf_common>
 800191e:	3001      	adds	r0, #1
 8001920:	d148      	bne.n	80019b4 <_printf_i+0x1cc>
 8001922:	2001      	movs	r0, #1
 8001924:	4240      	negs	r0, r0
 8001926:	b00b      	add	sp, #44	@ 0x2c
 8001928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192a:	2220      	movs	r2, #32
 800192c:	6809      	ldr	r1, [r1, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	6022      	str	r2, [r4, #0]
 8001932:	2278      	movs	r2, #120	@ 0x78
 8001934:	4932      	ldr	r1, [pc, #200]	@ (8001a00 <_printf_i+0x218>)
 8001936:	9104      	str	r1, [sp, #16]
 8001938:	0021      	movs	r1, r4
 800193a:	3145      	adds	r1, #69	@ 0x45
 800193c:	700a      	strb	r2, [r1, #0]
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	6822      	ldr	r2, [r4, #0]
 8001942:	c940      	ldmia	r1!, {r6}
 8001944:	0610      	lsls	r0, r2, #24
 8001946:	d402      	bmi.n	800194e <_printf_i+0x166>
 8001948:	0650      	lsls	r0, r2, #25
 800194a:	d500      	bpl.n	800194e <_printf_i+0x166>
 800194c:	b2b6      	uxth	r6, r6
 800194e:	6019      	str	r1, [r3, #0]
 8001950:	07d3      	lsls	r3, r2, #31
 8001952:	d502      	bpl.n	800195a <_printf_i+0x172>
 8001954:	2320      	movs	r3, #32
 8001956:	4313      	orrs	r3, r2
 8001958:	6023      	str	r3, [r4, #0]
 800195a:	2e00      	cmp	r6, #0
 800195c:	d001      	beq.n	8001962 <_printf_i+0x17a>
 800195e:	2710      	movs	r7, #16
 8001960:	e7a8      	b.n	80018b4 <_printf_i+0xcc>
 8001962:	2220      	movs	r2, #32
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	4393      	bics	r3, r2
 8001968:	6023      	str	r3, [r4, #0]
 800196a:	e7f8      	b.n	800195e <_printf_i+0x176>
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	680d      	ldr	r5, [r1, #0]
 8001970:	1d10      	adds	r0, r2, #4
 8001972:	6949      	ldr	r1, [r1, #20]
 8001974:	6018      	str	r0, [r3, #0]
 8001976:	6813      	ldr	r3, [r2, #0]
 8001978:	062e      	lsls	r6, r5, #24
 800197a:	d501      	bpl.n	8001980 <_printf_i+0x198>
 800197c:	6019      	str	r1, [r3, #0]
 800197e:	e002      	b.n	8001986 <_printf_i+0x19e>
 8001980:	066d      	lsls	r5, r5, #25
 8001982:	d5fb      	bpl.n	800197c <_printf_i+0x194>
 8001984:	8019      	strh	r1, [r3, #0]
 8001986:	2300      	movs	r3, #0
 8001988:	9d03      	ldr	r5, [sp, #12]
 800198a:	6123      	str	r3, [r4, #16]
 800198c:	e7bf      	b.n	800190e <_printf_i+0x126>
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	1d11      	adds	r1, r2, #4
 8001992:	6019      	str	r1, [r3, #0]
 8001994:	6815      	ldr	r5, [r2, #0]
 8001996:	2100      	movs	r1, #0
 8001998:	0028      	movs	r0, r5
 800199a:	6862      	ldr	r2, [r4, #4]
 800199c:	f000 f986 	bl	8001cac <memchr>
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d001      	beq.n	80019a8 <_printf_i+0x1c0>
 80019a4:	1b40      	subs	r0, r0, r5
 80019a6:	6060      	str	r0, [r4, #4]
 80019a8:	6863      	ldr	r3, [r4, #4]
 80019aa:	6123      	str	r3, [r4, #16]
 80019ac:	2300      	movs	r3, #0
 80019ae:	9a03      	ldr	r2, [sp, #12]
 80019b0:	7013      	strb	r3, [r2, #0]
 80019b2:	e7ac      	b.n	800190e <_printf_i+0x126>
 80019b4:	002a      	movs	r2, r5
 80019b6:	6923      	ldr	r3, [r4, #16]
 80019b8:	9906      	ldr	r1, [sp, #24]
 80019ba:	9805      	ldr	r0, [sp, #20]
 80019bc:	9d07      	ldr	r5, [sp, #28]
 80019be:	47a8      	blx	r5
 80019c0:	3001      	adds	r0, #1
 80019c2:	d0ae      	beq.n	8001922 <_printf_i+0x13a>
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	079b      	lsls	r3, r3, #30
 80019c8:	d415      	bmi.n	80019f6 <_printf_i+0x20e>
 80019ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80019cc:	68e0      	ldr	r0, [r4, #12]
 80019ce:	4298      	cmp	r0, r3
 80019d0:	daa9      	bge.n	8001926 <_printf_i+0x13e>
 80019d2:	0018      	movs	r0, r3
 80019d4:	e7a7      	b.n	8001926 <_printf_i+0x13e>
 80019d6:	0022      	movs	r2, r4
 80019d8:	2301      	movs	r3, #1
 80019da:	9906      	ldr	r1, [sp, #24]
 80019dc:	9805      	ldr	r0, [sp, #20]
 80019de:	9e07      	ldr	r6, [sp, #28]
 80019e0:	3219      	adds	r2, #25
 80019e2:	47b0      	blx	r6
 80019e4:	3001      	adds	r0, #1
 80019e6:	d09c      	beq.n	8001922 <_printf_i+0x13a>
 80019e8:	3501      	adds	r5, #1
 80019ea:	68e3      	ldr	r3, [r4, #12]
 80019ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	42ab      	cmp	r3, r5
 80019f2:	dcf0      	bgt.n	80019d6 <_printf_i+0x1ee>
 80019f4:	e7e9      	b.n	80019ca <_printf_i+0x1e2>
 80019f6:	2500      	movs	r5, #0
 80019f8:	e7f7      	b.n	80019ea <_printf_i+0x202>
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	08001d34 	.word	0x08001d34
 8001a00:	08001d45 	.word	0x08001d45

08001a04 <__sflush_r>:
 8001a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a06:	220c      	movs	r2, #12
 8001a08:	5e8b      	ldrsh	r3, [r1, r2]
 8001a0a:	0005      	movs	r5, r0
 8001a0c:	000c      	movs	r4, r1
 8001a0e:	071a      	lsls	r2, r3, #28
 8001a10:	d456      	bmi.n	8001ac0 <__sflush_r+0xbc>
 8001a12:	684a      	ldr	r2, [r1, #4]
 8001a14:	2a00      	cmp	r2, #0
 8001a16:	dc02      	bgt.n	8001a1e <__sflush_r+0x1a>
 8001a18:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	dd4e      	ble.n	8001abc <__sflush_r+0xb8>
 8001a1e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8001a20:	2f00      	cmp	r7, #0
 8001a22:	d04b      	beq.n	8001abc <__sflush_r+0xb8>
 8001a24:	2200      	movs	r2, #0
 8001a26:	2080      	movs	r0, #128	@ 0x80
 8001a28:	682e      	ldr	r6, [r5, #0]
 8001a2a:	602a      	str	r2, [r5, #0]
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	0140      	lsls	r0, r0, #5
 8001a30:	6a21      	ldr	r1, [r4, #32]
 8001a32:	4002      	ands	r2, r0
 8001a34:	4203      	tst	r3, r0
 8001a36:	d033      	beq.n	8001aa0 <__sflush_r+0x9c>
 8001a38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001a3a:	89a3      	ldrh	r3, [r4, #12]
 8001a3c:	075b      	lsls	r3, r3, #29
 8001a3e:	d506      	bpl.n	8001a4e <__sflush_r+0x4a>
 8001a40:	6863      	ldr	r3, [r4, #4]
 8001a42:	1ad2      	subs	r2, r2, r3
 8001a44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <__sflush_r+0x4a>
 8001a4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a4c:	1ad2      	subs	r2, r2, r3
 8001a4e:	2300      	movs	r3, #0
 8001a50:	0028      	movs	r0, r5
 8001a52:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8001a54:	6a21      	ldr	r1, [r4, #32]
 8001a56:	47b8      	blx	r7
 8001a58:	89a2      	ldrh	r2, [r4, #12]
 8001a5a:	1c43      	adds	r3, r0, #1
 8001a5c:	d106      	bne.n	8001a6c <__sflush_r+0x68>
 8001a5e:	6829      	ldr	r1, [r5, #0]
 8001a60:	291d      	cmp	r1, #29
 8001a62:	d846      	bhi.n	8001af2 <__sflush_r+0xee>
 8001a64:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <__sflush_r+0x108>)
 8001a66:	410b      	asrs	r3, r1
 8001a68:	07db      	lsls	r3, r3, #31
 8001a6a:	d442      	bmi.n	8001af2 <__sflush_r+0xee>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6063      	str	r3, [r4, #4]
 8001a70:	6923      	ldr	r3, [r4, #16]
 8001a72:	6023      	str	r3, [r4, #0]
 8001a74:	04d2      	lsls	r2, r2, #19
 8001a76:	d505      	bpl.n	8001a84 <__sflush_r+0x80>
 8001a78:	1c43      	adds	r3, r0, #1
 8001a7a:	d102      	bne.n	8001a82 <__sflush_r+0x7e>
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d100      	bne.n	8001a84 <__sflush_r+0x80>
 8001a82:	6560      	str	r0, [r4, #84]	@ 0x54
 8001a84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a86:	602e      	str	r6, [r5, #0]
 8001a88:	2900      	cmp	r1, #0
 8001a8a:	d017      	beq.n	8001abc <__sflush_r+0xb8>
 8001a8c:	0023      	movs	r3, r4
 8001a8e:	3344      	adds	r3, #68	@ 0x44
 8001a90:	4299      	cmp	r1, r3
 8001a92:	d002      	beq.n	8001a9a <__sflush_r+0x96>
 8001a94:	0028      	movs	r0, r5
 8001a96:	f7ff fbf7 	bl	8001288 <_free_r>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a9e:	e00d      	b.n	8001abc <__sflush_r+0xb8>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	0028      	movs	r0, r5
 8001aa4:	47b8      	blx	r7
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	1c43      	adds	r3, r0, #1
 8001aaa:	d1c6      	bne.n	8001a3a <__sflush_r+0x36>
 8001aac:	682b      	ldr	r3, [r5, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0c3      	beq.n	8001a3a <__sflush_r+0x36>
 8001ab2:	2b1d      	cmp	r3, #29
 8001ab4:	d001      	beq.n	8001aba <__sflush_r+0xb6>
 8001ab6:	2b16      	cmp	r3, #22
 8001ab8:	d11a      	bne.n	8001af0 <__sflush_r+0xec>
 8001aba:	602e      	str	r6, [r5, #0]
 8001abc:	2000      	movs	r0, #0
 8001abe:	e01e      	b.n	8001afe <__sflush_r+0xfa>
 8001ac0:	690e      	ldr	r6, [r1, #16]
 8001ac2:	2e00      	cmp	r6, #0
 8001ac4:	d0fa      	beq.n	8001abc <__sflush_r+0xb8>
 8001ac6:	680f      	ldr	r7, [r1, #0]
 8001ac8:	600e      	str	r6, [r1, #0]
 8001aca:	1bba      	subs	r2, r7, r6
 8001acc:	9201      	str	r2, [sp, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	079b      	lsls	r3, r3, #30
 8001ad2:	d100      	bne.n	8001ad6 <__sflush_r+0xd2>
 8001ad4:	694a      	ldr	r2, [r1, #20]
 8001ad6:	60a2      	str	r2, [r4, #8]
 8001ad8:	9b01      	ldr	r3, [sp, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	ddee      	ble.n	8001abc <__sflush_r+0xb8>
 8001ade:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001ae0:	0032      	movs	r2, r6
 8001ae2:	001f      	movs	r7, r3
 8001ae4:	0028      	movs	r0, r5
 8001ae6:	9b01      	ldr	r3, [sp, #4]
 8001ae8:	6a21      	ldr	r1, [r4, #32]
 8001aea:	47b8      	blx	r7
 8001aec:	2800      	cmp	r0, #0
 8001aee:	dc07      	bgt.n	8001b00 <__sflush_r+0xfc>
 8001af0:	89a2      	ldrh	r2, [r4, #12]
 8001af2:	2340      	movs	r3, #64	@ 0x40
 8001af4:	2001      	movs	r0, #1
 8001af6:	4313      	orrs	r3, r2
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	81a3      	strh	r3, [r4, #12]
 8001afc:	4240      	negs	r0, r0
 8001afe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001b00:	9b01      	ldr	r3, [sp, #4]
 8001b02:	1836      	adds	r6, r6, r0
 8001b04:	1a1b      	subs	r3, r3, r0
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	e7e6      	b.n	8001ad8 <__sflush_r+0xd4>
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	dfbffffe 	.word	0xdfbffffe

08001b10 <_fflush_r>:
 8001b10:	690b      	ldr	r3, [r1, #16]
 8001b12:	b570      	push	{r4, r5, r6, lr}
 8001b14:	0005      	movs	r5, r0
 8001b16:	000c      	movs	r4, r1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_fflush_r+0x12>
 8001b1c:	2500      	movs	r5, #0
 8001b1e:	0028      	movs	r0, r5
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
 8001b22:	2800      	cmp	r0, #0
 8001b24:	d004      	beq.n	8001b30 <_fflush_r+0x20>
 8001b26:	6a03      	ldr	r3, [r0, #32]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <_fflush_r+0x20>
 8001b2c:	f7ff f998 	bl	8000e60 <__sinit>
 8001b30:	220c      	movs	r2, #12
 8001b32:	5ea3      	ldrsh	r3, [r4, r2]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f1      	beq.n	8001b1c <_fflush_r+0xc>
 8001b38:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001b3a:	07d2      	lsls	r2, r2, #31
 8001b3c:	d404      	bmi.n	8001b48 <_fflush_r+0x38>
 8001b3e:	059b      	lsls	r3, r3, #22
 8001b40:	d402      	bmi.n	8001b48 <_fflush_r+0x38>
 8001b42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b44:	f7ff fb9d 	bl	8001282 <__retarget_lock_acquire_recursive>
 8001b48:	0028      	movs	r0, r5
 8001b4a:	0021      	movs	r1, r4
 8001b4c:	f7ff ff5a 	bl	8001a04 <__sflush_r>
 8001b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b52:	0005      	movs	r5, r0
 8001b54:	07db      	lsls	r3, r3, #31
 8001b56:	d4e2      	bmi.n	8001b1e <_fflush_r+0xe>
 8001b58:	89a3      	ldrh	r3, [r4, #12]
 8001b5a:	059b      	lsls	r3, r3, #22
 8001b5c:	d4df      	bmi.n	8001b1e <_fflush_r+0xe>
 8001b5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b60:	f7ff fb90 	bl	8001284 <__retarget_lock_release_recursive>
 8001b64:	e7db      	b.n	8001b1e <_fflush_r+0xe>
	...

08001b68 <__swhatbuf_r>:
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	000e      	movs	r6, r1
 8001b6c:	001d      	movs	r5, r3
 8001b6e:	230e      	movs	r3, #14
 8001b70:	5ec9      	ldrsh	r1, [r1, r3]
 8001b72:	0014      	movs	r4, r2
 8001b74:	b096      	sub	sp, #88	@ 0x58
 8001b76:	2900      	cmp	r1, #0
 8001b78:	da0c      	bge.n	8001b94 <__swhatbuf_r+0x2c>
 8001b7a:	89b2      	ldrh	r2, [r6, #12]
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	0011      	movs	r1, r2
 8001b80:	4019      	ands	r1, r3
 8001b82:	421a      	tst	r2, r3
 8001b84:	d114      	bne.n	8001bb0 <__swhatbuf_r+0x48>
 8001b86:	2380      	movs	r3, #128	@ 0x80
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	6029      	str	r1, [r5, #0]
 8001b8e:	6023      	str	r3, [r4, #0]
 8001b90:	b016      	add	sp, #88	@ 0x58
 8001b92:	bd70      	pop	{r4, r5, r6, pc}
 8001b94:	466a      	mov	r2, sp
 8001b96:	f000 f853 	bl	8001c40 <_fstat_r>
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	dbed      	blt.n	8001b7a <__swhatbuf_r+0x12>
 8001b9e:	23f0      	movs	r3, #240	@ 0xf0
 8001ba0:	9901      	ldr	r1, [sp, #4]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	4019      	ands	r1, r3
 8001ba6:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <__swhatbuf_r+0x50>)
 8001ba8:	18c9      	adds	r1, r1, r3
 8001baa:	424b      	negs	r3, r1
 8001bac:	4159      	adcs	r1, r3
 8001bae:	e7ea      	b.n	8001b86 <__swhatbuf_r+0x1e>
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2340      	movs	r3, #64	@ 0x40
 8001bb4:	e7e9      	b.n	8001b8a <__swhatbuf_r+0x22>
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	ffffe000 	.word	0xffffe000

08001bbc <__smakebuf_r>:
 8001bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bbe:	2602      	movs	r6, #2
 8001bc0:	898b      	ldrh	r3, [r1, #12]
 8001bc2:	0005      	movs	r5, r0
 8001bc4:	000c      	movs	r4, r1
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	4233      	tst	r3, r6
 8001bca:	d007      	beq.n	8001bdc <__smakebuf_r+0x20>
 8001bcc:	0023      	movs	r3, r4
 8001bce:	3347      	adds	r3, #71	@ 0x47
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	6123      	str	r3, [r4, #16]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	6163      	str	r3, [r4, #20]
 8001bd8:	b005      	add	sp, #20
 8001bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bdc:	ab03      	add	r3, sp, #12
 8001bde:	aa02      	add	r2, sp, #8
 8001be0:	f7ff ffc2 	bl	8001b68 <__swhatbuf_r>
 8001be4:	9f02      	ldr	r7, [sp, #8]
 8001be6:	9001      	str	r0, [sp, #4]
 8001be8:	0039      	movs	r1, r7
 8001bea:	0028      	movs	r0, r5
 8001bec:	f7ff fbb8 	bl	8001360 <_malloc_r>
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d108      	bne.n	8001c06 <__smakebuf_r+0x4a>
 8001bf4:	220c      	movs	r2, #12
 8001bf6:	5ea3      	ldrsh	r3, [r4, r2]
 8001bf8:	059a      	lsls	r2, r3, #22
 8001bfa:	d4ed      	bmi.n	8001bd8 <__smakebuf_r+0x1c>
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	4393      	bics	r3, r2
 8001c00:	431e      	orrs	r6, r3
 8001c02:	81a6      	strh	r6, [r4, #12]
 8001c04:	e7e2      	b.n	8001bcc <__smakebuf_r+0x10>
 8001c06:	2380      	movs	r3, #128	@ 0x80
 8001c08:	89a2      	ldrh	r2, [r4, #12]
 8001c0a:	6020      	str	r0, [r4, #0]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	81a3      	strh	r3, [r4, #12]
 8001c10:	9b03      	ldr	r3, [sp, #12]
 8001c12:	6120      	str	r0, [r4, #16]
 8001c14:	6167      	str	r7, [r4, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00c      	beq.n	8001c34 <__smakebuf_r+0x78>
 8001c1a:	0028      	movs	r0, r5
 8001c1c:	230e      	movs	r3, #14
 8001c1e:	5ee1      	ldrsh	r1, [r4, r3]
 8001c20:	f000 f820 	bl	8001c64 <_isatty_r>
 8001c24:	2800      	cmp	r0, #0
 8001c26:	d005      	beq.n	8001c34 <__smakebuf_r+0x78>
 8001c28:	2303      	movs	r3, #3
 8001c2a:	89a2      	ldrh	r2, [r4, #12]
 8001c2c:	439a      	bics	r2, r3
 8001c2e:	3b02      	subs	r3, #2
 8001c30:	4313      	orrs	r3, r2
 8001c32:	81a3      	strh	r3, [r4, #12]
 8001c34:	89a3      	ldrh	r3, [r4, #12]
 8001c36:	9a01      	ldr	r2, [sp, #4]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	81a3      	strh	r3, [r4, #12]
 8001c3c:	e7cc      	b.n	8001bd8 <__smakebuf_r+0x1c>
	...

08001c40 <_fstat_r>:
 8001c40:	2300      	movs	r3, #0
 8001c42:	b570      	push	{r4, r5, r6, lr}
 8001c44:	4d06      	ldr	r5, [pc, #24]	@ (8001c60 <_fstat_r+0x20>)
 8001c46:	0004      	movs	r4, r0
 8001c48:	0008      	movs	r0, r1
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	602b      	str	r3, [r5, #0]
 8001c4e:	f7fe fc1e 	bl	800048e <_fstat>
 8001c52:	1c43      	adds	r3, r0, #1
 8001c54:	d103      	bne.n	8001c5e <_fstat_r+0x1e>
 8001c56:	682b      	ldr	r3, [r5, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d000      	beq.n	8001c5e <_fstat_r+0x1e>
 8001c5c:	6023      	str	r3, [r4, #0]
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
 8001c60:	200001b8 	.word	0x200001b8

08001c64 <_isatty_r>:
 8001c64:	2300      	movs	r3, #0
 8001c66:	b570      	push	{r4, r5, r6, lr}
 8001c68:	4d06      	ldr	r5, [pc, #24]	@ (8001c84 <_isatty_r+0x20>)
 8001c6a:	0004      	movs	r4, r0
 8001c6c:	0008      	movs	r0, r1
 8001c6e:	602b      	str	r3, [r5, #0]
 8001c70:	f7fe fc1b 	bl	80004aa <_isatty>
 8001c74:	1c43      	adds	r3, r0, #1
 8001c76:	d103      	bne.n	8001c80 <_isatty_r+0x1c>
 8001c78:	682b      	ldr	r3, [r5, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d000      	beq.n	8001c80 <_isatty_r+0x1c>
 8001c7e:	6023      	str	r3, [r4, #0]
 8001c80:	bd70      	pop	{r4, r5, r6, pc}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	200001b8 	.word	0x200001b8

08001c88 <_sbrk_r>:
 8001c88:	2300      	movs	r3, #0
 8001c8a:	b570      	push	{r4, r5, r6, lr}
 8001c8c:	4d06      	ldr	r5, [pc, #24]	@ (8001ca8 <_sbrk_r+0x20>)
 8001c8e:	0004      	movs	r4, r0
 8001c90:	0008      	movs	r0, r1
 8001c92:	602b      	str	r3, [r5, #0]
 8001c94:	f7fe fc1e 	bl	80004d4 <_sbrk>
 8001c98:	1c43      	adds	r3, r0, #1
 8001c9a:	d103      	bne.n	8001ca4 <_sbrk_r+0x1c>
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d000      	beq.n	8001ca4 <_sbrk_r+0x1c>
 8001ca2:	6023      	str	r3, [r4, #0]
 8001ca4:	bd70      	pop	{r4, r5, r6, pc}
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	200001b8 	.word	0x200001b8

08001cac <memchr>:
 8001cac:	b2c9      	uxtb	r1, r1
 8001cae:	1882      	adds	r2, r0, r2
 8001cb0:	4290      	cmp	r0, r2
 8001cb2:	d101      	bne.n	8001cb8 <memchr+0xc>
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	4770      	bx	lr
 8001cb8:	7803      	ldrb	r3, [r0, #0]
 8001cba:	428b      	cmp	r3, r1
 8001cbc:	d0fb      	beq.n	8001cb6 <memchr+0xa>
 8001cbe:	3001      	adds	r0, #1
 8001cc0:	e7f6      	b.n	8001cb0 <memchr+0x4>
	...

08001cc4 <_init>:
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cca:	bc08      	pop	{r3}
 8001ccc:	469e      	mov	lr, r3
 8001cce:	4770      	bx	lr

08001cd0 <_fini>:
 8001cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cd6:	bc08      	pop	{r3}
 8001cd8:	469e      	mov	lr, r3
 8001cda:	4770      	bx	lr
