
STM32F767XX_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004954  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08004b58  08004b58  00005b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f40  08004f40  000061e8  2**0
                  CONTENTS
  4 .ARM          00000008  08004f40  08004f40  00005f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f48  08004f48  000061e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f48  08004f48  00005f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f4c  08004f4c  00005f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08004f50  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  200001e8  08005138  000061e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  08005138  0000677c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000061e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000215c  00000000  00000000  00006212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000092c  00000000  00000000  0000836e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000260  00000000  00000000  00008ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c0  00000000  00000000  00008f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003885  00000000  00000000  000090c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000328d  00000000  00000000  0000c945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ce64  00000000  00000000  0000fbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001ca36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001900  00000000  00000000  0001ca7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0001e37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	08004b3c 	.word	0x08004b3c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	08004b3c 	.word	0x08004b3c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <USART3_Init>:
uint8_t g_data = 0;

extern void initialise_monitor_handles();

void USART3_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	usart3_handle.pUSARTx = USART3;
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <USART3_Init+0x3c>)
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c58 <USART3_Init+0x40>)
 8000c20:	601a      	str	r2, [r3, #0]
	usart3_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <USART3_Init+0x3c>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c28:	609a      	str	r2, [r3, #8]
	usart3_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <USART3_Init+0x3c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	73da      	strb	r2, [r3, #15]
	usart3_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <USART3_Init+0x3c>)
 8000c32:	2202      	movs	r2, #2
 8000c34:	711a      	strb	r2, [r3, #4]
	usart3_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000c36:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <USART3_Init+0x3c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	731a      	strb	r2, [r3, #12]
	usart3_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <USART3_Init+0x3c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	735a      	strb	r2, [r3, #13]
	usart3_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000c42:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <USART3_Init+0x3c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart3_handle);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <USART3_Init+0x3c>)
 8000c4a:	f000 fddc 	bl	8001806 <USART_Init>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000604 	.word	0x20000604
 8000c58:	40004800 	.word	0x40004800

08000c5c <USART3_GPIOInit>:

void USART3_GPIOInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOD;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <USART3_GPIOInit+0x40>)
 8000c64:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIOPinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8000c66:	2302      	movs	r3, #2
 8000c68:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIOPinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIOPinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIOPinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000c72:	2302      	movs	r3, #2
 8000c74:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIOPinConfig.GPIO_PinAltFuncMode =7;
 8000c76:	2307      	movs	r3, #7
 8000c78:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIOPinConfig.GPIO_PinNumber  = GPIO_PIN_8;
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fb27 	bl	80012d4 <GPIO_Init>

	usart_gpios.GPIOPinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000c86:	2309      	movs	r3, #9
 8000c88:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fb21 	bl	80012d4 <GPIO_Init>

}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40020c00 	.word	0x40020c00

08000ca0 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <GPIO_ButtonInit+0x54>)
 8000ca8:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIOPinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000caa:	230d      	movs	r3, #13
 8000cac:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIOPinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIOPinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIOPinConfig.GPIO_PinPuPdControl = GPIO_NO_PP;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fb08 	bl	80012d4 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOB;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <GPIO_ButtonInit+0x58>)
 8000cc6:	603b      	str	r3, [r7, #0]
	GpioLed.GPIOPinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIOPinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIOPinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIOPinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIOPinConfig.GPIO_PinPuPdControl = GPIO_NO_PP;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClkControl(GPIOB,ENABLE);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <GPIO_ButtonInit+0x58>)
 8000ce0:	f000 f9e0 	bl	80010a4 <GPIO_PeriClkControl>

	GPIO_Init(&GpioLed);
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 faf4 	bl	80012d4 <GPIO_Init>

}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40020400 	.word	0x40020400

08000cfc <delay>:

void delay(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	e002      	b.n	8000d0e <delay+0x12>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <delay+0x28>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d9f8      	bls.n	8000d08 <delay+0xc>
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	0003d08f 	.word	0x0003d08f

08000d28 <main>:
int main(void)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]


	initialise_monitor_handles();
 8000d32:	f000 f8c5 	bl	8000ec0 <initialise_monitor_handles>
	 GPIO_ButtonInit();
 8000d36:	f7ff ffb3 	bl	8000ca0 <GPIO_ButtonInit>

	USART3_GPIOInit();
 8000d3a:	f7ff ff8f 	bl	8000c5c <USART3_GPIOInit>
    USART3_Init();
 8000d3e:	f7ff ff6b 	bl	8000c18 <USART3_Init>

    USART_IRQConfig(IRQ_USART3, IRQ_PRIO_46, ENABLE);
 8000d42:	2201      	movs	r2, #1
 8000d44:	212e      	movs	r1, #46	@ 0x2e
 8000d46:	2027      	movs	r0, #39	@ 0x27
 8000d48:	f000 ff0e 	bl	8001b68 <USART_IRQConfig>

    USART_PeripheralControl(USART3,ENABLE);
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4830      	ldr	r0, [pc, #192]	@ (8000e10 <main+0xe8>)
 8000d50:	f000 feee 	bl	8001b30 <USART_PeripheralControl>

    printf("Application is running\n");
 8000d54:	482f      	ldr	r0, [pc, #188]	@ (8000e14 <main+0xec>)
 8000d56:	f001 ff87 	bl	8002c68 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_13));
 8000d5a:	bf00      	nop
 8000d5c:	210d      	movs	r1, #13
 8000d5e:	482e      	ldr	r0, [pc, #184]	@ (8000e18 <main+0xf0>)
 8000d60:	f000 fc8c 	bl	800167c <GPIO_ReadFromInputPin>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f8      	beq.n	8000d5c <main+0x34>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000d6a:	f7ff ffc7 	bl	8000cfc <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	4b2a      	ldr	r3, [pc, #168]	@ (8000e1c <main+0xf4>)
 8000d72:	fba3 1302 	umull	r1, r3, r3, r2
 8000d76:	0859      	lsrs	r1, r3, #1
 8000d78:	460b      	mov	r3, r1
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	440b      	add	r3, r1
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart3_handle,rx_buf,strlen(msg[cnt])) != USART_READY );
 8000d82:	bf00      	nop
 8000d84:	4a26      	ldr	r2, [pc, #152]	@ (8000e20 <main+0xf8>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff faa7 	bl	80002e0 <strlen>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4923      	ldr	r1, [pc, #140]	@ (8000e24 <main+0xfc>)
 8000d98:	4823      	ldr	r0, [pc, #140]	@ (8000e28 <main+0x100>)
 8000d9a:	f001 f9bb 	bl	8002114 <USART_ReceiveDataIT>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1ef      	bne.n	8000d84 <main+0x5c>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart3_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 8000da4:	4a1e      	ldr	r2, [pc, #120]	@ (8000e20 <main+0xf8>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000dac:	4a1c      	ldr	r2, [pc, #112]	@ (8000e20 <main+0xf8>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fa93 	bl	80002e0 <strlen>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4621      	mov	r1, r4
 8000dc0:	4819      	ldr	r0, [pc, #100]	@ (8000e28 <main+0x100>)
 8000dc2:	f001 f959 	bl	8002078 <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 8000dc6:	4a16      	ldr	r2, [pc, #88]	@ (8000e20 <main+0xf8>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4816      	ldr	r0, [pc, #88]	@ (8000e2c <main+0x104>)
 8000dd2:	f001 fee1 	bl	8002b98 <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 8000dd6:	bf00      	nop
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <main+0x108>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d1fb      	bne.n	8000dd8 <main+0xb0>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 8000de0:	4a0f      	ldr	r2, [pc, #60]	@ (8000e20 <main+0xf8>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fa79 	bl	80002e0 <strlen>
 8000dee:	4603      	mov	r3, r0
 8000df0:	3301      	adds	r3, #1
 8000df2:	4a0c      	ldr	r2, [pc, #48]	@ (8000e24 <main+0xfc>)
 8000df4:	2100      	movs	r1, #0
 8000df6:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 8000df8:	490a      	ldr	r1, [pc, #40]	@ (8000e24 <main+0xfc>)
 8000dfa:	480e      	ldr	r0, [pc, #56]	@ (8000e34 <main+0x10c>)
 8000dfc:	f001 fecc 	bl	8002b98 <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 8000e00:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <main+0x108>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_13));
 8000e0c:	e7a5      	b.n	8000d5a <main+0x32>
 8000e0e:	bf00      	nop
 8000e10:	40004800 	.word	0x40004800
 8000e14:	08004b90 	.word	0x08004b90
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	aaaaaaab 	.word	0xaaaaaaab
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000204 	.word	0x20000204
 8000e28:	20000604 	.word	0x20000604
 8000e2c:	08004ba8 	.word	0x08004ba8
 8000e30:	20000628 	.word	0x20000628
 8000e34:	08004bbc 	.word	0x08004bbc

08000e38 <USART3_IRQHandler>:
	return 0;
}


void USART3_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart3_handle);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <USART3_IRQHandler+0x10>)
 8000e3e:	f000 ff6f 	bl	8001d20 <USART_IRQHandling>
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000604 	.word	0x20000604

08000e4c <USART_ApplicationEventCallback>:




void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d102      	bne.n	8000e64 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 8000e5e:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <USART_ApplicationEventCallback+0x24>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000628 	.word	0x20000628

08000e74 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <ITM_SendChar+0x44>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <ITM_SendChar+0x44>)
 8000e84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e88:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <ITM_SendChar+0x48>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ebc <ITM_SendChar+0x48>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000e96:	bf00      	nop
 8000e98:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0f8      	beq.n	8000e98 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000ea6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	6013      	str	r3, [r2, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	e000edfc 	.word	0xe000edfc
 8000ebc:	e0000e00 	.word	0xe0000e00

08000ec0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <_getpid>:

int _getpid(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return 1;
 8000ed0:	2301      	movs	r3, #1
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr

08000eda <_kill>:

int _kill(int pid, int sig)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ee4:	f001 fff2 	bl	8002ecc <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2216      	movs	r2, #22
 8000eec:	601a      	str	r2, [r3, #0]
  return -1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <_exit>:

void _exit (int status)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f02:	f04f 31ff 	mov.w	r1, #4294967295
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffe7 	bl	8000eda <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <_exit+0x12>

08000f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e00a      	b.n	8000f38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f22:	f3af 8000 	nop.w
 8000f26:	4601      	mov	r1, r0
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	b2ca      	uxtb	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbf0      	blt.n	8000f22 <_read+0x12>
  }

  return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e009      	b.n	8000f70 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	60ba      	str	r2, [r7, #8]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff85 	bl	8000e74 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf1      	blt.n	8000f5c <_write+0x12>
  }
  return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_close>:

int _close(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa8:	605a      	str	r2, [r3, #4]
  return 0;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <_isatty>:

int _isatty(int file)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b085      	sub	sp, #20
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	60f8      	str	r0, [r7, #12]
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
	...

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f001 ff5a 	bl	8002ecc <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20080000 	.word	0x20080000
 8001044:	00000400 	.word	0x00000400
 8001048:	2000062c 	.word	0x2000062c
 800104c:	20000780 	.word	0x20000780

08001050 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001050:	480d      	ldr	r0, [pc, #52]	@ (8001088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001052:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001054:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001058:	480c      	ldr	r0, [pc, #48]	@ (800108c <LoopForever+0x6>)
  ldr r1, =_edata
 800105a:	490d      	ldr	r1, [pc, #52]	@ (8001090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800105c:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <LoopForever+0xe>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001070:	4c0a      	ldr	r4, [pc, #40]	@ (800109c <LoopForever+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800107e:	f001 ff2b 	bl	8002ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001082:	f7ff fe51 	bl	8000d28 <main>

08001086 <LoopForever>:

LoopForever:
  b LoopForever
 8001086:	e7fe      	b.n	8001086 <LoopForever>
  ldr   r0, =_estack
 8001088:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001094:	08004f50 	.word	0x08004f50
  ldr r2, =_sbss
 8001098:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800109c:	2000077c 	.word	0x2000077c

080010a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC_IRQHandler>
	...

080010a4 <GPIO_PeriClkControl>:


#include "stm32f767xx_gpio_driver.h"

void GPIO_PeriClkControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d178      	bne.n	80011a8 <GPIO_PeriClkControl+0x104>
	{
		if (pGPIOx == GPIOA)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a7a      	ldr	r2, [pc, #488]	@ (80012a4 <GPIO_PeriClkControl+0x200>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d106      	bne.n	80010cc <GPIO_PeriClkControl+0x28>
		{
			GPIOA_PCLK_EN();
 80010be:	4b7a      	ldr	r3, [pc, #488]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a79      	ldr	r2, [pc, #484]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
		else
		{
			// Do nothing
		}
	}
}
 80010ca:	e0e5      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOB)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a77      	ldr	r2, [pc, #476]	@ (80012ac <GPIO_PeriClkControl+0x208>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d106      	bne.n	80010e2 <GPIO_PeriClkControl+0x3e>
			GPIOB_PCLK_EN();
 80010d4:	4b74      	ldr	r3, [pc, #464]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d8:	4a73      	ldr	r2, [pc, #460]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010e0:	e0da      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOC)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a72      	ldr	r2, [pc, #456]	@ (80012b0 <GPIO_PeriClkControl+0x20c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d106      	bne.n	80010f8 <GPIO_PeriClkControl+0x54>
			GPIOC_PCLK_EN();
 80010ea:	4b6f      	ldr	r3, [pc, #444]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a6e      	ldr	r2, [pc, #440]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010f6:	e0cf      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOD)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a6e      	ldr	r2, [pc, #440]	@ (80012b4 <GPIO_PeriClkControl+0x210>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d106      	bne.n	800110e <GPIO_PeriClkControl+0x6a>
			GPIOD_PCLK_EN();
 8001100:	4b69      	ldr	r3, [pc, #420]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001104:	4a68      	ldr	r2, [pc, #416]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800110c:	e0c4      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a69      	ldr	r2, [pc, #420]	@ (80012b8 <GPIO_PeriClkControl+0x214>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d106      	bne.n	8001124 <GPIO_PeriClkControl+0x80>
			GPIOE_PCLK_EN();
 8001116:	4b64      	ldr	r3, [pc, #400]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a63      	ldr	r2, [pc, #396]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001122:	e0b9      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a65      	ldr	r2, [pc, #404]	@ (80012bc <GPIO_PeriClkControl+0x218>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d106      	bne.n	800113a <GPIO_PeriClkControl+0x96>
			GPIOF_PCLK_EN();
 800112c:	4b5e      	ldr	r3, [pc, #376]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	4a5d      	ldr	r2, [pc, #372]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001132:	f043 0320 	orr.w	r3, r3, #32
 8001136:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001138:	e0ae      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOG)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a60      	ldr	r2, [pc, #384]	@ (80012c0 <GPIO_PeriClkControl+0x21c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d106      	bne.n	8001150 <GPIO_PeriClkControl+0xac>
			GPIOG_PCLK_EN();
 8001142:	4b59      	ldr	r3, [pc, #356]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a58      	ldr	r2, [pc, #352]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800114e:	e0a3      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOH)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a5c      	ldr	r2, [pc, #368]	@ (80012c4 <GPIO_PeriClkControl+0x220>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d106      	bne.n	8001166 <GPIO_PeriClkControl+0xc2>
			GPIOH_PCLK_EN();
 8001158:	4b53      	ldr	r3, [pc, #332]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115c:	4a52      	ldr	r2, [pc, #328]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 800115e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001162:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001164:	e098      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a57      	ldr	r2, [pc, #348]	@ (80012c8 <GPIO_PeriClkControl+0x224>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d106      	bne.n	800117c <GPIO_PeriClkControl+0xd8>
			GPIOI_PCLK_EN();
 800116e:	4b4e      	ldr	r3, [pc, #312]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a4d      	ldr	r2, [pc, #308]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800117a:	e08d      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOJ)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a53      	ldr	r2, [pc, #332]	@ (80012cc <GPIO_PeriClkControl+0x228>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d106      	bne.n	8001192 <GPIO_PeriClkControl+0xee>
			GPIOJ_PCLK_EN();
 8001184:	4b48      	ldr	r3, [pc, #288]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001188:	4a47      	ldr	r2, [pc, #284]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800118e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001190:	e082      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOK)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4e      	ldr	r2, [pc, #312]	@ (80012d0 <GPIO_PeriClkControl+0x22c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d17e      	bne.n	8001298 <GPIO_PeriClkControl+0x1f4>
			GPIOK_PCLK_EN();
 800119a:	4b43      	ldr	r3, [pc, #268]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a42      	ldr	r2, [pc, #264]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80011a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80011a6:	e077      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		if (pGPIOx == GPIOA)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a3e      	ldr	r2, [pc, #248]	@ (80012a4 <GPIO_PeriClkControl+0x200>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d106      	bne.n	80011be <GPIO_PeriClkControl+0x11a>
			GPIOA_PCLK_DI();
 80011b0:	4b3d      	ldr	r3, [pc, #244]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b4:	4a3c      	ldr	r2, [pc, #240]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80011b6:	f023 0301 	bic.w	r3, r3, #1
 80011ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80011bc:	e06c      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOB)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a3a      	ldr	r2, [pc, #232]	@ (80012ac <GPIO_PeriClkControl+0x208>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d106      	bne.n	80011d4 <GPIO_PeriClkControl+0x130>
			GPIOB_PCLK_DI();
 80011c6:	4b38      	ldr	r3, [pc, #224]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a37      	ldr	r2, [pc, #220]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80011cc:	f023 0302 	bic.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80011d2:	e061      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOC)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a36      	ldr	r2, [pc, #216]	@ (80012b0 <GPIO_PeriClkControl+0x20c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d106      	bne.n	80011ea <GPIO_PeriClkControl+0x146>
			GPIOC_PCLK_DI();
 80011dc:	4b32      	ldr	r3, [pc, #200]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	4a31      	ldr	r2, [pc, #196]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80011e8:	e056      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOD)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a31      	ldr	r2, [pc, #196]	@ (80012b4 <GPIO_PeriClkControl+0x210>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d106      	bne.n	8001200 <GPIO_PeriClkControl+0x15c>
			GPIOD_PCLK_DI();
 80011f2:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a2c      	ldr	r2, [pc, #176]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 80011f8:	f023 0308 	bic.w	r3, r3, #8
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80011fe:	e04b      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a2d      	ldr	r2, [pc, #180]	@ (80012b8 <GPIO_PeriClkControl+0x214>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d106      	bne.n	8001216 <GPIO_PeriClkControl+0x172>
			GPIOE_PCLK_DI();
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120c:	4a26      	ldr	r2, [pc, #152]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 800120e:	f023 0310 	bic.w	r3, r3, #16
 8001212:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001214:	e040      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a28      	ldr	r2, [pc, #160]	@ (80012bc <GPIO_PeriClkControl+0x218>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d106      	bne.n	800122c <GPIO_PeriClkControl+0x188>
			GPIOF_PCLK_DI();
 800121e:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a21      	ldr	r2, [pc, #132]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001224:	f023 0320 	bic.w	r3, r3, #32
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800122a:	e035      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOG)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a24      	ldr	r2, [pc, #144]	@ (80012c0 <GPIO_PeriClkControl+0x21c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d106      	bne.n	8001242 <GPIO_PeriClkControl+0x19e>
			GPIOG_PCLK_DI();
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001238:	4a1b      	ldr	r2, [pc, #108]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 800123a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800123e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001240:	e02a      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOH)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <GPIO_PeriClkControl+0x220>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d106      	bne.n	8001258 <GPIO_PeriClkControl+0x1b4>
			GPIOH_PCLK_DI();
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a16      	ldr	r2, [pc, #88]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001250:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001256:	e01f      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOI)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a1b      	ldr	r2, [pc, #108]	@ (80012c8 <GPIO_PeriClkControl+0x224>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d106      	bne.n	800126e <GPIO_PeriClkControl+0x1ca>
			GPIOI_PCLK_DI();
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	4a10      	ldr	r2, [pc, #64]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001266:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800126a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800126c:	e014      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOJ)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a16      	ldr	r2, [pc, #88]	@ (80012cc <GPIO_PeriClkControl+0x228>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d106      	bne.n	8001284 <GPIO_PeriClkControl+0x1e0>
			GPIOJ_PCLK_DI();
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a0b      	ldr	r2, [pc, #44]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 800127c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001282:	e009      	b.n	8001298 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <GPIO_PeriClkControl+0x22c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d105      	bne.n	8001298 <GPIO_PeriClkControl+0x1f4>
			GPIOK_PCLK_DI();
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001290:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <GPIO_PeriClkControl+0x204>)
 8001292:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001296:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40021400 	.word	0x40021400
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40021c00 	.word	0x40021c00
 80012c8:	40022000 	.word	0x40022000
 80012cc:	40022400 	.word	0x40022400
 80012d0:	40022800 	.word	0x40022800

080012d4 <GPIO_Init>:
		SYSCFG_PCLK_DI();
	}
}

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

	// Enable the peripheral clock, so that it is not required by the user to manually write it.
	GPIO_PeriClkControl(pGPIOHandle->pGPIOx, ENABLE);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fede 	bl	80010a4 <GPIO_PeriClkControl>

	uint32_t temp = 0; //temporary register
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

	//1. Configure the mode of GPIO pin

	if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	795b      	ldrb	r3, [r3, #5]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d820      	bhi.n	8001336 <GPIO_Init+0x62>
	{
		// Non interrupt mode
		temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	795b      	ldrb	r3, [r3, #5]
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	791b      	ldrb	r3, [r3, #4]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2* pGPIOHandle->GPIOPinConfig.GPIO_PinNumber)); // Clearing the required bits to avoid manipulation while setting them below.
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	791b      	ldrb	r3, [r3, #4]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2103      	movs	r1, #3
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	400a      	ands	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6819      	ldr	r1, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	e0ec      	b.n	8001510 <GPIO_Init+0x23c>

	else
	{
		// Whenever the Pin is in Interupt mode, it requires some input, hence the pin set to input mode .

		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2* pGPIOHandle->GPIOPinConfig.GPIO_PinNumber));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2103      	movs	r1, #3
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	4619      	mov	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	400a      	ands	r2, r1
 8001352:	601a      	str	r2, [r3, #0]

		// Non interrupt mode
		if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	795b      	ldrb	r3, [r3, #5]
 8001358:	2b04      	cmp	r3, #4
 800135a:	d117      	bne.n	800138c <GPIO_Init+0xb8>
		{
			// Configure the FTSR

			EXTI->EXTI_FTSR |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 800135c:	4b51      	ldr	r3, [pc, #324]	@ (80014a4 <GPIO_Init+0x1d0>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	7912      	ldrb	r2, [r2, #4]
 8001364:	4611      	mov	r1, r2
 8001366:	2201      	movs	r2, #1
 8001368:	408a      	lsls	r2, r1
 800136a:	4611      	mov	r1, r2
 800136c:	4a4d      	ldr	r2, [pc, #308]	@ (80014a4 <GPIO_Init+0x1d0>)
 800136e:	430b      	orrs	r3, r1
 8001370:	60d3      	str	r3, [r2, #12]

			// clear RTSR to be sure
			EXTI->EXTI_RTSR &= ~( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 8001372:	4b4c      	ldr	r3, [pc, #304]	@ (80014a4 <GPIO_Init+0x1d0>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	7912      	ldrb	r2, [r2, #4]
 800137a:	4611      	mov	r1, r2
 800137c:	2201      	movs	r2, #1
 800137e:	408a      	lsls	r2, r1
 8001380:	43d2      	mvns	r2, r2
 8001382:	4611      	mov	r1, r2
 8001384:	4a47      	ldr	r2, [pc, #284]	@ (80014a4 <GPIO_Init+0x1d0>)
 8001386:	400b      	ands	r3, r1
 8001388:	6093      	str	r3, [r2, #8]
 800138a:	e035      	b.n	80013f8 <GPIO_Init+0x124>
		}
		else if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	795b      	ldrb	r3, [r3, #5]
 8001390:	2b05      	cmp	r3, #5
 8001392:	d117      	bne.n	80013c4 <GPIO_Init+0xf0>
		{
			// Configure the RTSR
			EXTI->EXTI_RTSR |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 8001394:	4b43      	ldr	r3, [pc, #268]	@ (80014a4 <GPIO_Init+0x1d0>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	7912      	ldrb	r2, [r2, #4]
 800139c:	4611      	mov	r1, r2
 800139e:	2201      	movs	r2, #1
 80013a0:	408a      	lsls	r2, r1
 80013a2:	4611      	mov	r1, r2
 80013a4:	4a3f      	ldr	r2, [pc, #252]	@ (80014a4 <GPIO_Init+0x1d0>)
 80013a6:	430b      	orrs	r3, r1
 80013a8:	6093      	str	r3, [r2, #8]

			// clear FTSR to be sure
			EXTI->EXTI_FTSR &= ~( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 80013aa:	4b3e      	ldr	r3, [pc, #248]	@ (80014a4 <GPIO_Init+0x1d0>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	7912      	ldrb	r2, [r2, #4]
 80013b2:	4611      	mov	r1, r2
 80013b4:	2201      	movs	r2, #1
 80013b6:	408a      	lsls	r2, r1
 80013b8:	43d2      	mvns	r2, r2
 80013ba:	4611      	mov	r1, r2
 80013bc:	4a39      	ldr	r2, [pc, #228]	@ (80014a4 <GPIO_Init+0x1d0>)
 80013be:	400b      	ands	r3, r1
 80013c0:	60d3      	str	r3, [r2, #12]
 80013c2:	e019      	b.n	80013f8 <GPIO_Init+0x124>
		}
		else if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	795b      	ldrb	r3, [r3, #5]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d115      	bne.n	80013f8 <GPIO_Init+0x124>
		{
			// Configure both FTSR and RTSR
			EXTI->EXTI_FTSR |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 80013cc:	4b35      	ldr	r3, [pc, #212]	@ (80014a4 <GPIO_Init+0x1d0>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	7912      	ldrb	r2, [r2, #4]
 80013d4:	4611      	mov	r1, r2
 80013d6:	2201      	movs	r2, #1
 80013d8:	408a      	lsls	r2, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	4a31      	ldr	r2, [pc, #196]	@ (80014a4 <GPIO_Init+0x1d0>)
 80013de:	430b      	orrs	r3, r1
 80013e0:	60d3      	str	r3, [r2, #12]

			// Set RTSR as well
			EXTI->EXTI_RTSR |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 80013e2:	4b30      	ldr	r3, [pc, #192]	@ (80014a4 <GPIO_Init+0x1d0>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	7912      	ldrb	r2, [r2, #4]
 80013ea:	4611      	mov	r1, r2
 80013ec:	2201      	movs	r2, #1
 80013ee:	408a      	lsls	r2, r1
 80013f0:	4611      	mov	r1, r2
 80013f2:	4a2c      	ldr	r2, [pc, #176]	@ (80014a4 <GPIO_Init+0x1d0>)
 80013f4:	430b      	orrs	r3, r1
 80013f6:	6093      	str	r3, [r2, #8]
		}

		// COnfigure the GPIO port selection SYSCFG_EXTICR )

		uint8_t temp1 = pGPIOHandle->GPIOPinConfig.GPIO_PinNumber / 4;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	791b      	ldrb	r3, [r3, #4]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIOPinConfig.GPIO_PinNumber % 4;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	791b      	ldrb	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle ->pGPIOx);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a26      	ldr	r2, [pc, #152]	@ (80014a8 <GPIO_Init+0x1d4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d05f      	beq.n	80014d4 <GPIO_Init+0x200>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a24      	ldr	r2, [pc, #144]	@ (80014ac <GPIO_Init+0x1d8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d040      	beq.n	80014a0 <GPIO_Init+0x1cc>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a23      	ldr	r2, [pc, #140]	@ (80014b0 <GPIO_Init+0x1dc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d039      	beq.n	800149c <GPIO_Init+0x1c8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a21      	ldr	r2, [pc, #132]	@ (80014b4 <GPIO_Init+0x1e0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d032      	beq.n	8001498 <GPIO_Init+0x1c4>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a20      	ldr	r2, [pc, #128]	@ (80014b8 <GPIO_Init+0x1e4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d02b      	beq.n	8001494 <GPIO_Init+0x1c0>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a1e      	ldr	r2, [pc, #120]	@ (80014bc <GPIO_Init+0x1e8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d024      	beq.n	8001490 <GPIO_Init+0x1bc>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1d      	ldr	r2, [pc, #116]	@ (80014c0 <GPIO_Init+0x1ec>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d01d      	beq.n	800148c <GPIO_Init+0x1b8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1b      	ldr	r2, [pc, #108]	@ (80014c4 <GPIO_Init+0x1f0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d016      	beq.n	8001488 <GPIO_Init+0x1b4>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a1a      	ldr	r2, [pc, #104]	@ (80014c8 <GPIO_Init+0x1f4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00f      	beq.n	8001484 <GPIO_Init+0x1b0>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a18      	ldr	r2, [pc, #96]	@ (80014cc <GPIO_Init+0x1f8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d008      	beq.n	8001480 <GPIO_Init+0x1ac>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <GPIO_Init+0x1fc>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d101      	bne.n	800147c <GPIO_Init+0x1a8>
 8001478:	230a      	movs	r3, #10
 800147a:	e02c      	b.n	80014d6 <GPIO_Init+0x202>
 800147c:	2300      	movs	r3, #0
 800147e:	e02a      	b.n	80014d6 <GPIO_Init+0x202>
 8001480:	2309      	movs	r3, #9
 8001482:	e028      	b.n	80014d6 <GPIO_Init+0x202>
 8001484:	2308      	movs	r3, #8
 8001486:	e026      	b.n	80014d6 <GPIO_Init+0x202>
 8001488:	2307      	movs	r3, #7
 800148a:	e024      	b.n	80014d6 <GPIO_Init+0x202>
 800148c:	2306      	movs	r3, #6
 800148e:	e022      	b.n	80014d6 <GPIO_Init+0x202>
 8001490:	2305      	movs	r3, #5
 8001492:	e020      	b.n	80014d6 <GPIO_Init+0x202>
 8001494:	2304      	movs	r3, #4
 8001496:	e01e      	b.n	80014d6 <GPIO_Init+0x202>
 8001498:	2303      	movs	r3, #3
 800149a:	e01c      	b.n	80014d6 <GPIO_Init+0x202>
 800149c:	2302      	movs	r3, #2
 800149e:	e01a      	b.n	80014d6 <GPIO_Init+0x202>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e018      	b.n	80014d6 <GPIO_Init+0x202>
 80014a4:	40013c00 	.word	0x40013c00
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40021400 	.word	0x40021400
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40021c00 	.word	0x40021c00
 80014c8:	40022000 	.word	0x40022000
 80014cc:	40022400 	.word	0x40022400
 80014d0:	40022800 	.word	0x40022800
 80014d4:	2300      	movs	r3, #0
 80014d6:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTI_CR [temp1] |= (portcode << (4 * temp2) );
 80014d8:	4a66      	ldr	r2, [pc, #408]	@ (8001674 <GPIO_Init+0x3a0>)
 80014da:	7cfb      	ldrb	r3, [r7, #19]
 80014dc:	3302      	adds	r3, #2
 80014de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014e2:	7c79      	ldrb	r1, [r7, #17]
 80014e4:	7cbb      	ldrb	r3, [r7, #18]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	4961      	ldr	r1, [pc, #388]	@ (8001674 <GPIO_Init+0x3a0>)
 80014f0:	7cfb      	ldrb	r3, [r7, #19]
 80014f2:	4302      	orrs	r2, r0
 80014f4:	3302      	adds	r3, #2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Enable the EXTI interupt delivery using IMR
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 80014fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001678 <GPIO_Init+0x3a4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	7912      	ldrb	r2, [r2, #4]
 8001502:	4611      	mov	r1, r2
 8001504:	2201      	movs	r2, #1
 8001506:	408a      	lsls	r2, r1
 8001508:	4611      	mov	r1, r2
 800150a:	4a5b      	ldr	r2, [pc, #364]	@ (8001678 <GPIO_Init+0x3a4>)
 800150c:	430b      	orrs	r3, r1
 800150e:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

	//2. Configure the speed of GPIO pin

	temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	799b      	ldrb	r3, [r3, #6]
 8001518:	461a      	mov	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	791b      	ldrb	r3, [r3, #4]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2103      	movs	r1, #3
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	400a      	ands	r2, r1
 8001542:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6899      	ldr	r1, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	430a      	orrs	r2, r1
 8001552:	609a      	str	r2, [r3, #8]
	temp = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

	//3. Configure the pupd of GPIO pin
	temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	79db      	ldrb	r3, [r3, #7]
 800155c:	461a      	mov	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	791b      	ldrb	r3, [r3, #4]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	791b      	ldrb	r3, [r3, #4]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2103      	movs	r1, #3
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	4619      	mov	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	400a      	ands	r2, r1
 8001586:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68d9      	ldr	r1, [r3, #12]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	430a      	orrs	r2, r1
 8001596:	60da      	str	r2, [r3, #12]
	temp = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

	//4. Configure the optype of GPIO pin
	temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinOPType << (pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7a1b      	ldrb	r3, [r3, #8]
 80015a0:	461a      	mov	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	791b      	ldrb	r3, [r3, #4]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	791b      	ldrb	r3, [r3, #4]
 80015b6:	4619      	mov	r1, r3
 80015b8:	2301      	movs	r3, #1
 80015ba:	408b      	lsls	r3, r1
 80015bc:	43db      	mvns	r3, r3
 80015be:	4619      	mov	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	400a      	ands	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6859      	ldr	r1, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
	temp = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

	//5. Configure the Alternate functionality of GPIO pin
	if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_AF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	795b      	ldrb	r3, [r3, #5]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d143      	bne.n	800166c <GPIO_Init+0x398>
	{
		// if the mode if ALternate function, only then configure AF.

		uint32_t temp1 = pGPIOHandle-> GPIOPinConfig.GPIO_PinNumber % 8 ;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	791b      	ldrb	r3, [r3, #4]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	60fb      	str	r3, [r7, #12]

		if (pGPIOHandle-> GPIOPinConfig.GPIO_PinNumber < 8 )
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	791b      	ldrb	r3, [r3, #4]
 80015f2:	2b07      	cmp	r3, #7
 80015f4:	d81d      	bhi.n	8001632 <GPIO_Init+0x35e>
		{
			pGPIOHandle->pGPIOx->AFRL &= ~(0xf << (4 * temp1));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a1a      	ldr	r2, [r3, #32]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	210f      	movs	r1, #15
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	4619      	mov	r1, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	400a      	ands	r2, r1
 8001610:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle-> GPIOPinConfig.GPIO_PinAltFuncMode << (4 * temp1));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7a5b      	ldrb	r3, [r3, #9]
 800161c:	4619      	mov	r1, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	4619      	mov	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xf << (4 * temp1));
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle-> GPIOPinConfig.GPIO_PinAltFuncMode << (4 * temp1));
		}
	}

}
 8001630:	e01c      	b.n	800166c <GPIO_Init+0x398>
			pGPIOHandle->pGPIOx->AFRH &= ~(0xf << (4 * temp1));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	210f      	movs	r1, #15
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	4619      	mov	r1, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	400a      	ands	r2, r1
 800164c:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle-> GPIOPinConfig.GPIO_PinAltFuncMode << (4 * temp1));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7a5b      	ldrb	r3, [r3, #9]
 8001658:	4619      	mov	r1, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	4619      	mov	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800166c:	bf00      	nop
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40013800 	.word	0x40013800
 8001678:	40013c00 	.word	0x40013c00

0800167c <GPIO_ReadFromInputPin>:
	}

}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001 );
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	fa22 f303 	lsr.w	r3, r2, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
	return value;
 800169a:	7bfb      	ldrb	r3, [r7, #15]

}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
	...

080016a8 <RCC_GetPCLK1Value>:
uint8_t APB2_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80016ae:	4b25      	ldr	r3, [pc, #148]	@ (8001744 <RCC_GetPCLK1Value+0x9c>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 80016bc:	7a7b      	ldrb	r3, [r7, #9]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80016c2:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <RCC_GetPCLK1Value+0xa0>)
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	e00b      	b.n	80016e0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 80016c8:	7a7b      	ldrb	r3, [r7, #9]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d102      	bne.n	80016d4 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <RCC_GetPCLK1Value+0xa4>)
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e005      	b.n	80016e0 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 80016d4:	7a7b      	ldrb	r3, [r7, #9]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d102      	bne.n	80016e0 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80016da:	f000 f88d 	bl	80017f8 <RCC_GetPLLOutputClock>
 80016de:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <RCC_GetPCLK1Value+0x9c>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80016ee:	7a3b      	ldrb	r3, [r7, #8]
 80016f0:	2b07      	cmp	r3, #7
 80016f2:	d802      	bhi.n	80016fa <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	72fb      	strb	r3, [r7, #11]
 80016f8:	e005      	b.n	8001706 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80016fa:	7a3b      	ldrb	r3, [r7, #8]
 80016fc:	3b08      	subs	r3, #8
 80016fe:	4a14      	ldr	r2, [pc, #80]	@ (8001750 <RCC_GetPCLK1Value+0xa8>)
 8001700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001704:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <RCC_GetPCLK1Value+0x9c>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	0a9b      	lsrs	r3, r3, #10
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8001714:	7a3b      	ldrb	r3, [r7, #8]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d802      	bhi.n	8001720 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 800171a:	2301      	movs	r3, #1
 800171c:	72bb      	strb	r3, [r7, #10]
 800171e:	e004      	b.n	800172a <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8001720:	7a3b      	ldrb	r3, [r7, #8]
 8001722:	3b04      	subs	r3, #4
 8001724:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <RCC_GetPCLK1Value+0xac>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 800172a:	7afb      	ldrb	r3, [r7, #11]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001732:	7abb      	ldrb	r3, [r7, #10]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	607b      	str	r3, [r7, #4]

	return pclk1;
 800173a:	687b      	ldr	r3, [r7, #4]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800
 8001748:	00f42400 	.word	0x00f42400
 800174c:	007a1200 	.word	0x007a1200
 8001750:	2000000c 	.word	0x2000000c
 8001754:	2000001c 	.word	0x2000001c

08001758 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8001762:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <RCC_GetPCLK2Value+0x8c>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8001770:	7a7b      	ldrb	r3, [r7, #9]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8001776:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <RCC_GetPCLK2Value+0x90>)
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e001      	b.n	8001780 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <RCC_GetPCLK2Value+0x94>)
 800177e:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8001780:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <RCC_GetPCLK2Value+0x8c>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b07      	cmp	r3, #7
 8001790:	d802      	bhi.n	8001798 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8001792:	2301      	movs	r3, #1
 8001794:	72fb      	strb	r3, [r7, #11]
 8001796:	e005      	b.n	80017a4 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b08      	subs	r3, #8
 800179c:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <RCC_GetPCLK2Value+0x98>)
 800179e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a2:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <RCC_GetPCLK2Value+0x8c>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	0b5b      	lsrs	r3, r3, #13
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d802      	bhi.n	80017bc <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 80017b6:	2301      	movs	r3, #1
 80017b8:	72bb      	strb	r3, [r7, #10]
 80017ba:	e004      	b.n	80017c6 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b04      	subs	r3, #4
 80017c0:	4a0c      	ldr	r2, [pc, #48]	@ (80017f4 <RCC_GetPCLK2Value+0x9c>)
 80017c2:	5cd3      	ldrb	r3, [r2, r3]
 80017c4:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 80017c6:	7afb      	ldrb	r3, [r7, #11]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80017ce:	7abb      	ldrb	r3, [r7, #10]
 80017d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d4:	603b      	str	r3, [r7, #0]

	return pclk2;
 80017d6:	683b      	ldr	r3, [r7, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	00f42400 	.word	0x00f42400
 80017ec:	007a1200 	.word	0x007a1200
 80017f0:	2000000c 	.word	0x2000000c
 80017f4:	2000001c 	.word	0x2000001c

080017f8 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

	return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <USART_Init>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of CR1******************************************/

	//Code to enable the Clock for given USART peripheral
	USART_PeriClkControl(pUSARTHandle->pUSARTx, ENABLE);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2101      	movs	r1, #1
 8001818:	4618      	mov	r0, r3
 800181a:	f000 f8b9 	bl	8001990 <USART_PeriClkControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	791b      	ldrb	r3, [r3, #4]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d104      	bne.n	8001830 <USART_Init+0x2a>
	{
		//code to enable the Receiver bit field
		tempreg|= (1 << USARTx_CR1_RE);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	e010      	b.n	8001852 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	791b      	ldrb	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d104      	bne.n	8001842 <USART_Init+0x3c>
	{
		//code to enable the Transmitter bit field
		tempreg |= ( 1 << USARTx_CR1_TE );
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	e007      	b.n	8001852 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	791b      	ldrb	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d103      	bne.n	8001852 <USART_Init+0x4c>
	{
		//to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USARTx_CR1_RE) | ( 1 << USARTx_CR1_TE) );
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f043 030c 	orr.w	r3, r3, #12
 8001850:	60fb      	str	r3, [r7, #12]
	}

	//to configure the Word length configuration item
	/* As I am focusing only on 8 bit and 9 bit word length, M0 is not required. In case of further requirement it can added */

	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USARTx_CR1_M1 ;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7b5b      	ldrb	r3, [r3, #13]
 8001856:	071b      	lsls	r3, r3, #28
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]


	//Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7b9b      	ldrb	r3, [r3, #14]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d104      	bne.n	8001870 <USART_Init+0x6a>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USARTx_CR1_PCE);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	e00b      	b.n	8001888 <USART_Init+0x82>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7b9b      	ldrb	r3, [r3, #14]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d107      	bne.n	8001888 <USART_Init+0x82>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USARTx_CR1_PCE);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800187e:	60fb      	str	r3, [r7, #12]

		//Implement the code to enable ODD parity
		tempreg |= ( 1 << USARTx_CR1_PS);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001886:	60fb      	str	r3, [r7, #12]

	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	601a      	str	r2, [r3, #0]

	/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USARTx_CR2_STOP;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7b1b      	ldrb	r3, [r3, #12]
 8001898:	031b      	lsls	r3, r3, #12
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	605a      	str	r2, [r3, #4]

	/******************************** Configuration of CR3******************************************/

	tempreg=0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7bdb      	ldrb	r3, [r3, #15]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d104      	bne.n	80018be <USART_Init+0xb8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USARTx_CR3_CTSE);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e014      	b.n	80018e8 <USART_Init+0xe2>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7bdb      	ldrb	r3, [r3, #15]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d104      	bne.n	80018d0 <USART_Init+0xca>
	{
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USARTx_CR3_RTSE);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e00b      	b.n	80018e8 <USART_Init+0xe2>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7bdb      	ldrb	r3, [r3, #15]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d107      	bne.n	80018e8 <USART_Init+0xe2>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USARTx_CR3_CTSE);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018de:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USARTx_CR3_RTSE);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e6:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	609a      	str	r2, [r3, #8]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f000 f804 	bl	8001908 <USART_SetBaudRate>

}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <USART_SetBaudRate>:
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a1b      	ldr	r2, [pc, #108]	@ (8001988 <USART_SetBaudRate+0x80>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d003      	beq.n	8001926 <USART_SetBaudRate+0x1e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a1a      	ldr	r2, [pc, #104]	@ (800198c <USART_SetBaudRate+0x84>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d103      	bne.n	800192e <USART_SetBaudRate+0x26>
	{
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 8001926:	f7ff ff17 	bl	8001758 <RCC_GetPCLK2Value>
 800192a:	61f8      	str	r0, [r7, #28]
 800192c:	e002      	b.n	8001934 <USART_SetBaudRate+0x2c>
	}else
	{
		PCLKx = RCC_GetPCLK1Value();
 800192e:	f7ff febb 	bl	80016a8 <RCC_GetPCLK1Value>
 8001932:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USARTx_CR1_OVER8))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d015      	beq.n	800196c <USART_SetBaudRate+0x64>
	{
		//OVER8 = 1 , over sampling by 8


		usartdiv = ((2*PCLKx) / BaudRate);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005a      	lsls	r2, r3, #1
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
		M_part = (usartdiv >> 4) & 0xFFF;  // Extract mantissa
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001954:	613b      	str	r3, [r7, #16]
		F_part = (usartdiv & 0xF) >> 1;    // Extract fraction and shift right once
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]
		tempreg = (M_part << 4) | F_part;
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	e006      	b.n	800197a <USART_SetBaudRate+0x72>
	}else
	{
		//over sampling by 16
		usartdiv = (PCLKx / BaudRate);
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	fbb2 f3f3 	udiv	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
		tempreg= usartdiv;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	61bb      	str	r3, [r7, #24]

	}

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	60da      	str	r2, [r3, #12]
}
 8001980:	bf00      	nop
 8001982:	3720      	adds	r7, #32
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40011000 	.word	0x40011000
 800198c:	40011400 	.word	0x40011400

08001990 <USART_PeriClkControl>:

void USART_PeriClkControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d157      	bne.n	8001a52 <USART_PeriClkControl+0xc2>
	{
		if (pUSARTx == USART1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a59      	ldr	r2, [pc, #356]	@ (8001b0c <USART_PeriClkControl+0x17c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d106      	bne.n	80019b8 <USART_PeriClkControl+0x28>
		{
			USART1_PCLK_EN();
 80019aa:	4b59      	ldr	r3, [pc, #356]	@ (8001b10 <USART_PeriClkControl+0x180>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	4a58      	ldr	r2, [pc, #352]	@ (8001b10 <USART_PeriClkControl+0x180>)
 80019b0:	f043 0310 	orr.w	r3, r3, #16
 80019b4:	6453      	str	r3, [r2, #68]	@ 0x44
		else
		{
			// Do nothing
		}
	}
}
 80019b6:	e0a3      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == USART2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a56      	ldr	r2, [pc, #344]	@ (8001b14 <USART_PeriClkControl+0x184>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d106      	bne.n	80019ce <USART_PeriClkControl+0x3e>
			USART2_PCLK_EN();
 80019c0:	4b53      	ldr	r3, [pc, #332]	@ (8001b10 <USART_PeriClkControl+0x180>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	4a52      	ldr	r2, [pc, #328]	@ (8001b10 <USART_PeriClkControl+0x180>)
 80019c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ca:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80019cc:	e098      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == USART3)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a51      	ldr	r2, [pc, #324]	@ (8001b18 <USART_PeriClkControl+0x188>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d106      	bne.n	80019e4 <USART_PeriClkControl+0x54>
			USART3_PCLK_EN();
 80019d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001b10 <USART_PeriClkControl+0x180>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a4d      	ldr	r2, [pc, #308]	@ (8001b10 <USART_PeriClkControl+0x180>)
 80019dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80019e2:	e08d      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == UART4)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a4d      	ldr	r2, [pc, #308]	@ (8001b1c <USART_PeriClkControl+0x18c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d106      	bne.n	80019fa <USART_PeriClkControl+0x6a>
			UART4_PCLK_EN();
 80019ec:	4b48      	ldr	r3, [pc, #288]	@ (8001b10 <USART_PeriClkControl+0x180>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	4a47      	ldr	r2, [pc, #284]	@ (8001b10 <USART_PeriClkControl+0x180>)
 80019f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80019f6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80019f8:	e082      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == UART5)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a48      	ldr	r2, [pc, #288]	@ (8001b20 <USART_PeriClkControl+0x190>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d106      	bne.n	8001a10 <USART_PeriClkControl+0x80>
			UART5_PCLK_EN();
 8001a02:	4b43      	ldr	r3, [pc, #268]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a42      	ldr	r2, [pc, #264]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a0e:	e077      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == USART6)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a44      	ldr	r2, [pc, #272]	@ (8001b24 <USART_PeriClkControl+0x194>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d106      	bne.n	8001a26 <USART_PeriClkControl+0x96>
			USART6_PCLK_EN();
 8001a18:	4b3d      	ldr	r3, [pc, #244]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a1e:	f043 0320 	orr.w	r3, r3, #32
 8001a22:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001a24:	e06c      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == UART7)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a3f      	ldr	r2, [pc, #252]	@ (8001b28 <USART_PeriClkControl+0x198>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d106      	bne.n	8001a3c <USART_PeriClkControl+0xac>
			UART7_PCLK_EN();
 8001a2e:	4b38      	ldr	r3, [pc, #224]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	4a37      	ldr	r2, [pc, #220]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a38:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a3a:	e061      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == UART8)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b2c <USART_PeriClkControl+0x19c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d15d      	bne.n	8001b00 <USART_PeriClkControl+0x170>
			UART8_PCLK_EN();
 8001a44:	4b32      	ldr	r3, [pc, #200]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a48:	4a31      	ldr	r2, [pc, #196]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a4e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a50:	e056      	b.n	8001b00 <USART_PeriClkControl+0x170>
		if (pUSARTx == USART1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a2d      	ldr	r2, [pc, #180]	@ (8001b0c <USART_PeriClkControl+0x17c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d106      	bne.n	8001a68 <USART_PeriClkControl+0xd8>
			USART1_PCLK_DI();
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a60:	f023 0310 	bic.w	r3, r3, #16
 8001a64:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001a66:	e04b      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == USART2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8001b14 <USART_PeriClkControl+0x184>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d106      	bne.n	8001a7e <USART_PeriClkControl+0xee>
			USART2_PCLK_DI();
 8001a70:	4b27      	ldr	r3, [pc, #156]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	4a26      	ldr	r2, [pc, #152]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a76:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001a7a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a7c:	e040      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == USART3)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a25      	ldr	r2, [pc, #148]	@ (8001b18 <USART_PeriClkControl+0x188>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d106      	bne.n	8001a94 <USART_PeriClkControl+0x104>
			USART3_PCLK_DI();
 8001a86:	4b22      	ldr	r3, [pc, #136]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4a21      	ldr	r2, [pc, #132]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a90:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a92:	e035      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == UART4)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a21      	ldr	r2, [pc, #132]	@ (8001b1c <USART_PeriClkControl+0x18c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d106      	bne.n	8001aaa <USART_PeriClkControl+0x11a>
			UART4_PCLK_DI();
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001aa2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001aa6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001aa8:	e02a      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == UART5)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a1c      	ldr	r2, [pc, #112]	@ (8001b20 <USART_PeriClkControl+0x190>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d106      	bne.n	8001ac0 <USART_PeriClkControl+0x130>
			UART5_PCLK_DI();
 8001ab2:	4b17      	ldr	r3, [pc, #92]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	4a16      	ldr	r2, [pc, #88]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001ab8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001abc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001abe:	e01f      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == USART6)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a18      	ldr	r2, [pc, #96]	@ (8001b24 <USART_PeriClkControl+0x194>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d106      	bne.n	8001ad6 <USART_PeriClkControl+0x146>
			USART6_PCLK_DI();
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001acc:	4a10      	ldr	r2, [pc, #64]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001ace:	f023 0320 	bic.w	r3, r3, #32
 8001ad2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001ad4:	e014      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == UART7)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a13      	ldr	r2, [pc, #76]	@ (8001b28 <USART_PeriClkControl+0x198>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d106      	bne.n	8001aec <USART_PeriClkControl+0x15c>
			UART7_PCLK_DI();
 8001ade:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001ae4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001ae8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001aea:	e009      	b.n	8001b00 <USART_PeriClkControl+0x170>
		else if (pUSARTx == UART8)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a0f      	ldr	r2, [pc, #60]	@ (8001b2c <USART_PeriClkControl+0x19c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d105      	bne.n	8001b00 <USART_PeriClkControl+0x170>
			UART8_PCLK_DI();
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <USART_PeriClkControl+0x180>)
 8001afa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001afe:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40011000 	.word	0x40011000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40004400 	.word	0x40004400
 8001b18:	40004800 	.word	0x40004800
 8001b1c:	40004c00 	.word	0x40004c00
 8001b20:	40005000 	.word	0x40005000
 8001b24:	40011400 	.word	0x40011400
 8001b28:	40007800 	.word	0x40007800
 8001b2c:	40007c00 	.word	0x40007c00

08001b30 <USART_PeripheralControl>:
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d106      	bne.n	8001b50 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USARTx_CR1_UE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]

	else
	{
		pUSARTx->CR1 &= ~(1 << USARTx_CR1_UE);
	}
}
 8001b4e:	e005      	b.n	8001b5c <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USARTx_CR1_UE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 0201 	bic.w	r2, r3, #1
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	601a      	str	r2, [r3, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
	...

08001b68 <USART_IRQConfig>:

void USART_IRQConfig(uint8_t IRQNumber, uint32_t IRQ_Priority, uint8_t EnOrDi)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71bb      	strb	r3, [r7, #6]
	// 1. ENABLE or Disable the the interupt in processor(NVIC)
	if (EnOrDi == ENABLE){
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d14e      	bne.n	8001c1c <USART_IRQConfig+0xb4>
		//Check is the provided IRQ number is well within the range (In ths board, we have 7 registers, but considering only till 127 as the IRQ numbers are only till 109)
		if (IRQNumber <= 31)
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2b1f      	cmp	r3, #31
 8001b82:	d80a      	bhi.n	8001b9a <USART_IRQConfig+0x32>
		{
			// Program ISER0 register
			*NVIC_ISER0_BASE_ADDR |= (1 << IRQNumber);
 8001b84:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf8 <USART_IRQConfig+0x190>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	79fa      	ldrb	r2, [r7, #7]
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b90:	4611      	mov	r1, r2
 8001b92:	4a59      	ldr	r2, [pc, #356]	@ (8001cf8 <USART_IRQConfig+0x190>)
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e08e      	b.n	8001cb8 <USART_IRQConfig+0x150>
		}
		else if ((IRQNumber > 31) && (IRQNumber <64)) // IRQ number 32 to 63
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b1f      	cmp	r3, #31
 8001b9e:	d90f      	bls.n	8001bc0 <USART_IRQConfig+0x58>
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ba4:	d80c      	bhi.n	8001bc0 <USART_IRQConfig+0x58>
		{
			// Program ISER1 register
			*NVIC_ISER1_BASE_ADDR |= (1 << (IRQNumber % 32));
 8001ba6:	4b55      	ldr	r3, [pc, #340]	@ (8001cfc <USART_IRQConfig+0x194>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	79fa      	ldrb	r2, [r7, #7]
 8001bac:	f002 021f 	and.w	r2, r2, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4a50      	ldr	r2, [pc, #320]	@ (8001cfc <USART_IRQConfig+0x194>)
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e07b      	b.n	8001cb8 <USART_IRQConfig+0x150>
		}
		else if ((IRQNumber >= 64) && (IRQNumber <96)) // IRQ number 64 to 95
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bc4:	d90f      	bls.n	8001be6 <USART_IRQConfig+0x7e>
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2b5f      	cmp	r3, #95	@ 0x5f
 8001bca:	d80c      	bhi.n	8001be6 <USART_IRQConfig+0x7e>
		{
			// Program ISER2 register
			*NVIC_ISER2_BASE_ADDR |= (1 << (IRQNumber % 64));
 8001bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8001d00 <USART_IRQConfig+0x198>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	79fa      	ldrb	r2, [r7, #7]
 8001bd2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4a48      	ldr	r2, [pc, #288]	@ (8001d00 <USART_IRQConfig+0x198>)
 8001be0:	430b      	orrs	r3, r1
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	e068      	b.n	8001cb8 <USART_IRQConfig+0x150>
		}
		else if ((IRQNumber >= 96) && (IRQNumber <128)) //IRQ number from 96 to 127
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	2b5f      	cmp	r3, #95	@ 0x5f
 8001bea:	d965      	bls.n	8001cb8 <USART_IRQConfig+0x150>
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db61      	blt.n	8001cb8 <USART_IRQConfig+0x150>
		{
			// Program ISER3 register
			*NVIC_ISER3_BASE_ADDR |= (1 << (IRQNumber % 96));
 8001bf4:	4b43      	ldr	r3, [pc, #268]	@ (8001d04 <USART_IRQConfig+0x19c>)
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	79fa      	ldrb	r2, [r7, #7]
 8001bfa:	4b43      	ldr	r3, [pc, #268]	@ (8001d08 <USART_IRQConfig+0x1a0>)
 8001bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8001c00:	0999      	lsrs	r1, r3, #6
 8001c02:	460b      	mov	r3, r1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	440b      	add	r3, r1
 8001c08:	015b      	lsls	r3, r3, #5
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2301      	movs	r3, #1
 8001c12:	4093      	lsls	r3, r2
 8001c14:	4a3b      	ldr	r2, [pc, #236]	@ (8001d04 <USART_IRQConfig+0x19c>)
 8001c16:	4303      	orrs	r3, r0
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e04d      	b.n	8001cb8 <USART_IRQConfig+0x150>
			//Do nothing
		}
	}
	else{
		//Check is the provided IRQ number is well within the range (In ths board, we have only 1 register)
		if (IRQNumber <= 31)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b1f      	cmp	r3, #31
 8001c20:	d80a      	bhi.n	8001c38 <USART_IRQConfig+0xd0>
		{
			// Program ICER register
			*NVIC_ICER0_BASE_ADDR |= (1 << IRQNumber);
 8001c22:	4b3a      	ldr	r3, [pc, #232]	@ (8001d0c <USART_IRQConfig+0x1a4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	79fa      	ldrb	r2, [r7, #7]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4a36      	ldr	r2, [pc, #216]	@ (8001d0c <USART_IRQConfig+0x1a4>)
 8001c32:	430b      	orrs	r3, r1
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e03f      	b.n	8001cb8 <USART_IRQConfig+0x150>
		}
		else if ((IRQNumber > 31) && (IRQNumber <64)) // IRQ number 32 to 63
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b1f      	cmp	r3, #31
 8001c3c:	d90f      	bls.n	8001c5e <USART_IRQConfig+0xf6>
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c42:	d80c      	bhi.n	8001c5e <USART_IRQConfig+0xf6>
		{
			// Program ICER register
			*NVIC_ICER1_BASE_ADDR |= (1 << (IRQNumber % 32));
 8001c44:	4b32      	ldr	r3, [pc, #200]	@ (8001d10 <USART_IRQConfig+0x1a8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	79fa      	ldrb	r2, [r7, #7]
 8001c4a:	f002 021f 	and.w	r2, r2, #31
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f202 	lsl.w	r2, r1, r2
 8001c54:	4611      	mov	r1, r2
 8001c56:	4a2e      	ldr	r2, [pc, #184]	@ (8001d10 <USART_IRQConfig+0x1a8>)
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e02c      	b.n	8001cb8 <USART_IRQConfig+0x150>
		}
		else if ((IRQNumber >= 64) && (IRQNumber <96)) // IRQ number 64 to 95
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c62:	d90f      	bls.n	8001c84 <USART_IRQConfig+0x11c>
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2b5f      	cmp	r3, #95	@ 0x5f
 8001c68:	d80c      	bhi.n	8001c84 <USART_IRQConfig+0x11c>
		{
			// Program ICER register
			*NVIC_ICER2_BASE_ADDR |= (1 << (IRQNumber % 64));
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d14 <USART_IRQConfig+0x1ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001c74:	2101      	movs	r1, #1
 8001c76:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4a25      	ldr	r2, [pc, #148]	@ (8001d14 <USART_IRQConfig+0x1ac>)
 8001c7e:	430b      	orrs	r3, r1
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e019      	b.n	8001cb8 <USART_IRQConfig+0x150>
		}
		else if ((IRQNumber >= 96) && (IRQNumber <128)) //IRQ number from 96 to 127
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	2b5f      	cmp	r3, #95	@ 0x5f
 8001c88:	d916      	bls.n	8001cb8 <USART_IRQConfig+0x150>
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db12      	blt.n	8001cb8 <USART_IRQConfig+0x150>
		{
			// Program ICER register
			*NVIC_ICER3_BASE_ADDR |= (1 << (IRQNumber % 96));
 8001c92:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <USART_IRQConfig+0x1b0>)
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	79fa      	ldrb	r2, [r7, #7]
 8001c98:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <USART_IRQConfig+0x1a0>)
 8001c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c9e:	0999      	lsrs	r1, r3, #6
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	440b      	add	r3, r1
 8001ca6:	015b      	lsls	r3, r3, #5
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	2301      	movs	r3, #1
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	4a19      	ldr	r2, [pc, #100]	@ (8001d18 <USART_IRQConfig+0x1b0>)
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	6013      	str	r3, [r2, #0]
		}
	}

	//2. Set the priority for each IRQNumber

	uint8_t iprx = IRQNumber / 4;
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (iprx_section * 8) + (8 - NO_PR_BITS_IMPLEMENTED);
 8001cc6:	7bbb      	ldrb	r3, [r7, #14]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3304      	adds	r3, #4
 8001cce:	737b      	strb	r3, [r7, #13]

	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQ_Priority << shift_amount); // When dealing with pointers +1 will actually add +1*data type
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	009a      	lsls	r2, r3, #2
 8001cd4:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <USART_IRQConfig+0x1b4>)
 8001cd6:	4413      	add	r3, r2
 8001cd8:	6819      	ldr	r1, [r3, #0]
 8001cda:	7b7b      	ldrb	r3, [r7, #13]
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	0098      	lsls	r0, r3, #2
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <USART_IRQConfig+0x1b4>)
 8001ce6:	4403      	add	r3, r0
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]


}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000e104 	.word	0xe000e104
 8001d00:	e000e108 	.word	0xe000e108
 8001d04:	e000e10c 	.word	0xe000e10c
 8001d08:	aaaaaaab 	.word	0xaaaaaaab
 8001d0c:	e000e180 	.word	0xe000e180
 8001d10:	e000e184 	.word	0xe000e184
 8001d14:	e000e188 	.word	0xe000e188
 8001d18:	e000e18c 	.word	0xe000e18c
 8001d1c:	e000e400 	.word	0xe000e400

08001d20 <USART_IRQHandling>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USARTx_ISR_TC);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d32:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USARTx_CR1_TCIE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d3e:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d021      	beq.n	8001d8a <USART_IRQHandling+0x6a>
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01e      	beq.n	8001d8a <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d119      	bne.n	8001d8a <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d115      	bne.n	8001d8a <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->ISR &= ~( 1 << USARTx_ISR_TC);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d6c:	61da      	str	r2, [r3, #28]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]

				//Call the applicaton call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_TX_CMPLT);
 8001d82:	2100      	movs	r1, #0
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff f861 	bl	8000e4c <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USARTx_ISR_TXE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d94:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USARTx_CR1_TXEIE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da0:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d055      	beq.n	8001e54 <USART_IRQHandling+0x134>
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d052      	beq.n	8001e54 <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d14d      	bne.n	8001e54 <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d03d      	beq.n	8001e3c <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7b5b      	ldrb	r3, [r3, #13]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d129      	bne.n	8001e1c <USART_IRQHandling+0xfc>
				{
					//if 9BIT , load the DR with 2bytes masking the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	60fb      	str	r3, [r7, #12]

					//loading only first 9 bits , so we have to mask with the value 0x01FF
					pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ddc:	629a      	str	r2, [r3, #40]	@ 0x28

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7b9b      	ldrb	r3, [r3, #14]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10f      	bne.n	8001e06 <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so, 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	611a      	str	r2, [r3, #16]

						//Implement the code to decrement the length
						pUSARTHandle->TxLen -= 2;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	1e9a      	subs	r2, r3, #2
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
 8001e04:	e01a      	b.n	8001e3c <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so , 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	611a      	str	r2, [r3, #16]

						//Implement the code to decrement the length
						pUSARTHandle->TxLen -= 1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	619a      	str	r2, [r3, #24]
 8001e1a:	e00f      	b.n	8001e3c <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->TDR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	629a      	str	r2, [r3, #40]	@ 0x28

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	611a      	str	r2, [r3, #16]

					//Implement the code to decrement the length
					pUSARTHandle->TxLen -= 1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	1e5a      	subs	r2, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USARTx_CR1_TXEIE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e52:	601a      	str	r2, [r3, #0]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USARTx_ISR_RXNE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USARTx_CR1_RXNEIE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d073      	beq.n	8001f5a <USART_IRQHandling+0x23a>
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d070      	beq.n	8001f5a <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		//this interrupt is because of txe
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d16b      	bne.n	8001f5a <USART_IRQHandling+0x23a>
		{
			//TXE is set so send data
			if(pUSARTHandle->RxLen > 0)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d053      	beq.n	8001f32 <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7b5b      	ldrb	r3, [r3, #13]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d12f      	bne.n	8001ef2 <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7b9b      	ldrb	r3, [r3, #14]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d119      	bne.n	8001ece <USART_IRQHandling+0x1ae>
					{
						//No parity is used. so, all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->RDR  & (uint16_t)0x01FF);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eaa:	b292      	uxth	r2, r2
 8001eac:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	615a      	str	r2, [r3, #20]

						//Implement the code to decrement the length
						pUSARTHandle->RxLen -= 2;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	1e9a      	subs	r2, r3, #2
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	61da      	str	r2, [r3, #28]
 8001ecc:	e031      	b.n	8001f32 <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used. so, 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0xFF);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]

						 //Now increment the pRxBuffer
						 pUSARTHandle->pRxBuffer++;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	615a      	str	r2, [r3, #20]

						 //Implement the code to decrement the length
						 pUSARTHandle->RxLen -= 1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	1e5a      	subs	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	61da      	str	r2, [r3, #28]
 8001ef0:	e01f      	b.n	8001f32 <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7b9b      	ldrb	r3, [r3, #14]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d107      	bne.n	8001f0a <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0xFF);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	e009      	b.n	8001f1e <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0x7F);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	615a      	str	r2, [r3, #20]

					//Implement the code to decrement the length
					pUSARTHandle->RxLen -= 1;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	1e5a      	subs	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10f      	bne.n	8001f5a <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USARTx_CR1_RXNEIE );
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0220 	bic.w	r2, r2, #32
 8001f48:	601a      	str	r2, [r3, #0]
				pUSARTHandle->RxBusyState = USART_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8001f52:	2101      	movs	r1, #1
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7fe ff79 	bl	8000e4c <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USARTx_ISR_CTS);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f64:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR3
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USARTx_CR3_CTSE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f70:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USARTx_CR3_CTSIE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7c:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00e      	beq.n	8001fa2 <USART_IRQHandling+0x282>
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00b      	beq.n	8001fa2 <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->ISR &=  ~( 1 << USARTx_ISR_CTS);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	69da      	ldr	r2, [r3, #28]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f98:	61da      	str	r2, [r3, #28]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8001f9a:	2103      	movs	r1, #3
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7fe ff55 	bl	8000e4c <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USARTx_ISR_IDLE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USARTx_CR3_CTSE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb8:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <USART_IRQHandling+0x2ae>
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <USART_IRQHandling+0x2ae>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7fe ff3f 	bl	8000e4c <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->ISR & USARTx_ISR_ORE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USARTx_CR1_RXNEIE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0305 	and.w	r3, r3, #5
 8001fe4:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <USART_IRQHandling+0x2da>
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <USART_IRQHandling+0x2da>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8001ff2:	2107      	movs	r1, #7
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7fe ff29 	bl	8000e4c <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USARTx_CR3_EIE) ;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	613b      	str	r3, [r7, #16]

	if(temp2 )
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01e      	beq.n	800204a <USART_IRQHandling+0x32a>
	{
		temp1 = pUSARTHandle->pUSARTx->ISR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USARTx_ISR_FE))
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <USART_IRQHandling+0x306>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 800201e:	2105      	movs	r1, #5
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7fe ff13 	bl	8000e4c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USARTx_ISR_NF) )
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 8002030:	2106      	movs	r1, #6
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe ff0a 	bl	8000e4c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USARTx_ISR_ORE) )
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <USART_IRQHandling+0x32a>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8002042:	2107      	movs	r1, #7
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe ff01 	bl	8000e4c <USART_ApplicationEventCallback>
		}
	}


}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <USART_GetFlagStatus>:




uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t FlagName)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
	if(pUSARTx->ISR & FlagName)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
	//Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	e031      	b.n	80020ee <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_TXE_FLAG));
 800208a:	bf00      	nop
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2180      	movs	r1, #128	@ 0x80
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ffdd 	bl	8002052 <USART_GetFlagStatus>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f6      	beq.n	800208c <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	7b5b      	ldrb	r3, [r3, #13]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d118      	bne.n	80020d8 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020b8:	629a      	str	r2, [r3, #40]	@ 0x28

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	7b9b      	ldrb	r3, [r3, #14]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3301      	adds	r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	3301      	adds	r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	e00b      	b.n	80020e8 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	e007      	b.n	80020e8 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	629a      	str	r2, [r3, #40]	@ 0x28

			//Implement the code to increment the buffer address
			pTxBuffer++;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3301      	adds	r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3301      	adds	r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d3c9      	bcc.n	800208a <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_TC_FLAG));
 80020f6:	bf00      	nop
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2140      	movs	r1, #64	@ 0x40
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ffa7 	bl	8002052 <USART_GetFlagStatus>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f6      	beq.n	80020f8 <USART_SendData+0x80>
}
 800210a:	bf00      	nop
 800210c:	bf00      	nop
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <USART_ReceiveDataIT>:
 *
 * @Note              - Resolve all the TODOs

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002126:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d014      	beq.n	8002158 <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		(void)pUSARTHandle->pUSARTx->RDR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USARTx_CR1_RXNEIE);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0220 	orr.w	r2, r2, #32
 8002156:	601a      	str	r2, [r3, #0]

	}

	return rxstate;
 8002158:	7dfb      	ldrb	r3, [r7, #23]

}
 800215a:	4618      	mov	r0, r3
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <__cvt>:
 8002164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002168:	b088      	sub	sp, #32
 800216a:	2b00      	cmp	r3, #0
 800216c:	461d      	mov	r5, r3
 800216e:	4614      	mov	r4, r2
 8002170:	bfbc      	itt	lt
 8002172:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002176:	4614      	movlt	r4, r2
 8002178:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800217a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800217c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002180:	bfb6      	itet	lt
 8002182:	461d      	movlt	r5, r3
 8002184:	2300      	movge	r3, #0
 8002186:	232d      	movlt	r3, #45	@ 0x2d
 8002188:	7013      	strb	r3, [r2, #0]
 800218a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800218c:	f023 0820 	bic.w	r8, r3, #32
 8002190:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002194:	d005      	beq.n	80021a2 <__cvt+0x3e>
 8002196:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800219a:	d100      	bne.n	800219e <__cvt+0x3a>
 800219c:	3601      	adds	r6, #1
 800219e:	2302      	movs	r3, #2
 80021a0:	e000      	b.n	80021a4 <__cvt+0x40>
 80021a2:	2303      	movs	r3, #3
 80021a4:	aa07      	add	r2, sp, #28
 80021a6:	9204      	str	r2, [sp, #16]
 80021a8:	aa06      	add	r2, sp, #24
 80021aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80021ae:	e9cd 3600 	strd	r3, r6, [sp]
 80021b2:	4622      	mov	r2, r4
 80021b4:	462b      	mov	r3, r5
 80021b6:	f000 ff3f 	bl	8003038 <_dtoa_r>
 80021ba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80021be:	4607      	mov	r7, r0
 80021c0:	d119      	bne.n	80021f6 <__cvt+0x92>
 80021c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80021c4:	07db      	lsls	r3, r3, #31
 80021c6:	d50e      	bpl.n	80021e6 <__cvt+0x82>
 80021c8:	eb00 0906 	add.w	r9, r0, r6
 80021cc:	2200      	movs	r2, #0
 80021ce:	2300      	movs	r3, #0
 80021d0:	4620      	mov	r0, r4
 80021d2:	4629      	mov	r1, r5
 80021d4:	f7fe fcb0 	bl	8000b38 <__aeabi_dcmpeq>
 80021d8:	b108      	cbz	r0, 80021de <__cvt+0x7a>
 80021da:	f8cd 901c 	str.w	r9, [sp, #28]
 80021de:	2230      	movs	r2, #48	@ 0x30
 80021e0:	9b07      	ldr	r3, [sp, #28]
 80021e2:	454b      	cmp	r3, r9
 80021e4:	d31e      	bcc.n	8002224 <__cvt+0xc0>
 80021e6:	9b07      	ldr	r3, [sp, #28]
 80021e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80021ea:	1bdb      	subs	r3, r3, r7
 80021ec:	4638      	mov	r0, r7
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	b008      	add	sp, #32
 80021f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80021fa:	eb00 0906 	add.w	r9, r0, r6
 80021fe:	d1e5      	bne.n	80021cc <__cvt+0x68>
 8002200:	7803      	ldrb	r3, [r0, #0]
 8002202:	2b30      	cmp	r3, #48	@ 0x30
 8002204:	d10a      	bne.n	800221c <__cvt+0xb8>
 8002206:	2200      	movs	r2, #0
 8002208:	2300      	movs	r3, #0
 800220a:	4620      	mov	r0, r4
 800220c:	4629      	mov	r1, r5
 800220e:	f7fe fc93 	bl	8000b38 <__aeabi_dcmpeq>
 8002212:	b918      	cbnz	r0, 800221c <__cvt+0xb8>
 8002214:	f1c6 0601 	rsb	r6, r6, #1
 8002218:	f8ca 6000 	str.w	r6, [sl]
 800221c:	f8da 3000 	ldr.w	r3, [sl]
 8002220:	4499      	add	r9, r3
 8002222:	e7d3      	b.n	80021cc <__cvt+0x68>
 8002224:	1c59      	adds	r1, r3, #1
 8002226:	9107      	str	r1, [sp, #28]
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	e7d9      	b.n	80021e0 <__cvt+0x7c>

0800222c <__exponent>:
 800222c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800222e:	2900      	cmp	r1, #0
 8002230:	bfba      	itte	lt
 8002232:	4249      	neglt	r1, r1
 8002234:	232d      	movlt	r3, #45	@ 0x2d
 8002236:	232b      	movge	r3, #43	@ 0x2b
 8002238:	2909      	cmp	r1, #9
 800223a:	7002      	strb	r2, [r0, #0]
 800223c:	7043      	strb	r3, [r0, #1]
 800223e:	dd29      	ble.n	8002294 <__exponent+0x68>
 8002240:	f10d 0307 	add.w	r3, sp, #7
 8002244:	461d      	mov	r5, r3
 8002246:	270a      	movs	r7, #10
 8002248:	461a      	mov	r2, r3
 800224a:	fbb1 f6f7 	udiv	r6, r1, r7
 800224e:	fb07 1416 	mls	r4, r7, r6, r1
 8002252:	3430      	adds	r4, #48	@ 0x30
 8002254:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002258:	460c      	mov	r4, r1
 800225a:	2c63      	cmp	r4, #99	@ 0x63
 800225c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002260:	4631      	mov	r1, r6
 8002262:	dcf1      	bgt.n	8002248 <__exponent+0x1c>
 8002264:	3130      	adds	r1, #48	@ 0x30
 8002266:	1e94      	subs	r4, r2, #2
 8002268:	f803 1c01 	strb.w	r1, [r3, #-1]
 800226c:	1c41      	adds	r1, r0, #1
 800226e:	4623      	mov	r3, r4
 8002270:	42ab      	cmp	r3, r5
 8002272:	d30a      	bcc.n	800228a <__exponent+0x5e>
 8002274:	f10d 0309 	add.w	r3, sp, #9
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	42ac      	cmp	r4, r5
 800227c:	bf88      	it	hi
 800227e:	2300      	movhi	r3, #0
 8002280:	3302      	adds	r3, #2
 8002282:	4403      	add	r3, r0
 8002284:	1a18      	subs	r0, r3, r0
 8002286:	b003      	add	sp, #12
 8002288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800228a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800228e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002292:	e7ed      	b.n	8002270 <__exponent+0x44>
 8002294:	2330      	movs	r3, #48	@ 0x30
 8002296:	3130      	adds	r1, #48	@ 0x30
 8002298:	7083      	strb	r3, [r0, #2]
 800229a:	70c1      	strb	r1, [r0, #3]
 800229c:	1d03      	adds	r3, r0, #4
 800229e:	e7f1      	b.n	8002284 <__exponent+0x58>

080022a0 <_printf_float>:
 80022a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022a4:	b091      	sub	sp, #68	@ 0x44
 80022a6:	460c      	mov	r4, r1
 80022a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80022ac:	4616      	mov	r6, r2
 80022ae:	461f      	mov	r7, r3
 80022b0:	4605      	mov	r5, r0
 80022b2:	f000 fdc1 	bl	8002e38 <_localeconv_r>
 80022b6:	6803      	ldr	r3, [r0, #0]
 80022b8:	9308      	str	r3, [sp, #32]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f810 	bl	80002e0 <strlen>
 80022c0:	2300      	movs	r3, #0
 80022c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80022c4:	f8d8 3000 	ldr.w	r3, [r8]
 80022c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80022ca:	3307      	adds	r3, #7
 80022cc:	f023 0307 	bic.w	r3, r3, #7
 80022d0:	f103 0208 	add.w	r2, r3, #8
 80022d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80022d8:	f8d4 b000 	ldr.w	fp, [r4]
 80022dc:	f8c8 2000 	str.w	r2, [r8]
 80022e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80022e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80022e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80022ea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80022ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80022f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80022f6:	4b9d      	ldr	r3, [pc, #628]	@ (800256c <_printf_float+0x2cc>)
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	f7fe fc4e 	bl	8000b9c <__aeabi_dcmpun>
 8002300:	bb70      	cbnz	r0, 8002360 <_printf_float+0xc0>
 8002302:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002306:	4b99      	ldr	r3, [pc, #612]	@ (800256c <_printf_float+0x2cc>)
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	f7fe fc28 	bl	8000b60 <__aeabi_dcmple>
 8002310:	bb30      	cbnz	r0, 8002360 <_printf_float+0xc0>
 8002312:	2200      	movs	r2, #0
 8002314:	2300      	movs	r3, #0
 8002316:	4640      	mov	r0, r8
 8002318:	4649      	mov	r1, r9
 800231a:	f7fe fc17 	bl	8000b4c <__aeabi_dcmplt>
 800231e:	b110      	cbz	r0, 8002326 <_printf_float+0x86>
 8002320:	232d      	movs	r3, #45	@ 0x2d
 8002322:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002326:	4a92      	ldr	r2, [pc, #584]	@ (8002570 <_printf_float+0x2d0>)
 8002328:	4b92      	ldr	r3, [pc, #584]	@ (8002574 <_printf_float+0x2d4>)
 800232a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800232e:	bf94      	ite	ls
 8002330:	4690      	movls	r8, r2
 8002332:	4698      	movhi	r8, r3
 8002334:	2303      	movs	r3, #3
 8002336:	6123      	str	r3, [r4, #16]
 8002338:	f02b 0304 	bic.w	r3, fp, #4
 800233c:	6023      	str	r3, [r4, #0]
 800233e:	f04f 0900 	mov.w	r9, #0
 8002342:	9700      	str	r7, [sp, #0]
 8002344:	4633      	mov	r3, r6
 8002346:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002348:	4621      	mov	r1, r4
 800234a:	4628      	mov	r0, r5
 800234c:	f000 f9d4 	bl	80026f8 <_printf_common>
 8002350:	3001      	adds	r0, #1
 8002352:	f040 808f 	bne.w	8002474 <_printf_float+0x1d4>
 8002356:	f04f 30ff 	mov.w	r0, #4294967295
 800235a:	b011      	add	sp, #68	@ 0x44
 800235c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002360:	4642      	mov	r2, r8
 8002362:	464b      	mov	r3, r9
 8002364:	4640      	mov	r0, r8
 8002366:	4649      	mov	r1, r9
 8002368:	f7fe fc18 	bl	8000b9c <__aeabi_dcmpun>
 800236c:	b140      	cbz	r0, 8002380 <_printf_float+0xe0>
 800236e:	464b      	mov	r3, r9
 8002370:	2b00      	cmp	r3, #0
 8002372:	bfbc      	itt	lt
 8002374:	232d      	movlt	r3, #45	@ 0x2d
 8002376:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800237a:	4a7f      	ldr	r2, [pc, #508]	@ (8002578 <_printf_float+0x2d8>)
 800237c:	4b7f      	ldr	r3, [pc, #508]	@ (800257c <_printf_float+0x2dc>)
 800237e:	e7d4      	b.n	800232a <_printf_float+0x8a>
 8002380:	6863      	ldr	r3, [r4, #4]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002388:	d13f      	bne.n	800240a <_printf_float+0x16a>
 800238a:	2306      	movs	r3, #6
 800238c:	6063      	str	r3, [r4, #4]
 800238e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002392:	2200      	movs	r2, #0
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	9206      	str	r2, [sp, #24]
 8002398:	aa0e      	add	r2, sp, #56	@ 0x38
 800239a:	e9cd a204 	strd	sl, r2, [sp, #16]
 800239e:	aa0d      	add	r2, sp, #52	@ 0x34
 80023a0:	9203      	str	r2, [sp, #12]
 80023a2:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80023a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80023aa:	6863      	ldr	r3, [r4, #4]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4642      	mov	r2, r8
 80023b0:	464b      	mov	r3, r9
 80023b2:	4628      	mov	r0, r5
 80023b4:	910a      	str	r1, [sp, #40]	@ 0x28
 80023b6:	f7ff fed5 	bl	8002164 <__cvt>
 80023ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80023bc:	2947      	cmp	r1, #71	@ 0x47
 80023be:	4680      	mov	r8, r0
 80023c0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80023c2:	d128      	bne.n	8002416 <_printf_float+0x176>
 80023c4:	1cc8      	adds	r0, r1, #3
 80023c6:	db02      	blt.n	80023ce <_printf_float+0x12e>
 80023c8:	6863      	ldr	r3, [r4, #4]
 80023ca:	4299      	cmp	r1, r3
 80023cc:	dd40      	ble.n	8002450 <_printf_float+0x1b0>
 80023ce:	f1aa 0a02 	sub.w	sl, sl, #2
 80023d2:	fa5f fa8a 	uxtb.w	sl, sl
 80023d6:	3901      	subs	r1, #1
 80023d8:	4652      	mov	r2, sl
 80023da:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80023de:	910d      	str	r1, [sp, #52]	@ 0x34
 80023e0:	f7ff ff24 	bl	800222c <__exponent>
 80023e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80023e6:	1813      	adds	r3, r2, r0
 80023e8:	2a01      	cmp	r2, #1
 80023ea:	4681      	mov	r9, r0
 80023ec:	6123      	str	r3, [r4, #16]
 80023ee:	dc02      	bgt.n	80023f6 <_printf_float+0x156>
 80023f0:	6822      	ldr	r2, [r4, #0]
 80023f2:	07d2      	lsls	r2, r2, #31
 80023f4:	d501      	bpl.n	80023fa <_printf_float+0x15a>
 80023f6:	3301      	adds	r3, #1
 80023f8:	6123      	str	r3, [r4, #16]
 80023fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d09f      	beq.n	8002342 <_printf_float+0xa2>
 8002402:	232d      	movs	r3, #45	@ 0x2d
 8002404:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002408:	e79b      	b.n	8002342 <_printf_float+0xa2>
 800240a:	2947      	cmp	r1, #71	@ 0x47
 800240c:	d1bf      	bne.n	800238e <_printf_float+0xee>
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1bd      	bne.n	800238e <_printf_float+0xee>
 8002412:	2301      	movs	r3, #1
 8002414:	e7ba      	b.n	800238c <_printf_float+0xec>
 8002416:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800241a:	d9dc      	bls.n	80023d6 <_printf_float+0x136>
 800241c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002420:	d118      	bne.n	8002454 <_printf_float+0x1b4>
 8002422:	2900      	cmp	r1, #0
 8002424:	6863      	ldr	r3, [r4, #4]
 8002426:	dd0b      	ble.n	8002440 <_printf_float+0x1a0>
 8002428:	6121      	str	r1, [r4, #16]
 800242a:	b913      	cbnz	r3, 8002432 <_printf_float+0x192>
 800242c:	6822      	ldr	r2, [r4, #0]
 800242e:	07d0      	lsls	r0, r2, #31
 8002430:	d502      	bpl.n	8002438 <_printf_float+0x198>
 8002432:	3301      	adds	r3, #1
 8002434:	440b      	add	r3, r1
 8002436:	6123      	str	r3, [r4, #16]
 8002438:	65a1      	str	r1, [r4, #88]	@ 0x58
 800243a:	f04f 0900 	mov.w	r9, #0
 800243e:	e7dc      	b.n	80023fa <_printf_float+0x15a>
 8002440:	b913      	cbnz	r3, 8002448 <_printf_float+0x1a8>
 8002442:	6822      	ldr	r2, [r4, #0]
 8002444:	07d2      	lsls	r2, r2, #31
 8002446:	d501      	bpl.n	800244c <_printf_float+0x1ac>
 8002448:	3302      	adds	r3, #2
 800244a:	e7f4      	b.n	8002436 <_printf_float+0x196>
 800244c:	2301      	movs	r3, #1
 800244e:	e7f2      	b.n	8002436 <_printf_float+0x196>
 8002450:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002456:	4299      	cmp	r1, r3
 8002458:	db05      	blt.n	8002466 <_printf_float+0x1c6>
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	6121      	str	r1, [r4, #16]
 800245e:	07d8      	lsls	r0, r3, #31
 8002460:	d5ea      	bpl.n	8002438 <_printf_float+0x198>
 8002462:	1c4b      	adds	r3, r1, #1
 8002464:	e7e7      	b.n	8002436 <_printf_float+0x196>
 8002466:	2900      	cmp	r1, #0
 8002468:	bfd4      	ite	le
 800246a:	f1c1 0202 	rsble	r2, r1, #2
 800246e:	2201      	movgt	r2, #1
 8002470:	4413      	add	r3, r2
 8002472:	e7e0      	b.n	8002436 <_printf_float+0x196>
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	055a      	lsls	r2, r3, #21
 8002478:	d407      	bmi.n	800248a <_printf_float+0x1ea>
 800247a:	6923      	ldr	r3, [r4, #16]
 800247c:	4642      	mov	r2, r8
 800247e:	4631      	mov	r1, r6
 8002480:	4628      	mov	r0, r5
 8002482:	47b8      	blx	r7
 8002484:	3001      	adds	r0, #1
 8002486:	d12b      	bne.n	80024e0 <_printf_float+0x240>
 8002488:	e765      	b.n	8002356 <_printf_float+0xb6>
 800248a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800248e:	f240 80dd 	bls.w	800264c <_printf_float+0x3ac>
 8002492:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002496:	2200      	movs	r2, #0
 8002498:	2300      	movs	r3, #0
 800249a:	f7fe fb4d 	bl	8000b38 <__aeabi_dcmpeq>
 800249e:	2800      	cmp	r0, #0
 80024a0:	d033      	beq.n	800250a <_printf_float+0x26a>
 80024a2:	4a37      	ldr	r2, [pc, #220]	@ (8002580 <_printf_float+0x2e0>)
 80024a4:	2301      	movs	r3, #1
 80024a6:	4631      	mov	r1, r6
 80024a8:	4628      	mov	r0, r5
 80024aa:	47b8      	blx	r7
 80024ac:	3001      	adds	r0, #1
 80024ae:	f43f af52 	beq.w	8002356 <_printf_float+0xb6>
 80024b2:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80024b6:	4543      	cmp	r3, r8
 80024b8:	db02      	blt.n	80024c0 <_printf_float+0x220>
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	07d8      	lsls	r0, r3, #31
 80024be:	d50f      	bpl.n	80024e0 <_printf_float+0x240>
 80024c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80024c4:	4631      	mov	r1, r6
 80024c6:	4628      	mov	r0, r5
 80024c8:	47b8      	blx	r7
 80024ca:	3001      	adds	r0, #1
 80024cc:	f43f af43 	beq.w	8002356 <_printf_float+0xb6>
 80024d0:	f04f 0900 	mov.w	r9, #0
 80024d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80024d8:	f104 0a1a 	add.w	sl, r4, #26
 80024dc:	45c8      	cmp	r8, r9
 80024de:	dc09      	bgt.n	80024f4 <_printf_float+0x254>
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	079b      	lsls	r3, r3, #30
 80024e4:	f100 8103 	bmi.w	80026ee <_printf_float+0x44e>
 80024e8:	68e0      	ldr	r0, [r4, #12]
 80024ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80024ec:	4298      	cmp	r0, r3
 80024ee:	bfb8      	it	lt
 80024f0:	4618      	movlt	r0, r3
 80024f2:	e732      	b.n	800235a <_printf_float+0xba>
 80024f4:	2301      	movs	r3, #1
 80024f6:	4652      	mov	r2, sl
 80024f8:	4631      	mov	r1, r6
 80024fa:	4628      	mov	r0, r5
 80024fc:	47b8      	blx	r7
 80024fe:	3001      	adds	r0, #1
 8002500:	f43f af29 	beq.w	8002356 <_printf_float+0xb6>
 8002504:	f109 0901 	add.w	r9, r9, #1
 8002508:	e7e8      	b.n	80024dc <_printf_float+0x23c>
 800250a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800250c:	2b00      	cmp	r3, #0
 800250e:	dc39      	bgt.n	8002584 <_printf_float+0x2e4>
 8002510:	4a1b      	ldr	r2, [pc, #108]	@ (8002580 <_printf_float+0x2e0>)
 8002512:	2301      	movs	r3, #1
 8002514:	4631      	mov	r1, r6
 8002516:	4628      	mov	r0, r5
 8002518:	47b8      	blx	r7
 800251a:	3001      	adds	r0, #1
 800251c:	f43f af1b 	beq.w	8002356 <_printf_float+0xb6>
 8002520:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002524:	ea59 0303 	orrs.w	r3, r9, r3
 8002528:	d102      	bne.n	8002530 <_printf_float+0x290>
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	07d9      	lsls	r1, r3, #31
 800252e:	d5d7      	bpl.n	80024e0 <_printf_float+0x240>
 8002530:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002534:	4631      	mov	r1, r6
 8002536:	4628      	mov	r0, r5
 8002538:	47b8      	blx	r7
 800253a:	3001      	adds	r0, #1
 800253c:	f43f af0b 	beq.w	8002356 <_printf_float+0xb6>
 8002540:	f04f 0a00 	mov.w	sl, #0
 8002544:	f104 0b1a 	add.w	fp, r4, #26
 8002548:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800254a:	425b      	negs	r3, r3
 800254c:	4553      	cmp	r3, sl
 800254e:	dc01      	bgt.n	8002554 <_printf_float+0x2b4>
 8002550:	464b      	mov	r3, r9
 8002552:	e793      	b.n	800247c <_printf_float+0x1dc>
 8002554:	2301      	movs	r3, #1
 8002556:	465a      	mov	r2, fp
 8002558:	4631      	mov	r1, r6
 800255a:	4628      	mov	r0, r5
 800255c:	47b8      	blx	r7
 800255e:	3001      	adds	r0, #1
 8002560:	f43f aef9 	beq.w	8002356 <_printf_float+0xb6>
 8002564:	f10a 0a01 	add.w	sl, sl, #1
 8002568:	e7ee      	b.n	8002548 <_printf_float+0x2a8>
 800256a:	bf00      	nop
 800256c:	7fefffff 	.word	0x7fefffff
 8002570:	08004bce 	.word	0x08004bce
 8002574:	08004bd2 	.word	0x08004bd2
 8002578:	08004bd6 	.word	0x08004bd6
 800257c:	08004bda 	.word	0x08004bda
 8002580:	08004bde 	.word	0x08004bde
 8002584:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002586:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800258a:	4553      	cmp	r3, sl
 800258c:	bfa8      	it	ge
 800258e:	4653      	movge	r3, sl
 8002590:	2b00      	cmp	r3, #0
 8002592:	4699      	mov	r9, r3
 8002594:	dc36      	bgt.n	8002604 <_printf_float+0x364>
 8002596:	f04f 0b00 	mov.w	fp, #0
 800259a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800259e:	f104 021a 	add.w	r2, r4, #26
 80025a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80025a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80025a6:	eba3 0309 	sub.w	r3, r3, r9
 80025aa:	455b      	cmp	r3, fp
 80025ac:	dc31      	bgt.n	8002612 <_printf_float+0x372>
 80025ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80025b0:	459a      	cmp	sl, r3
 80025b2:	dc3a      	bgt.n	800262a <_printf_float+0x38a>
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	07da      	lsls	r2, r3, #31
 80025b8:	d437      	bmi.n	800262a <_printf_float+0x38a>
 80025ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80025bc:	ebaa 0903 	sub.w	r9, sl, r3
 80025c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80025c2:	ebaa 0303 	sub.w	r3, sl, r3
 80025c6:	4599      	cmp	r9, r3
 80025c8:	bfa8      	it	ge
 80025ca:	4699      	movge	r9, r3
 80025cc:	f1b9 0f00 	cmp.w	r9, #0
 80025d0:	dc33      	bgt.n	800263a <_printf_float+0x39a>
 80025d2:	f04f 0800 	mov.w	r8, #0
 80025d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80025da:	f104 0b1a 	add.w	fp, r4, #26
 80025de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80025e0:	ebaa 0303 	sub.w	r3, sl, r3
 80025e4:	eba3 0309 	sub.w	r3, r3, r9
 80025e8:	4543      	cmp	r3, r8
 80025ea:	f77f af79 	ble.w	80024e0 <_printf_float+0x240>
 80025ee:	2301      	movs	r3, #1
 80025f0:	465a      	mov	r2, fp
 80025f2:	4631      	mov	r1, r6
 80025f4:	4628      	mov	r0, r5
 80025f6:	47b8      	blx	r7
 80025f8:	3001      	adds	r0, #1
 80025fa:	f43f aeac 	beq.w	8002356 <_printf_float+0xb6>
 80025fe:	f108 0801 	add.w	r8, r8, #1
 8002602:	e7ec      	b.n	80025de <_printf_float+0x33e>
 8002604:	4642      	mov	r2, r8
 8002606:	4631      	mov	r1, r6
 8002608:	4628      	mov	r0, r5
 800260a:	47b8      	blx	r7
 800260c:	3001      	adds	r0, #1
 800260e:	d1c2      	bne.n	8002596 <_printf_float+0x2f6>
 8002610:	e6a1      	b.n	8002356 <_printf_float+0xb6>
 8002612:	2301      	movs	r3, #1
 8002614:	4631      	mov	r1, r6
 8002616:	4628      	mov	r0, r5
 8002618:	920a      	str	r2, [sp, #40]	@ 0x28
 800261a:	47b8      	blx	r7
 800261c:	3001      	adds	r0, #1
 800261e:	f43f ae9a 	beq.w	8002356 <_printf_float+0xb6>
 8002622:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002624:	f10b 0b01 	add.w	fp, fp, #1
 8002628:	e7bb      	b.n	80025a2 <_printf_float+0x302>
 800262a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800262e:	4631      	mov	r1, r6
 8002630:	4628      	mov	r0, r5
 8002632:	47b8      	blx	r7
 8002634:	3001      	adds	r0, #1
 8002636:	d1c0      	bne.n	80025ba <_printf_float+0x31a>
 8002638:	e68d      	b.n	8002356 <_printf_float+0xb6>
 800263a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800263c:	464b      	mov	r3, r9
 800263e:	4442      	add	r2, r8
 8002640:	4631      	mov	r1, r6
 8002642:	4628      	mov	r0, r5
 8002644:	47b8      	blx	r7
 8002646:	3001      	adds	r0, #1
 8002648:	d1c3      	bne.n	80025d2 <_printf_float+0x332>
 800264a:	e684      	b.n	8002356 <_printf_float+0xb6>
 800264c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002650:	f1ba 0f01 	cmp.w	sl, #1
 8002654:	dc01      	bgt.n	800265a <_printf_float+0x3ba>
 8002656:	07db      	lsls	r3, r3, #31
 8002658:	d536      	bpl.n	80026c8 <_printf_float+0x428>
 800265a:	2301      	movs	r3, #1
 800265c:	4642      	mov	r2, r8
 800265e:	4631      	mov	r1, r6
 8002660:	4628      	mov	r0, r5
 8002662:	47b8      	blx	r7
 8002664:	3001      	adds	r0, #1
 8002666:	f43f ae76 	beq.w	8002356 <_printf_float+0xb6>
 800266a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800266e:	4631      	mov	r1, r6
 8002670:	4628      	mov	r0, r5
 8002672:	47b8      	blx	r7
 8002674:	3001      	adds	r0, #1
 8002676:	f43f ae6e 	beq.w	8002356 <_printf_float+0xb6>
 800267a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800267e:	2200      	movs	r2, #0
 8002680:	2300      	movs	r3, #0
 8002682:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002686:	f7fe fa57 	bl	8000b38 <__aeabi_dcmpeq>
 800268a:	b9c0      	cbnz	r0, 80026be <_printf_float+0x41e>
 800268c:	4653      	mov	r3, sl
 800268e:	f108 0201 	add.w	r2, r8, #1
 8002692:	4631      	mov	r1, r6
 8002694:	4628      	mov	r0, r5
 8002696:	47b8      	blx	r7
 8002698:	3001      	adds	r0, #1
 800269a:	d10c      	bne.n	80026b6 <_printf_float+0x416>
 800269c:	e65b      	b.n	8002356 <_printf_float+0xb6>
 800269e:	2301      	movs	r3, #1
 80026a0:	465a      	mov	r2, fp
 80026a2:	4631      	mov	r1, r6
 80026a4:	4628      	mov	r0, r5
 80026a6:	47b8      	blx	r7
 80026a8:	3001      	adds	r0, #1
 80026aa:	f43f ae54 	beq.w	8002356 <_printf_float+0xb6>
 80026ae:	f108 0801 	add.w	r8, r8, #1
 80026b2:	45d0      	cmp	r8, sl
 80026b4:	dbf3      	blt.n	800269e <_printf_float+0x3fe>
 80026b6:	464b      	mov	r3, r9
 80026b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80026bc:	e6df      	b.n	800247e <_printf_float+0x1de>
 80026be:	f04f 0800 	mov.w	r8, #0
 80026c2:	f104 0b1a 	add.w	fp, r4, #26
 80026c6:	e7f4      	b.n	80026b2 <_printf_float+0x412>
 80026c8:	2301      	movs	r3, #1
 80026ca:	4642      	mov	r2, r8
 80026cc:	e7e1      	b.n	8002692 <_printf_float+0x3f2>
 80026ce:	2301      	movs	r3, #1
 80026d0:	464a      	mov	r2, r9
 80026d2:	4631      	mov	r1, r6
 80026d4:	4628      	mov	r0, r5
 80026d6:	47b8      	blx	r7
 80026d8:	3001      	adds	r0, #1
 80026da:	f43f ae3c 	beq.w	8002356 <_printf_float+0xb6>
 80026de:	f108 0801 	add.w	r8, r8, #1
 80026e2:	68e3      	ldr	r3, [r4, #12]
 80026e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80026e6:	1a5b      	subs	r3, r3, r1
 80026e8:	4543      	cmp	r3, r8
 80026ea:	dcf0      	bgt.n	80026ce <_printf_float+0x42e>
 80026ec:	e6fc      	b.n	80024e8 <_printf_float+0x248>
 80026ee:	f04f 0800 	mov.w	r8, #0
 80026f2:	f104 0919 	add.w	r9, r4, #25
 80026f6:	e7f4      	b.n	80026e2 <_printf_float+0x442>

080026f8 <_printf_common>:
 80026f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026fc:	4616      	mov	r6, r2
 80026fe:	4698      	mov	r8, r3
 8002700:	688a      	ldr	r2, [r1, #8]
 8002702:	690b      	ldr	r3, [r1, #16]
 8002704:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002708:	4293      	cmp	r3, r2
 800270a:	bfb8      	it	lt
 800270c:	4613      	movlt	r3, r2
 800270e:	6033      	str	r3, [r6, #0]
 8002710:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002714:	4607      	mov	r7, r0
 8002716:	460c      	mov	r4, r1
 8002718:	b10a      	cbz	r2, 800271e <_printf_common+0x26>
 800271a:	3301      	adds	r3, #1
 800271c:	6033      	str	r3, [r6, #0]
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	0699      	lsls	r1, r3, #26
 8002722:	bf42      	ittt	mi
 8002724:	6833      	ldrmi	r3, [r6, #0]
 8002726:	3302      	addmi	r3, #2
 8002728:	6033      	strmi	r3, [r6, #0]
 800272a:	6825      	ldr	r5, [r4, #0]
 800272c:	f015 0506 	ands.w	r5, r5, #6
 8002730:	d106      	bne.n	8002740 <_printf_common+0x48>
 8002732:	f104 0a19 	add.w	sl, r4, #25
 8002736:	68e3      	ldr	r3, [r4, #12]
 8002738:	6832      	ldr	r2, [r6, #0]
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	42ab      	cmp	r3, r5
 800273e:	dc26      	bgt.n	800278e <_printf_common+0x96>
 8002740:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002744:	6822      	ldr	r2, [r4, #0]
 8002746:	3b00      	subs	r3, #0
 8002748:	bf18      	it	ne
 800274a:	2301      	movne	r3, #1
 800274c:	0692      	lsls	r2, r2, #26
 800274e:	d42b      	bmi.n	80027a8 <_printf_common+0xb0>
 8002750:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002754:	4641      	mov	r1, r8
 8002756:	4638      	mov	r0, r7
 8002758:	47c8      	blx	r9
 800275a:	3001      	adds	r0, #1
 800275c:	d01e      	beq.n	800279c <_printf_common+0xa4>
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	6922      	ldr	r2, [r4, #16]
 8002762:	f003 0306 	and.w	r3, r3, #6
 8002766:	2b04      	cmp	r3, #4
 8002768:	bf02      	ittt	eq
 800276a:	68e5      	ldreq	r5, [r4, #12]
 800276c:	6833      	ldreq	r3, [r6, #0]
 800276e:	1aed      	subeq	r5, r5, r3
 8002770:	68a3      	ldr	r3, [r4, #8]
 8002772:	bf0c      	ite	eq
 8002774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002778:	2500      	movne	r5, #0
 800277a:	4293      	cmp	r3, r2
 800277c:	bfc4      	itt	gt
 800277e:	1a9b      	subgt	r3, r3, r2
 8002780:	18ed      	addgt	r5, r5, r3
 8002782:	2600      	movs	r6, #0
 8002784:	341a      	adds	r4, #26
 8002786:	42b5      	cmp	r5, r6
 8002788:	d11a      	bne.n	80027c0 <_printf_common+0xc8>
 800278a:	2000      	movs	r0, #0
 800278c:	e008      	b.n	80027a0 <_printf_common+0xa8>
 800278e:	2301      	movs	r3, #1
 8002790:	4652      	mov	r2, sl
 8002792:	4641      	mov	r1, r8
 8002794:	4638      	mov	r0, r7
 8002796:	47c8      	blx	r9
 8002798:	3001      	adds	r0, #1
 800279a:	d103      	bne.n	80027a4 <_printf_common+0xac>
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027a4:	3501      	adds	r5, #1
 80027a6:	e7c6      	b.n	8002736 <_printf_common+0x3e>
 80027a8:	18e1      	adds	r1, r4, r3
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	2030      	movs	r0, #48	@ 0x30
 80027ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80027b2:	4422      	add	r2, r4
 80027b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80027b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80027bc:	3302      	adds	r3, #2
 80027be:	e7c7      	b.n	8002750 <_printf_common+0x58>
 80027c0:	2301      	movs	r3, #1
 80027c2:	4622      	mov	r2, r4
 80027c4:	4641      	mov	r1, r8
 80027c6:	4638      	mov	r0, r7
 80027c8:	47c8      	blx	r9
 80027ca:	3001      	adds	r0, #1
 80027cc:	d0e6      	beq.n	800279c <_printf_common+0xa4>
 80027ce:	3601      	adds	r6, #1
 80027d0:	e7d9      	b.n	8002786 <_printf_common+0x8e>
	...

080027d4 <_printf_i>:
 80027d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027d8:	7e0f      	ldrb	r7, [r1, #24]
 80027da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80027dc:	2f78      	cmp	r7, #120	@ 0x78
 80027de:	4691      	mov	r9, r2
 80027e0:	4680      	mov	r8, r0
 80027e2:	460c      	mov	r4, r1
 80027e4:	469a      	mov	sl, r3
 80027e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80027ea:	d807      	bhi.n	80027fc <_printf_i+0x28>
 80027ec:	2f62      	cmp	r7, #98	@ 0x62
 80027ee:	d80a      	bhi.n	8002806 <_printf_i+0x32>
 80027f0:	2f00      	cmp	r7, #0
 80027f2:	f000 80d2 	beq.w	800299a <_printf_i+0x1c6>
 80027f6:	2f58      	cmp	r7, #88	@ 0x58
 80027f8:	f000 80b9 	beq.w	800296e <_printf_i+0x19a>
 80027fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002800:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002804:	e03a      	b.n	800287c <_printf_i+0xa8>
 8002806:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800280a:	2b15      	cmp	r3, #21
 800280c:	d8f6      	bhi.n	80027fc <_printf_i+0x28>
 800280e:	a101      	add	r1, pc, #4	@ (adr r1, 8002814 <_printf_i+0x40>)
 8002810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002814:	0800286d 	.word	0x0800286d
 8002818:	08002881 	.word	0x08002881
 800281c:	080027fd 	.word	0x080027fd
 8002820:	080027fd 	.word	0x080027fd
 8002824:	080027fd 	.word	0x080027fd
 8002828:	080027fd 	.word	0x080027fd
 800282c:	08002881 	.word	0x08002881
 8002830:	080027fd 	.word	0x080027fd
 8002834:	080027fd 	.word	0x080027fd
 8002838:	080027fd 	.word	0x080027fd
 800283c:	080027fd 	.word	0x080027fd
 8002840:	08002981 	.word	0x08002981
 8002844:	080028ab 	.word	0x080028ab
 8002848:	0800293b 	.word	0x0800293b
 800284c:	080027fd 	.word	0x080027fd
 8002850:	080027fd 	.word	0x080027fd
 8002854:	080029a3 	.word	0x080029a3
 8002858:	080027fd 	.word	0x080027fd
 800285c:	080028ab 	.word	0x080028ab
 8002860:	080027fd 	.word	0x080027fd
 8002864:	080027fd 	.word	0x080027fd
 8002868:	08002943 	.word	0x08002943
 800286c:	6833      	ldr	r3, [r6, #0]
 800286e:	1d1a      	adds	r2, r3, #4
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6032      	str	r2, [r6, #0]
 8002874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002878:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800287c:	2301      	movs	r3, #1
 800287e:	e09d      	b.n	80029bc <_printf_i+0x1e8>
 8002880:	6833      	ldr	r3, [r6, #0]
 8002882:	6820      	ldr	r0, [r4, #0]
 8002884:	1d19      	adds	r1, r3, #4
 8002886:	6031      	str	r1, [r6, #0]
 8002888:	0606      	lsls	r6, r0, #24
 800288a:	d501      	bpl.n	8002890 <_printf_i+0xbc>
 800288c:	681d      	ldr	r5, [r3, #0]
 800288e:	e003      	b.n	8002898 <_printf_i+0xc4>
 8002890:	0645      	lsls	r5, r0, #25
 8002892:	d5fb      	bpl.n	800288c <_printf_i+0xb8>
 8002894:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002898:	2d00      	cmp	r5, #0
 800289a:	da03      	bge.n	80028a4 <_printf_i+0xd0>
 800289c:	232d      	movs	r3, #45	@ 0x2d
 800289e:	426d      	negs	r5, r5
 80028a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028a4:	4859      	ldr	r0, [pc, #356]	@ (8002a0c <_printf_i+0x238>)
 80028a6:	230a      	movs	r3, #10
 80028a8:	e011      	b.n	80028ce <_printf_i+0xfa>
 80028aa:	6821      	ldr	r1, [r4, #0]
 80028ac:	6833      	ldr	r3, [r6, #0]
 80028ae:	0608      	lsls	r0, r1, #24
 80028b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80028b4:	d402      	bmi.n	80028bc <_printf_i+0xe8>
 80028b6:	0649      	lsls	r1, r1, #25
 80028b8:	bf48      	it	mi
 80028ba:	b2ad      	uxthmi	r5, r5
 80028bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80028be:	4853      	ldr	r0, [pc, #332]	@ (8002a0c <_printf_i+0x238>)
 80028c0:	6033      	str	r3, [r6, #0]
 80028c2:	bf14      	ite	ne
 80028c4:	230a      	movne	r3, #10
 80028c6:	2308      	moveq	r3, #8
 80028c8:	2100      	movs	r1, #0
 80028ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80028ce:	6866      	ldr	r6, [r4, #4]
 80028d0:	60a6      	str	r6, [r4, #8]
 80028d2:	2e00      	cmp	r6, #0
 80028d4:	bfa2      	ittt	ge
 80028d6:	6821      	ldrge	r1, [r4, #0]
 80028d8:	f021 0104 	bicge.w	r1, r1, #4
 80028dc:	6021      	strge	r1, [r4, #0]
 80028de:	b90d      	cbnz	r5, 80028e4 <_printf_i+0x110>
 80028e0:	2e00      	cmp	r6, #0
 80028e2:	d04b      	beq.n	800297c <_printf_i+0x1a8>
 80028e4:	4616      	mov	r6, r2
 80028e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80028ea:	fb03 5711 	mls	r7, r3, r1, r5
 80028ee:	5dc7      	ldrb	r7, [r0, r7]
 80028f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80028f4:	462f      	mov	r7, r5
 80028f6:	42bb      	cmp	r3, r7
 80028f8:	460d      	mov	r5, r1
 80028fa:	d9f4      	bls.n	80028e6 <_printf_i+0x112>
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d10b      	bne.n	8002918 <_printf_i+0x144>
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	07df      	lsls	r7, r3, #31
 8002904:	d508      	bpl.n	8002918 <_printf_i+0x144>
 8002906:	6923      	ldr	r3, [r4, #16]
 8002908:	6861      	ldr	r1, [r4, #4]
 800290a:	4299      	cmp	r1, r3
 800290c:	bfde      	ittt	le
 800290e:	2330      	movle	r3, #48	@ 0x30
 8002910:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002914:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002918:	1b92      	subs	r2, r2, r6
 800291a:	6122      	str	r2, [r4, #16]
 800291c:	f8cd a000 	str.w	sl, [sp]
 8002920:	464b      	mov	r3, r9
 8002922:	aa03      	add	r2, sp, #12
 8002924:	4621      	mov	r1, r4
 8002926:	4640      	mov	r0, r8
 8002928:	f7ff fee6 	bl	80026f8 <_printf_common>
 800292c:	3001      	adds	r0, #1
 800292e:	d14a      	bne.n	80029c6 <_printf_i+0x1f2>
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	b004      	add	sp, #16
 8002936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	f043 0320 	orr.w	r3, r3, #32
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	4833      	ldr	r0, [pc, #204]	@ (8002a10 <_printf_i+0x23c>)
 8002944:	2778      	movs	r7, #120	@ 0x78
 8002946:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	6831      	ldr	r1, [r6, #0]
 800294e:	061f      	lsls	r7, r3, #24
 8002950:	f851 5b04 	ldr.w	r5, [r1], #4
 8002954:	d402      	bmi.n	800295c <_printf_i+0x188>
 8002956:	065f      	lsls	r7, r3, #25
 8002958:	bf48      	it	mi
 800295a:	b2ad      	uxthmi	r5, r5
 800295c:	6031      	str	r1, [r6, #0]
 800295e:	07d9      	lsls	r1, r3, #31
 8002960:	bf44      	itt	mi
 8002962:	f043 0320 	orrmi.w	r3, r3, #32
 8002966:	6023      	strmi	r3, [r4, #0]
 8002968:	b11d      	cbz	r5, 8002972 <_printf_i+0x19e>
 800296a:	2310      	movs	r3, #16
 800296c:	e7ac      	b.n	80028c8 <_printf_i+0xf4>
 800296e:	4827      	ldr	r0, [pc, #156]	@ (8002a0c <_printf_i+0x238>)
 8002970:	e7e9      	b.n	8002946 <_printf_i+0x172>
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	f023 0320 	bic.w	r3, r3, #32
 8002978:	6023      	str	r3, [r4, #0]
 800297a:	e7f6      	b.n	800296a <_printf_i+0x196>
 800297c:	4616      	mov	r6, r2
 800297e:	e7bd      	b.n	80028fc <_printf_i+0x128>
 8002980:	6833      	ldr	r3, [r6, #0]
 8002982:	6825      	ldr	r5, [r4, #0]
 8002984:	6961      	ldr	r1, [r4, #20]
 8002986:	1d18      	adds	r0, r3, #4
 8002988:	6030      	str	r0, [r6, #0]
 800298a:	062e      	lsls	r6, r5, #24
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	d501      	bpl.n	8002994 <_printf_i+0x1c0>
 8002990:	6019      	str	r1, [r3, #0]
 8002992:	e002      	b.n	800299a <_printf_i+0x1c6>
 8002994:	0668      	lsls	r0, r5, #25
 8002996:	d5fb      	bpl.n	8002990 <_printf_i+0x1bc>
 8002998:	8019      	strh	r1, [r3, #0]
 800299a:	2300      	movs	r3, #0
 800299c:	6123      	str	r3, [r4, #16]
 800299e:	4616      	mov	r6, r2
 80029a0:	e7bc      	b.n	800291c <_printf_i+0x148>
 80029a2:	6833      	ldr	r3, [r6, #0]
 80029a4:	1d1a      	adds	r2, r3, #4
 80029a6:	6032      	str	r2, [r6, #0]
 80029a8:	681e      	ldr	r6, [r3, #0]
 80029aa:	6862      	ldr	r2, [r4, #4]
 80029ac:	2100      	movs	r1, #0
 80029ae:	4630      	mov	r0, r6
 80029b0:	f7fd fc46 	bl	8000240 <memchr>
 80029b4:	b108      	cbz	r0, 80029ba <_printf_i+0x1e6>
 80029b6:	1b80      	subs	r0, r0, r6
 80029b8:	6060      	str	r0, [r4, #4]
 80029ba:	6863      	ldr	r3, [r4, #4]
 80029bc:	6123      	str	r3, [r4, #16]
 80029be:	2300      	movs	r3, #0
 80029c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029c4:	e7aa      	b.n	800291c <_printf_i+0x148>
 80029c6:	6923      	ldr	r3, [r4, #16]
 80029c8:	4632      	mov	r2, r6
 80029ca:	4649      	mov	r1, r9
 80029cc:	4640      	mov	r0, r8
 80029ce:	47d0      	blx	sl
 80029d0:	3001      	adds	r0, #1
 80029d2:	d0ad      	beq.n	8002930 <_printf_i+0x15c>
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	079b      	lsls	r3, r3, #30
 80029d8:	d413      	bmi.n	8002a02 <_printf_i+0x22e>
 80029da:	68e0      	ldr	r0, [r4, #12]
 80029dc:	9b03      	ldr	r3, [sp, #12]
 80029de:	4298      	cmp	r0, r3
 80029e0:	bfb8      	it	lt
 80029e2:	4618      	movlt	r0, r3
 80029e4:	e7a6      	b.n	8002934 <_printf_i+0x160>
 80029e6:	2301      	movs	r3, #1
 80029e8:	4632      	mov	r2, r6
 80029ea:	4649      	mov	r1, r9
 80029ec:	4640      	mov	r0, r8
 80029ee:	47d0      	blx	sl
 80029f0:	3001      	adds	r0, #1
 80029f2:	d09d      	beq.n	8002930 <_printf_i+0x15c>
 80029f4:	3501      	adds	r5, #1
 80029f6:	68e3      	ldr	r3, [r4, #12]
 80029f8:	9903      	ldr	r1, [sp, #12]
 80029fa:	1a5b      	subs	r3, r3, r1
 80029fc:	42ab      	cmp	r3, r5
 80029fe:	dcf2      	bgt.n	80029e6 <_printf_i+0x212>
 8002a00:	e7eb      	b.n	80029da <_printf_i+0x206>
 8002a02:	2500      	movs	r5, #0
 8002a04:	f104 0619 	add.w	r6, r4, #25
 8002a08:	e7f5      	b.n	80029f6 <_printf_i+0x222>
 8002a0a:	bf00      	nop
 8002a0c:	08004be0 	.word	0x08004be0
 8002a10:	08004bf1 	.word	0x08004bf1

08002a14 <std>:
 8002a14:	2300      	movs	r3, #0
 8002a16:	b510      	push	{r4, lr}
 8002a18:	4604      	mov	r4, r0
 8002a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8002a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a22:	6083      	str	r3, [r0, #8]
 8002a24:	8181      	strh	r1, [r0, #12]
 8002a26:	6643      	str	r3, [r0, #100]	@ 0x64
 8002a28:	81c2      	strh	r2, [r0, #14]
 8002a2a:	6183      	str	r3, [r0, #24]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	2208      	movs	r2, #8
 8002a30:	305c      	adds	r0, #92	@ 0x5c
 8002a32:	f000 f9f9 	bl	8002e28 <memset>
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <std+0x58>)
 8002a38:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <std+0x5c>)
 8002a3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <std+0x60>)
 8002a40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a42:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <std+0x64>)
 8002a44:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a46:	4b0d      	ldr	r3, [pc, #52]	@ (8002a7c <std+0x68>)
 8002a48:	6224      	str	r4, [r4, #32]
 8002a4a:	429c      	cmp	r4, r3
 8002a4c:	d006      	beq.n	8002a5c <std+0x48>
 8002a4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a52:	4294      	cmp	r4, r2
 8002a54:	d002      	beq.n	8002a5c <std+0x48>
 8002a56:	33d0      	adds	r3, #208	@ 0xd0
 8002a58:	429c      	cmp	r4, r3
 8002a5a:	d105      	bne.n	8002a68 <std+0x54>
 8002a5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a64:	f000 ba5c 	b.w	8002f20 <__retarget_lock_init_recursive>
 8002a68:	bd10      	pop	{r4, pc}
 8002a6a:	bf00      	nop
 8002a6c:	08002c79 	.word	0x08002c79
 8002a70:	08002c9b 	.word	0x08002c9b
 8002a74:	08002cd3 	.word	0x08002cd3
 8002a78:	08002cf7 	.word	0x08002cf7
 8002a7c:	20000630 	.word	0x20000630

08002a80 <stdio_exit_handler>:
 8002a80:	4a02      	ldr	r2, [pc, #8]	@ (8002a8c <stdio_exit_handler+0xc>)
 8002a82:	4903      	ldr	r1, [pc, #12]	@ (8002a90 <stdio_exit_handler+0x10>)
 8002a84:	4803      	ldr	r0, [pc, #12]	@ (8002a94 <stdio_exit_handler+0x14>)
 8002a86:	f000 b869 	b.w	8002b5c <_fwalk_sglue>
 8002a8a:	bf00      	nop
 8002a8c:	20000020 	.word	0x20000020
 8002a90:	08004849 	.word	0x08004849
 8002a94:	20000030 	.word	0x20000030

08002a98 <cleanup_stdio>:
 8002a98:	6841      	ldr	r1, [r0, #4]
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <cleanup_stdio+0x34>)
 8002a9c:	4299      	cmp	r1, r3
 8002a9e:	b510      	push	{r4, lr}
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	d001      	beq.n	8002aa8 <cleanup_stdio+0x10>
 8002aa4:	f001 fed0 	bl	8004848 <_fflush_r>
 8002aa8:	68a1      	ldr	r1, [r4, #8]
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <cleanup_stdio+0x38>)
 8002aac:	4299      	cmp	r1, r3
 8002aae:	d002      	beq.n	8002ab6 <cleanup_stdio+0x1e>
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f001 fec9 	bl	8004848 <_fflush_r>
 8002ab6:	68e1      	ldr	r1, [r4, #12]
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <cleanup_stdio+0x3c>)
 8002aba:	4299      	cmp	r1, r3
 8002abc:	d004      	beq.n	8002ac8 <cleanup_stdio+0x30>
 8002abe:	4620      	mov	r0, r4
 8002ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ac4:	f001 bec0 	b.w	8004848 <_fflush_r>
 8002ac8:	bd10      	pop	{r4, pc}
 8002aca:	bf00      	nop
 8002acc:	20000630 	.word	0x20000630
 8002ad0:	20000698 	.word	0x20000698
 8002ad4:	20000700 	.word	0x20000700

08002ad8 <global_stdio_init.part.0>:
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <global_stdio_init.part.0+0x30>)
 8002adc:	4c0b      	ldr	r4, [pc, #44]	@ (8002b0c <global_stdio_init.part.0+0x34>)
 8002ade:	4a0c      	ldr	r2, [pc, #48]	@ (8002b10 <global_stdio_init.part.0+0x38>)
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2104      	movs	r1, #4
 8002ae8:	f7ff ff94 	bl	8002a14 <std>
 8002aec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002af0:	2201      	movs	r2, #1
 8002af2:	2109      	movs	r1, #9
 8002af4:	f7ff ff8e 	bl	8002a14 <std>
 8002af8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002afc:	2202      	movs	r2, #2
 8002afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b02:	2112      	movs	r1, #18
 8002b04:	f7ff bf86 	b.w	8002a14 <std>
 8002b08:	20000768 	.word	0x20000768
 8002b0c:	20000630 	.word	0x20000630
 8002b10:	08002a81 	.word	0x08002a81

08002b14 <__sfp_lock_acquire>:
 8002b14:	4801      	ldr	r0, [pc, #4]	@ (8002b1c <__sfp_lock_acquire+0x8>)
 8002b16:	f000 ba04 	b.w	8002f22 <__retarget_lock_acquire_recursive>
 8002b1a:	bf00      	nop
 8002b1c:	20000771 	.word	0x20000771

08002b20 <__sfp_lock_release>:
 8002b20:	4801      	ldr	r0, [pc, #4]	@ (8002b28 <__sfp_lock_release+0x8>)
 8002b22:	f000 b9ff 	b.w	8002f24 <__retarget_lock_release_recursive>
 8002b26:	bf00      	nop
 8002b28:	20000771 	.word	0x20000771

08002b2c <__sinit>:
 8002b2c:	b510      	push	{r4, lr}
 8002b2e:	4604      	mov	r4, r0
 8002b30:	f7ff fff0 	bl	8002b14 <__sfp_lock_acquire>
 8002b34:	6a23      	ldr	r3, [r4, #32]
 8002b36:	b11b      	cbz	r3, 8002b40 <__sinit+0x14>
 8002b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b3c:	f7ff bff0 	b.w	8002b20 <__sfp_lock_release>
 8002b40:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <__sinit+0x28>)
 8002b42:	6223      	str	r3, [r4, #32]
 8002b44:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <__sinit+0x2c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f5      	bne.n	8002b38 <__sinit+0xc>
 8002b4c:	f7ff ffc4 	bl	8002ad8 <global_stdio_init.part.0>
 8002b50:	e7f2      	b.n	8002b38 <__sinit+0xc>
 8002b52:	bf00      	nop
 8002b54:	08002a99 	.word	0x08002a99
 8002b58:	20000768 	.word	0x20000768

08002b5c <_fwalk_sglue>:
 8002b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b60:	4607      	mov	r7, r0
 8002b62:	4688      	mov	r8, r1
 8002b64:	4614      	mov	r4, r2
 8002b66:	2600      	movs	r6, #0
 8002b68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b6c:	f1b9 0901 	subs.w	r9, r9, #1
 8002b70:	d505      	bpl.n	8002b7e <_fwalk_sglue+0x22>
 8002b72:	6824      	ldr	r4, [r4, #0]
 8002b74:	2c00      	cmp	r4, #0
 8002b76:	d1f7      	bne.n	8002b68 <_fwalk_sglue+0xc>
 8002b78:	4630      	mov	r0, r6
 8002b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b7e:	89ab      	ldrh	r3, [r5, #12]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d907      	bls.n	8002b94 <_fwalk_sglue+0x38>
 8002b84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	d003      	beq.n	8002b94 <_fwalk_sglue+0x38>
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	4638      	mov	r0, r7
 8002b90:	47c0      	blx	r8
 8002b92:	4306      	orrs	r6, r0
 8002b94:	3568      	adds	r5, #104	@ 0x68
 8002b96:	e7e9      	b.n	8002b6c <_fwalk_sglue+0x10>

08002b98 <iprintf>:
 8002b98:	b40f      	push	{r0, r1, r2, r3}
 8002b9a:	b507      	push	{r0, r1, r2, lr}
 8002b9c:	4906      	ldr	r1, [pc, #24]	@ (8002bb8 <iprintf+0x20>)
 8002b9e:	ab04      	add	r3, sp, #16
 8002ba0:	6808      	ldr	r0, [r1, #0]
 8002ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ba6:	6881      	ldr	r1, [r0, #8]
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	f001 fcb5 	bl	8004518 <_vfiprintf_r>
 8002bae:	b003      	add	sp, #12
 8002bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bb4:	b004      	add	sp, #16
 8002bb6:	4770      	bx	lr
 8002bb8:	2000002c 	.word	0x2000002c

08002bbc <_puts_r>:
 8002bbc:	6a03      	ldr	r3, [r0, #32]
 8002bbe:	b570      	push	{r4, r5, r6, lr}
 8002bc0:	6884      	ldr	r4, [r0, #8]
 8002bc2:	4605      	mov	r5, r0
 8002bc4:	460e      	mov	r6, r1
 8002bc6:	b90b      	cbnz	r3, 8002bcc <_puts_r+0x10>
 8002bc8:	f7ff ffb0 	bl	8002b2c <__sinit>
 8002bcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002bce:	07db      	lsls	r3, r3, #31
 8002bd0:	d405      	bmi.n	8002bde <_puts_r+0x22>
 8002bd2:	89a3      	ldrh	r3, [r4, #12]
 8002bd4:	0598      	lsls	r0, r3, #22
 8002bd6:	d402      	bmi.n	8002bde <_puts_r+0x22>
 8002bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bda:	f000 f9a2 	bl	8002f22 <__retarget_lock_acquire_recursive>
 8002bde:	89a3      	ldrh	r3, [r4, #12]
 8002be0:	0719      	lsls	r1, r3, #28
 8002be2:	d502      	bpl.n	8002bea <_puts_r+0x2e>
 8002be4:	6923      	ldr	r3, [r4, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d135      	bne.n	8002c56 <_puts_r+0x9a>
 8002bea:	4621      	mov	r1, r4
 8002bec:	4628      	mov	r0, r5
 8002bee:	f000 f8c5 	bl	8002d7c <__swsetup_r>
 8002bf2:	b380      	cbz	r0, 8002c56 <_puts_r+0x9a>
 8002bf4:	f04f 35ff 	mov.w	r5, #4294967295
 8002bf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002bfa:	07da      	lsls	r2, r3, #31
 8002bfc:	d405      	bmi.n	8002c0a <_puts_r+0x4e>
 8002bfe:	89a3      	ldrh	r3, [r4, #12]
 8002c00:	059b      	lsls	r3, r3, #22
 8002c02:	d402      	bmi.n	8002c0a <_puts_r+0x4e>
 8002c04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c06:	f000 f98d 	bl	8002f24 <__retarget_lock_release_recursive>
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da04      	bge.n	8002c1c <_puts_r+0x60>
 8002c12:	69a2      	ldr	r2, [r4, #24]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	dc17      	bgt.n	8002c48 <_puts_r+0x8c>
 8002c18:	290a      	cmp	r1, #10
 8002c1a:	d015      	beq.n	8002c48 <_puts_r+0x8c>
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	6022      	str	r2, [r4, #0]
 8002c22:	7019      	strb	r1, [r3, #0]
 8002c24:	68a3      	ldr	r3, [r4, #8]
 8002c26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	60a3      	str	r3, [r4, #8]
 8002c2e:	2900      	cmp	r1, #0
 8002c30:	d1ed      	bne.n	8002c0e <_puts_r+0x52>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	da11      	bge.n	8002c5a <_puts_r+0x9e>
 8002c36:	4622      	mov	r2, r4
 8002c38:	210a      	movs	r1, #10
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f000 f85f 	bl	8002cfe <__swbuf_r>
 8002c40:	3001      	adds	r0, #1
 8002c42:	d0d7      	beq.n	8002bf4 <_puts_r+0x38>
 8002c44:	250a      	movs	r5, #10
 8002c46:	e7d7      	b.n	8002bf8 <_puts_r+0x3c>
 8002c48:	4622      	mov	r2, r4
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	f000 f857 	bl	8002cfe <__swbuf_r>
 8002c50:	3001      	adds	r0, #1
 8002c52:	d1e7      	bne.n	8002c24 <_puts_r+0x68>
 8002c54:	e7ce      	b.n	8002bf4 <_puts_r+0x38>
 8002c56:	3e01      	subs	r6, #1
 8002c58:	e7e4      	b.n	8002c24 <_puts_r+0x68>
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	6022      	str	r2, [r4, #0]
 8002c60:	220a      	movs	r2, #10
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e7ee      	b.n	8002c44 <_puts_r+0x88>
	...

08002c68 <puts>:
 8002c68:	4b02      	ldr	r3, [pc, #8]	@ (8002c74 <puts+0xc>)
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	f7ff bfa5 	b.w	8002bbc <_puts_r>
 8002c72:	bf00      	nop
 8002c74:	2000002c 	.word	0x2000002c

08002c78 <__sread>:
 8002c78:	b510      	push	{r4, lr}
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c80:	f000 f900 	bl	8002e84 <_read_r>
 8002c84:	2800      	cmp	r0, #0
 8002c86:	bfab      	itete	ge
 8002c88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8002c8c:	181b      	addge	r3, r3, r0
 8002c8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002c92:	bfac      	ite	ge
 8002c94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002c96:	81a3      	strhlt	r3, [r4, #12]
 8002c98:	bd10      	pop	{r4, pc}

08002c9a <__swrite>:
 8002c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c9e:	461f      	mov	r7, r3
 8002ca0:	898b      	ldrh	r3, [r1, #12]
 8002ca2:	05db      	lsls	r3, r3, #23
 8002ca4:	4605      	mov	r5, r0
 8002ca6:	460c      	mov	r4, r1
 8002ca8:	4616      	mov	r6, r2
 8002caa:	d505      	bpl.n	8002cb8 <__swrite+0x1e>
 8002cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f000 f8d4 	bl	8002e60 <_lseek_r>
 8002cb8:	89a3      	ldrh	r3, [r4, #12]
 8002cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cc2:	81a3      	strh	r3, [r4, #12]
 8002cc4:	4632      	mov	r2, r6
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	4628      	mov	r0, r5
 8002cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cce:	f000 b8eb 	b.w	8002ea8 <_write_r>

08002cd2 <__sseek>:
 8002cd2:	b510      	push	{r4, lr}
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cda:	f000 f8c1 	bl	8002e60 <_lseek_r>
 8002cde:	1c43      	adds	r3, r0, #1
 8002ce0:	89a3      	ldrh	r3, [r4, #12]
 8002ce2:	bf15      	itete	ne
 8002ce4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ce6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002cea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002cee:	81a3      	strheq	r3, [r4, #12]
 8002cf0:	bf18      	it	ne
 8002cf2:	81a3      	strhne	r3, [r4, #12]
 8002cf4:	bd10      	pop	{r4, pc}

08002cf6 <__sclose>:
 8002cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cfa:	f000 b8a1 	b.w	8002e40 <_close_r>

08002cfe <__swbuf_r>:
 8002cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d00:	460e      	mov	r6, r1
 8002d02:	4614      	mov	r4, r2
 8002d04:	4605      	mov	r5, r0
 8002d06:	b118      	cbz	r0, 8002d10 <__swbuf_r+0x12>
 8002d08:	6a03      	ldr	r3, [r0, #32]
 8002d0a:	b90b      	cbnz	r3, 8002d10 <__swbuf_r+0x12>
 8002d0c:	f7ff ff0e 	bl	8002b2c <__sinit>
 8002d10:	69a3      	ldr	r3, [r4, #24]
 8002d12:	60a3      	str	r3, [r4, #8]
 8002d14:	89a3      	ldrh	r3, [r4, #12]
 8002d16:	071a      	lsls	r2, r3, #28
 8002d18:	d501      	bpl.n	8002d1e <__swbuf_r+0x20>
 8002d1a:	6923      	ldr	r3, [r4, #16]
 8002d1c:	b943      	cbnz	r3, 8002d30 <__swbuf_r+0x32>
 8002d1e:	4621      	mov	r1, r4
 8002d20:	4628      	mov	r0, r5
 8002d22:	f000 f82b 	bl	8002d7c <__swsetup_r>
 8002d26:	b118      	cbz	r0, 8002d30 <__swbuf_r+0x32>
 8002d28:	f04f 37ff 	mov.w	r7, #4294967295
 8002d2c:	4638      	mov	r0, r7
 8002d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	6922      	ldr	r2, [r4, #16]
 8002d34:	1a98      	subs	r0, r3, r2
 8002d36:	6963      	ldr	r3, [r4, #20]
 8002d38:	b2f6      	uxtb	r6, r6
 8002d3a:	4283      	cmp	r3, r0
 8002d3c:	4637      	mov	r7, r6
 8002d3e:	dc05      	bgt.n	8002d4c <__swbuf_r+0x4e>
 8002d40:	4621      	mov	r1, r4
 8002d42:	4628      	mov	r0, r5
 8002d44:	f001 fd80 	bl	8004848 <_fflush_r>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	d1ed      	bne.n	8002d28 <__swbuf_r+0x2a>
 8002d4c:	68a3      	ldr	r3, [r4, #8]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	60a3      	str	r3, [r4, #8]
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	6022      	str	r2, [r4, #0]
 8002d58:	701e      	strb	r6, [r3, #0]
 8002d5a:	6962      	ldr	r2, [r4, #20]
 8002d5c:	1c43      	adds	r3, r0, #1
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d004      	beq.n	8002d6c <__swbuf_r+0x6e>
 8002d62:	89a3      	ldrh	r3, [r4, #12]
 8002d64:	07db      	lsls	r3, r3, #31
 8002d66:	d5e1      	bpl.n	8002d2c <__swbuf_r+0x2e>
 8002d68:	2e0a      	cmp	r6, #10
 8002d6a:	d1df      	bne.n	8002d2c <__swbuf_r+0x2e>
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	4628      	mov	r0, r5
 8002d70:	f001 fd6a 	bl	8004848 <_fflush_r>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d0d9      	beq.n	8002d2c <__swbuf_r+0x2e>
 8002d78:	e7d6      	b.n	8002d28 <__swbuf_r+0x2a>
	...

08002d7c <__swsetup_r>:
 8002d7c:	b538      	push	{r3, r4, r5, lr}
 8002d7e:	4b29      	ldr	r3, [pc, #164]	@ (8002e24 <__swsetup_r+0xa8>)
 8002d80:	4605      	mov	r5, r0
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	460c      	mov	r4, r1
 8002d86:	b118      	cbz	r0, 8002d90 <__swsetup_r+0x14>
 8002d88:	6a03      	ldr	r3, [r0, #32]
 8002d8a:	b90b      	cbnz	r3, 8002d90 <__swsetup_r+0x14>
 8002d8c:	f7ff fece 	bl	8002b2c <__sinit>
 8002d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d94:	0719      	lsls	r1, r3, #28
 8002d96:	d422      	bmi.n	8002dde <__swsetup_r+0x62>
 8002d98:	06da      	lsls	r2, r3, #27
 8002d9a:	d407      	bmi.n	8002dac <__swsetup_r+0x30>
 8002d9c:	2209      	movs	r2, #9
 8002d9e:	602a      	str	r2, [r5, #0]
 8002da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002da4:	81a3      	strh	r3, [r4, #12]
 8002da6:	f04f 30ff 	mov.w	r0, #4294967295
 8002daa:	e033      	b.n	8002e14 <__swsetup_r+0x98>
 8002dac:	0758      	lsls	r0, r3, #29
 8002dae:	d512      	bpl.n	8002dd6 <__swsetup_r+0x5a>
 8002db0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002db2:	b141      	cbz	r1, 8002dc6 <__swsetup_r+0x4a>
 8002db4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002db8:	4299      	cmp	r1, r3
 8002dba:	d002      	beq.n	8002dc2 <__swsetup_r+0x46>
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	f000 ff03 	bl	8003bc8 <_free_r>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002dcc:	81a3      	strh	r3, [r4, #12]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	6063      	str	r3, [r4, #4]
 8002dd2:	6923      	ldr	r3, [r4, #16]
 8002dd4:	6023      	str	r3, [r4, #0]
 8002dd6:	89a3      	ldrh	r3, [r4, #12]
 8002dd8:	f043 0308 	orr.w	r3, r3, #8
 8002ddc:	81a3      	strh	r3, [r4, #12]
 8002dde:	6923      	ldr	r3, [r4, #16]
 8002de0:	b94b      	cbnz	r3, 8002df6 <__swsetup_r+0x7a>
 8002de2:	89a3      	ldrh	r3, [r4, #12]
 8002de4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dec:	d003      	beq.n	8002df6 <__swsetup_r+0x7a>
 8002dee:	4621      	mov	r1, r4
 8002df0:	4628      	mov	r0, r5
 8002df2:	f001 fd77 	bl	80048e4 <__smakebuf_r>
 8002df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dfa:	f013 0201 	ands.w	r2, r3, #1
 8002dfe:	d00a      	beq.n	8002e16 <__swsetup_r+0x9a>
 8002e00:	2200      	movs	r2, #0
 8002e02:	60a2      	str	r2, [r4, #8]
 8002e04:	6962      	ldr	r2, [r4, #20]
 8002e06:	4252      	negs	r2, r2
 8002e08:	61a2      	str	r2, [r4, #24]
 8002e0a:	6922      	ldr	r2, [r4, #16]
 8002e0c:	b942      	cbnz	r2, 8002e20 <__swsetup_r+0xa4>
 8002e0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002e12:	d1c5      	bne.n	8002da0 <__swsetup_r+0x24>
 8002e14:	bd38      	pop	{r3, r4, r5, pc}
 8002e16:	0799      	lsls	r1, r3, #30
 8002e18:	bf58      	it	pl
 8002e1a:	6962      	ldrpl	r2, [r4, #20]
 8002e1c:	60a2      	str	r2, [r4, #8]
 8002e1e:	e7f4      	b.n	8002e0a <__swsetup_r+0x8e>
 8002e20:	2000      	movs	r0, #0
 8002e22:	e7f7      	b.n	8002e14 <__swsetup_r+0x98>
 8002e24:	2000002c 	.word	0x2000002c

08002e28 <memset>:
 8002e28:	4402      	add	r2, r0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d100      	bne.n	8002e32 <memset+0xa>
 8002e30:	4770      	bx	lr
 8002e32:	f803 1b01 	strb.w	r1, [r3], #1
 8002e36:	e7f9      	b.n	8002e2c <memset+0x4>

08002e38 <_localeconv_r>:
 8002e38:	4800      	ldr	r0, [pc, #0]	@ (8002e3c <_localeconv_r+0x4>)
 8002e3a:	4770      	bx	lr
 8002e3c:	2000016c 	.word	0x2000016c

08002e40 <_close_r>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	4d06      	ldr	r5, [pc, #24]	@ (8002e5c <_close_r+0x1c>)
 8002e44:	2300      	movs	r3, #0
 8002e46:	4604      	mov	r4, r0
 8002e48:	4608      	mov	r0, r1
 8002e4a:	602b      	str	r3, [r5, #0]
 8002e4c:	f7fe f899 	bl	8000f82 <_close>
 8002e50:	1c43      	adds	r3, r0, #1
 8002e52:	d102      	bne.n	8002e5a <_close_r+0x1a>
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	b103      	cbz	r3, 8002e5a <_close_r+0x1a>
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
 8002e5c:	2000076c 	.word	0x2000076c

08002e60 <_lseek_r>:
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	4d07      	ldr	r5, [pc, #28]	@ (8002e80 <_lseek_r+0x20>)
 8002e64:	4604      	mov	r4, r0
 8002e66:	4608      	mov	r0, r1
 8002e68:	4611      	mov	r1, r2
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	602a      	str	r2, [r5, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f7fe f8ab 	bl	8000fca <_lseek>
 8002e74:	1c43      	adds	r3, r0, #1
 8002e76:	d102      	bne.n	8002e7e <_lseek_r+0x1e>
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	b103      	cbz	r3, 8002e7e <_lseek_r+0x1e>
 8002e7c:	6023      	str	r3, [r4, #0]
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
 8002e80:	2000076c 	.word	0x2000076c

08002e84 <_read_r>:
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	4d07      	ldr	r5, [pc, #28]	@ (8002ea4 <_read_r+0x20>)
 8002e88:	4604      	mov	r4, r0
 8002e8a:	4608      	mov	r0, r1
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	2200      	movs	r2, #0
 8002e90:	602a      	str	r2, [r5, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f7fe f83c 	bl	8000f10 <_read>
 8002e98:	1c43      	adds	r3, r0, #1
 8002e9a:	d102      	bne.n	8002ea2 <_read_r+0x1e>
 8002e9c:	682b      	ldr	r3, [r5, #0]
 8002e9e:	b103      	cbz	r3, 8002ea2 <_read_r+0x1e>
 8002ea0:	6023      	str	r3, [r4, #0]
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}
 8002ea4:	2000076c 	.word	0x2000076c

08002ea8 <_write_r>:
 8002ea8:	b538      	push	{r3, r4, r5, lr}
 8002eaa:	4d07      	ldr	r5, [pc, #28]	@ (8002ec8 <_write_r+0x20>)
 8002eac:	4604      	mov	r4, r0
 8002eae:	4608      	mov	r0, r1
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	602a      	str	r2, [r5, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f7fe f847 	bl	8000f4a <_write>
 8002ebc:	1c43      	adds	r3, r0, #1
 8002ebe:	d102      	bne.n	8002ec6 <_write_r+0x1e>
 8002ec0:	682b      	ldr	r3, [r5, #0]
 8002ec2:	b103      	cbz	r3, 8002ec6 <_write_r+0x1e>
 8002ec4:	6023      	str	r3, [r4, #0]
 8002ec6:	bd38      	pop	{r3, r4, r5, pc}
 8002ec8:	2000076c 	.word	0x2000076c

08002ecc <__errno>:
 8002ecc:	4b01      	ldr	r3, [pc, #4]	@ (8002ed4 <__errno+0x8>)
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	2000002c 	.word	0x2000002c

08002ed8 <__libc_init_array>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	4d0d      	ldr	r5, [pc, #52]	@ (8002f10 <__libc_init_array+0x38>)
 8002edc:	4c0d      	ldr	r4, [pc, #52]	@ (8002f14 <__libc_init_array+0x3c>)
 8002ede:	1b64      	subs	r4, r4, r5
 8002ee0:	10a4      	asrs	r4, r4, #2
 8002ee2:	2600      	movs	r6, #0
 8002ee4:	42a6      	cmp	r6, r4
 8002ee6:	d109      	bne.n	8002efc <__libc_init_array+0x24>
 8002ee8:	4d0b      	ldr	r5, [pc, #44]	@ (8002f18 <__libc_init_array+0x40>)
 8002eea:	4c0c      	ldr	r4, [pc, #48]	@ (8002f1c <__libc_init_array+0x44>)
 8002eec:	f001 fe26 	bl	8004b3c <_init>
 8002ef0:	1b64      	subs	r4, r4, r5
 8002ef2:	10a4      	asrs	r4, r4, #2
 8002ef4:	2600      	movs	r6, #0
 8002ef6:	42a6      	cmp	r6, r4
 8002ef8:	d105      	bne.n	8002f06 <__libc_init_array+0x2e>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f00:	4798      	blx	r3
 8002f02:	3601      	adds	r6, #1
 8002f04:	e7ee      	b.n	8002ee4 <__libc_init_array+0xc>
 8002f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f0a:	4798      	blx	r3
 8002f0c:	3601      	adds	r6, #1
 8002f0e:	e7f2      	b.n	8002ef6 <__libc_init_array+0x1e>
 8002f10:	08004f48 	.word	0x08004f48
 8002f14:	08004f48 	.word	0x08004f48
 8002f18:	08004f48 	.word	0x08004f48
 8002f1c:	08004f4c 	.word	0x08004f4c

08002f20 <__retarget_lock_init_recursive>:
 8002f20:	4770      	bx	lr

08002f22 <__retarget_lock_acquire_recursive>:
 8002f22:	4770      	bx	lr

08002f24 <__retarget_lock_release_recursive>:
 8002f24:	4770      	bx	lr

08002f26 <quorem>:
 8002f26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f2a:	6903      	ldr	r3, [r0, #16]
 8002f2c:	690c      	ldr	r4, [r1, #16]
 8002f2e:	42a3      	cmp	r3, r4
 8002f30:	4607      	mov	r7, r0
 8002f32:	db7e      	blt.n	8003032 <quorem+0x10c>
 8002f34:	3c01      	subs	r4, #1
 8002f36:	f101 0814 	add.w	r8, r1, #20
 8002f3a:	00a3      	lsls	r3, r4, #2
 8002f3c:	f100 0514 	add.w	r5, r0, #20
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002f4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002f50:	3301      	adds	r3, #1
 8002f52:	429a      	cmp	r2, r3
 8002f54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002f58:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f5c:	d32e      	bcc.n	8002fbc <quorem+0x96>
 8002f5e:	f04f 0a00 	mov.w	sl, #0
 8002f62:	46c4      	mov	ip, r8
 8002f64:	46ae      	mov	lr, r5
 8002f66:	46d3      	mov	fp, sl
 8002f68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002f6c:	b298      	uxth	r0, r3
 8002f6e:	fb06 a000 	mla	r0, r6, r0, sl
 8002f72:	0c02      	lsrs	r2, r0, #16
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	fb06 2303 	mla	r3, r6, r3, r2
 8002f7a:	f8de 2000 	ldr.w	r2, [lr]
 8002f7e:	b280      	uxth	r0, r0
 8002f80:	b292      	uxth	r2, r2
 8002f82:	1a12      	subs	r2, r2, r0
 8002f84:	445a      	add	r2, fp
 8002f86:	f8de 0000 	ldr.w	r0, [lr]
 8002f8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002f94:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002f98:	b292      	uxth	r2, r2
 8002f9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002f9e:	45e1      	cmp	r9, ip
 8002fa0:	f84e 2b04 	str.w	r2, [lr], #4
 8002fa4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002fa8:	d2de      	bcs.n	8002f68 <quorem+0x42>
 8002faa:	9b00      	ldr	r3, [sp, #0]
 8002fac:	58eb      	ldr	r3, [r5, r3]
 8002fae:	b92b      	cbnz	r3, 8002fbc <quorem+0x96>
 8002fb0:	9b01      	ldr	r3, [sp, #4]
 8002fb2:	3b04      	subs	r3, #4
 8002fb4:	429d      	cmp	r5, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	d32f      	bcc.n	800301a <quorem+0xf4>
 8002fba:	613c      	str	r4, [r7, #16]
 8002fbc:	4638      	mov	r0, r7
 8002fbe:	f001 f97d 	bl	80042bc <__mcmp>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	db25      	blt.n	8003012 <quorem+0xec>
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f858 2b04 	ldr.w	r2, [r8], #4
 8002fce:	f8d1 c000 	ldr.w	ip, [r1]
 8002fd2:	fa1f fe82 	uxth.w	lr, r2
 8002fd6:	fa1f f38c 	uxth.w	r3, ip
 8002fda:	eba3 030e 	sub.w	r3, r3, lr
 8002fde:	4403      	add	r3, r0
 8002fe0:	0c12      	lsrs	r2, r2, #16
 8002fe2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002fe6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ff0:	45c1      	cmp	r9, r8
 8002ff2:	f841 3b04 	str.w	r3, [r1], #4
 8002ff6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002ffa:	d2e6      	bcs.n	8002fca <quorem+0xa4>
 8002ffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003000:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003004:	b922      	cbnz	r2, 8003010 <quorem+0xea>
 8003006:	3b04      	subs	r3, #4
 8003008:	429d      	cmp	r5, r3
 800300a:	461a      	mov	r2, r3
 800300c:	d30b      	bcc.n	8003026 <quorem+0x100>
 800300e:	613c      	str	r4, [r7, #16]
 8003010:	3601      	adds	r6, #1
 8003012:	4630      	mov	r0, r6
 8003014:	b003      	add	sp, #12
 8003016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	3b04      	subs	r3, #4
 800301e:	2a00      	cmp	r2, #0
 8003020:	d1cb      	bne.n	8002fba <quorem+0x94>
 8003022:	3c01      	subs	r4, #1
 8003024:	e7c6      	b.n	8002fb4 <quorem+0x8e>
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	3b04      	subs	r3, #4
 800302a:	2a00      	cmp	r2, #0
 800302c:	d1ef      	bne.n	800300e <quorem+0xe8>
 800302e:	3c01      	subs	r4, #1
 8003030:	e7ea      	b.n	8003008 <quorem+0xe2>
 8003032:	2000      	movs	r0, #0
 8003034:	e7ee      	b.n	8003014 <quorem+0xee>
	...

08003038 <_dtoa_r>:
 8003038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303c:	69c7      	ldr	r7, [r0, #28]
 800303e:	b097      	sub	sp, #92	@ 0x5c
 8003040:	4614      	mov	r4, r2
 8003042:	461d      	mov	r5, r3
 8003044:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003048:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800304a:	4683      	mov	fp, r0
 800304c:	b97f      	cbnz	r7, 800306e <_dtoa_r+0x36>
 800304e:	2010      	movs	r0, #16
 8003050:	f000 fe04 	bl	8003c5c <malloc>
 8003054:	4602      	mov	r2, r0
 8003056:	f8cb 001c 	str.w	r0, [fp, #28]
 800305a:	b920      	cbnz	r0, 8003066 <_dtoa_r+0x2e>
 800305c:	4ba8      	ldr	r3, [pc, #672]	@ (8003300 <_dtoa_r+0x2c8>)
 800305e:	21ef      	movs	r1, #239	@ 0xef
 8003060:	48a8      	ldr	r0, [pc, #672]	@ (8003304 <_dtoa_r+0x2cc>)
 8003062:	f001 fcbb 	bl	80049dc <__assert_func>
 8003066:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800306a:	6007      	str	r7, [r0, #0]
 800306c:	60c7      	str	r7, [r0, #12]
 800306e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003072:	6819      	ldr	r1, [r3, #0]
 8003074:	b159      	cbz	r1, 800308e <_dtoa_r+0x56>
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	604a      	str	r2, [r1, #4]
 800307a:	2301      	movs	r3, #1
 800307c:	4093      	lsls	r3, r2
 800307e:	608b      	str	r3, [r1, #8]
 8003080:	4658      	mov	r0, fp
 8003082:	f000 fee1 	bl	8003e48 <_Bfree>
 8003086:	f8db 301c 	ldr.w	r3, [fp, #28]
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	1e2b      	subs	r3, r5, #0
 8003090:	bfb9      	ittee	lt
 8003092:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003096:	9303      	strlt	r3, [sp, #12]
 8003098:	2300      	movge	r3, #0
 800309a:	6033      	strge	r3, [r6, #0]
 800309c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80030a0:	4b99      	ldr	r3, [pc, #612]	@ (8003308 <_dtoa_r+0x2d0>)
 80030a2:	bfbc      	itt	lt
 80030a4:	2201      	movlt	r2, #1
 80030a6:	6032      	strlt	r2, [r6, #0]
 80030a8:	ea33 0308 	bics.w	r3, r3, r8
 80030ac:	d112      	bne.n	80030d4 <_dtoa_r+0x9c>
 80030ae:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80030b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80030ba:	4323      	orrs	r3, r4
 80030bc:	f000 8551 	beq.w	8003b62 <_dtoa_r+0xb2a>
 80030c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80030c2:	f8df a248 	ldr.w	sl, [pc, #584]	@ 800330c <_dtoa_r+0x2d4>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8553 	beq.w	8003b72 <_dtoa_r+0xb3a>
 80030cc:	f10a 0303 	add.w	r3, sl, #3
 80030d0:	f000 bd4d 	b.w	8003b6e <_dtoa_r+0xb36>
 80030d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80030d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80030dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80030e0:	2200      	movs	r2, #0
 80030e2:	2300      	movs	r3, #0
 80030e4:	f7fd fd28 	bl	8000b38 <__aeabi_dcmpeq>
 80030e8:	4607      	mov	r7, r0
 80030ea:	b158      	cbz	r0, 8003104 <_dtoa_r+0xcc>
 80030ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80030ee:	2301      	movs	r3, #1
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80030f4:	b113      	cbz	r3, 80030fc <_dtoa_r+0xc4>
 80030f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80030f8:	4b85      	ldr	r3, [pc, #532]	@ (8003310 <_dtoa_r+0x2d8>)
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003314 <_dtoa_r+0x2dc>
 8003100:	f000 bd37 	b.w	8003b72 <_dtoa_r+0xb3a>
 8003104:	ab14      	add	r3, sp, #80	@ 0x50
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	ab15      	add	r3, sp, #84	@ 0x54
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	4658      	mov	r0, fp
 800310e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003112:	f001 f981 	bl	8004418 <__d2b>
 8003116:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800311a:	4681      	mov	r9, r0
 800311c:	2e00      	cmp	r6, #0
 800311e:	d076      	beq.n	800320e <_dtoa_r+0x1d6>
 8003120:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003122:	9712      	str	r7, [sp, #72]	@ 0x48
 8003124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800312c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003130:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003134:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003138:	4619      	mov	r1, r3
 800313a:	2200      	movs	r2, #0
 800313c:	4b76      	ldr	r3, [pc, #472]	@ (8003318 <_dtoa_r+0x2e0>)
 800313e:	f7fd f8db 	bl	80002f8 <__aeabi_dsub>
 8003142:	a369      	add	r3, pc, #420	@ (adr r3, 80032e8 <_dtoa_r+0x2b0>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd fa8e 	bl	8000668 <__aeabi_dmul>
 800314c:	a368      	add	r3, pc, #416	@ (adr r3, 80032f0 <_dtoa_r+0x2b8>)
 800314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003152:	f7fd f8d3 	bl	80002fc <__adddf3>
 8003156:	4604      	mov	r4, r0
 8003158:	4630      	mov	r0, r6
 800315a:	460d      	mov	r5, r1
 800315c:	f7fd fa1a 	bl	8000594 <__aeabi_i2d>
 8003160:	a365      	add	r3, pc, #404	@ (adr r3, 80032f8 <_dtoa_r+0x2c0>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f7fd fa7f 	bl	8000668 <__aeabi_dmul>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4620      	mov	r0, r4
 8003170:	4629      	mov	r1, r5
 8003172:	f7fd f8c3 	bl	80002fc <__adddf3>
 8003176:	4604      	mov	r4, r0
 8003178:	460d      	mov	r5, r1
 800317a:	f7fd fd25 	bl	8000bc8 <__aeabi_d2iz>
 800317e:	2200      	movs	r2, #0
 8003180:	4607      	mov	r7, r0
 8003182:	2300      	movs	r3, #0
 8003184:	4620      	mov	r0, r4
 8003186:	4629      	mov	r1, r5
 8003188:	f7fd fce0 	bl	8000b4c <__aeabi_dcmplt>
 800318c:	b140      	cbz	r0, 80031a0 <_dtoa_r+0x168>
 800318e:	4638      	mov	r0, r7
 8003190:	f7fd fa00 	bl	8000594 <__aeabi_i2d>
 8003194:	4622      	mov	r2, r4
 8003196:	462b      	mov	r3, r5
 8003198:	f7fd fcce 	bl	8000b38 <__aeabi_dcmpeq>
 800319c:	b900      	cbnz	r0, 80031a0 <_dtoa_r+0x168>
 800319e:	3f01      	subs	r7, #1
 80031a0:	2f16      	cmp	r7, #22
 80031a2:	d852      	bhi.n	800324a <_dtoa_r+0x212>
 80031a4:	4b5d      	ldr	r3, [pc, #372]	@ (800331c <_dtoa_r+0x2e4>)
 80031a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80031b2:	f7fd fccb 	bl	8000b4c <__aeabi_dcmplt>
 80031b6:	2800      	cmp	r0, #0
 80031b8:	d049      	beq.n	800324e <_dtoa_r+0x216>
 80031ba:	3f01      	subs	r7, #1
 80031bc:	2300      	movs	r3, #0
 80031be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80031c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80031c2:	1b9b      	subs	r3, r3, r6
 80031c4:	1e5a      	subs	r2, r3, #1
 80031c6:	bf44      	itt	mi
 80031c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80031cc:	2300      	movmi	r3, #0
 80031ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80031d0:	bf54      	ite	pl
 80031d2:	f04f 0800 	movpl.w	r8, #0
 80031d6:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80031d8:	2f00      	cmp	r7, #0
 80031da:	db3a      	blt.n	8003252 <_dtoa_r+0x21a>
 80031dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031de:	970e      	str	r7, [sp, #56]	@ 0x38
 80031e0:	443b      	add	r3, r7
 80031e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80031e4:	2300      	movs	r3, #0
 80031e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80031e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80031ea:	2b09      	cmp	r3, #9
 80031ec:	d865      	bhi.n	80032ba <_dtoa_r+0x282>
 80031ee:	2b05      	cmp	r3, #5
 80031f0:	bfc4      	itt	gt
 80031f2:	3b04      	subgt	r3, #4
 80031f4:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80031f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80031f8:	f1a3 0302 	sub.w	r3, r3, #2
 80031fc:	bfcc      	ite	gt
 80031fe:	2400      	movgt	r4, #0
 8003200:	2401      	movle	r4, #1
 8003202:	2b03      	cmp	r3, #3
 8003204:	d864      	bhi.n	80032d0 <_dtoa_r+0x298>
 8003206:	e8df f003 	tbb	[pc, r3]
 800320a:	382b      	.short	0x382b
 800320c:	5636      	.short	0x5636
 800320e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003212:	441e      	add	r6, r3
 8003214:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003218:	2b20      	cmp	r3, #32
 800321a:	bfc1      	itttt	gt
 800321c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003220:	fa08 f803 	lslgt.w	r8, r8, r3
 8003224:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003228:	fa24 f303 	lsrgt.w	r3, r4, r3
 800322c:	bfd6      	itet	le
 800322e:	f1c3 0320 	rsble	r3, r3, #32
 8003232:	ea48 0003 	orrgt.w	r0, r8, r3
 8003236:	fa04 f003 	lslle.w	r0, r4, r3
 800323a:	f7fd f99b 	bl	8000574 <__aeabi_ui2d>
 800323e:	2201      	movs	r2, #1
 8003240:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003244:	3e01      	subs	r6, #1
 8003246:	9212      	str	r2, [sp, #72]	@ 0x48
 8003248:	e776      	b.n	8003138 <_dtoa_r+0x100>
 800324a:	2301      	movs	r3, #1
 800324c:	e7b7      	b.n	80031be <_dtoa_r+0x186>
 800324e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003250:	e7b6      	b.n	80031c0 <_dtoa_r+0x188>
 8003252:	427b      	negs	r3, r7
 8003254:	930a      	str	r3, [sp, #40]	@ 0x28
 8003256:	2300      	movs	r3, #0
 8003258:	eba8 0807 	sub.w	r8, r8, r7
 800325c:	930e      	str	r3, [sp, #56]	@ 0x38
 800325e:	e7c3      	b.n	80031e8 <_dtoa_r+0x1b0>
 8003260:	2300      	movs	r3, #0
 8003262:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003264:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003266:	2b00      	cmp	r3, #0
 8003268:	dc35      	bgt.n	80032d6 <_dtoa_r+0x29e>
 800326a:	2301      	movs	r3, #1
 800326c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003270:	461a      	mov	r2, r3
 8003272:	9221      	str	r2, [sp, #132]	@ 0x84
 8003274:	e00b      	b.n	800328e <_dtoa_r+0x256>
 8003276:	2301      	movs	r3, #1
 8003278:	e7f3      	b.n	8003262 <_dtoa_r+0x22a>
 800327a:	2300      	movs	r3, #0
 800327c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800327e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	9308      	str	r3, [sp, #32]
 8003284:	3301      	adds	r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	9307      	str	r3, [sp, #28]
 800328a:	bfb8      	it	lt
 800328c:	2301      	movlt	r3, #1
 800328e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003292:	2100      	movs	r1, #0
 8003294:	2204      	movs	r2, #4
 8003296:	f102 0514 	add.w	r5, r2, #20
 800329a:	429d      	cmp	r5, r3
 800329c:	d91f      	bls.n	80032de <_dtoa_r+0x2a6>
 800329e:	6041      	str	r1, [r0, #4]
 80032a0:	4658      	mov	r0, fp
 80032a2:	f000 fd91 	bl	8003dc8 <_Balloc>
 80032a6:	4682      	mov	sl, r0
 80032a8:	2800      	cmp	r0, #0
 80032aa:	d13b      	bne.n	8003324 <_dtoa_r+0x2ec>
 80032ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003320 <_dtoa_r+0x2e8>)
 80032ae:	4602      	mov	r2, r0
 80032b0:	f240 11af 	movw	r1, #431	@ 0x1af
 80032b4:	e6d4      	b.n	8003060 <_dtoa_r+0x28>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e7e0      	b.n	800327c <_dtoa_r+0x244>
 80032ba:	2401      	movs	r4, #1
 80032bc:	2300      	movs	r3, #0
 80032be:	9320      	str	r3, [sp, #128]	@ 0x80
 80032c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
 80032c6:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80032ca:	2200      	movs	r2, #0
 80032cc:	2312      	movs	r3, #18
 80032ce:	e7d0      	b.n	8003272 <_dtoa_r+0x23a>
 80032d0:	2301      	movs	r3, #1
 80032d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032d4:	e7f5      	b.n	80032c2 <_dtoa_r+0x28a>
 80032d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80032d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80032dc:	e7d7      	b.n	800328e <_dtoa_r+0x256>
 80032de:	3101      	adds	r1, #1
 80032e0:	0052      	lsls	r2, r2, #1
 80032e2:	e7d8      	b.n	8003296 <_dtoa_r+0x25e>
 80032e4:	f3af 8000 	nop.w
 80032e8:	636f4361 	.word	0x636f4361
 80032ec:	3fd287a7 	.word	0x3fd287a7
 80032f0:	8b60c8b3 	.word	0x8b60c8b3
 80032f4:	3fc68a28 	.word	0x3fc68a28
 80032f8:	509f79fb 	.word	0x509f79fb
 80032fc:	3fd34413 	.word	0x3fd34413
 8003300:	08004c0f 	.word	0x08004c0f
 8003304:	08004c26 	.word	0x08004c26
 8003308:	7ff00000 	.word	0x7ff00000
 800330c:	08004c0b 	.word	0x08004c0b
 8003310:	08004bdf 	.word	0x08004bdf
 8003314:	08004bde 	.word	0x08004bde
 8003318:	3ff80000 	.word	0x3ff80000
 800331c:	08004d20 	.word	0x08004d20
 8003320:	08004c7e 	.word	0x08004c7e
 8003324:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003328:	6018      	str	r0, [r3, #0]
 800332a:	9b07      	ldr	r3, [sp, #28]
 800332c:	2b0e      	cmp	r3, #14
 800332e:	f200 80a4 	bhi.w	800347a <_dtoa_r+0x442>
 8003332:	2c00      	cmp	r4, #0
 8003334:	f000 80a1 	beq.w	800347a <_dtoa_r+0x442>
 8003338:	2f00      	cmp	r7, #0
 800333a:	dd33      	ble.n	80033a4 <_dtoa_r+0x36c>
 800333c:	4b86      	ldr	r3, [pc, #536]	@ (8003558 <_dtoa_r+0x520>)
 800333e:	f007 020f 	and.w	r2, r7, #15
 8003342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003346:	e9d3 3400 	ldrd	r3, r4, [r3]
 800334a:	05f8      	lsls	r0, r7, #23
 800334c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003350:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003354:	d516      	bpl.n	8003384 <_dtoa_r+0x34c>
 8003356:	4b81      	ldr	r3, [pc, #516]	@ (800355c <_dtoa_r+0x524>)
 8003358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800335c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003360:	f7fd faac 	bl	80008bc <__aeabi_ddiv>
 8003364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003368:	f004 040f 	and.w	r4, r4, #15
 800336c:	2603      	movs	r6, #3
 800336e:	4d7b      	ldr	r5, [pc, #492]	@ (800355c <_dtoa_r+0x524>)
 8003370:	b954      	cbnz	r4, 8003388 <_dtoa_r+0x350>
 8003372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800337a:	f7fd fa9f 	bl	80008bc <__aeabi_ddiv>
 800337e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003382:	e028      	b.n	80033d6 <_dtoa_r+0x39e>
 8003384:	2602      	movs	r6, #2
 8003386:	e7f2      	b.n	800336e <_dtoa_r+0x336>
 8003388:	07e1      	lsls	r1, r4, #31
 800338a:	d508      	bpl.n	800339e <_dtoa_r+0x366>
 800338c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003390:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003394:	f7fd f968 	bl	8000668 <__aeabi_dmul>
 8003398:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800339c:	3601      	adds	r6, #1
 800339e:	1064      	asrs	r4, r4, #1
 80033a0:	3508      	adds	r5, #8
 80033a2:	e7e5      	b.n	8003370 <_dtoa_r+0x338>
 80033a4:	f000 80d2 	beq.w	800354c <_dtoa_r+0x514>
 80033a8:	427c      	negs	r4, r7
 80033aa:	4b6b      	ldr	r3, [pc, #428]	@ (8003558 <_dtoa_r+0x520>)
 80033ac:	4d6b      	ldr	r5, [pc, #428]	@ (800355c <_dtoa_r+0x524>)
 80033ae:	f004 020f 	and.w	r2, r4, #15
 80033b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80033be:	f7fd f953 	bl	8000668 <__aeabi_dmul>
 80033c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033c6:	1124      	asrs	r4, r4, #4
 80033c8:	2300      	movs	r3, #0
 80033ca:	2602      	movs	r6, #2
 80033cc:	2c00      	cmp	r4, #0
 80033ce:	f040 80b2 	bne.w	8003536 <_dtoa_r+0x4fe>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1d3      	bne.n	800337e <_dtoa_r+0x346>
 80033d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80033d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80b7 	beq.w	8003550 <_dtoa_r+0x518>
 80033e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003560 <_dtoa_r+0x528>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	4620      	mov	r0, r4
 80033e8:	4629      	mov	r1, r5
 80033ea:	f7fd fbaf 	bl	8000b4c <__aeabi_dcmplt>
 80033ee:	2800      	cmp	r0, #0
 80033f0:	f000 80ae 	beq.w	8003550 <_dtoa_r+0x518>
 80033f4:	9b07      	ldr	r3, [sp, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80aa 	beq.w	8003550 <_dtoa_r+0x518>
 80033fc:	9b08      	ldr	r3, [sp, #32]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	dd37      	ble.n	8003472 <_dtoa_r+0x43a>
 8003402:	1e7b      	subs	r3, r7, #1
 8003404:	9304      	str	r3, [sp, #16]
 8003406:	4620      	mov	r0, r4
 8003408:	4b56      	ldr	r3, [pc, #344]	@ (8003564 <_dtoa_r+0x52c>)
 800340a:	2200      	movs	r2, #0
 800340c:	4629      	mov	r1, r5
 800340e:	f7fd f92b 	bl	8000668 <__aeabi_dmul>
 8003412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003416:	9c08      	ldr	r4, [sp, #32]
 8003418:	3601      	adds	r6, #1
 800341a:	4630      	mov	r0, r6
 800341c:	f7fd f8ba 	bl	8000594 <__aeabi_i2d>
 8003420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003424:	f7fd f920 	bl	8000668 <__aeabi_dmul>
 8003428:	4b4f      	ldr	r3, [pc, #316]	@ (8003568 <_dtoa_r+0x530>)
 800342a:	2200      	movs	r2, #0
 800342c:	f7fc ff66 	bl	80002fc <__adddf3>
 8003430:	4605      	mov	r5, r0
 8003432:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003436:	2c00      	cmp	r4, #0
 8003438:	f040 809a 	bne.w	8003570 <_dtoa_r+0x538>
 800343c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003440:	4b4a      	ldr	r3, [pc, #296]	@ (800356c <_dtoa_r+0x534>)
 8003442:	2200      	movs	r2, #0
 8003444:	f7fc ff58 	bl	80002f8 <__aeabi_dsub>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003450:	462a      	mov	r2, r5
 8003452:	4633      	mov	r3, r6
 8003454:	f7fd fb98 	bl	8000b88 <__aeabi_dcmpgt>
 8003458:	2800      	cmp	r0, #0
 800345a:	f040 828e 	bne.w	800397a <_dtoa_r+0x942>
 800345e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003462:	462a      	mov	r2, r5
 8003464:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003468:	f7fd fb70 	bl	8000b4c <__aeabi_dcmplt>
 800346c:	2800      	cmp	r0, #0
 800346e:	f040 8127 	bne.w	80036c0 <_dtoa_r+0x688>
 8003472:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003476:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800347a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800347c:	2b00      	cmp	r3, #0
 800347e:	f2c0 8163 	blt.w	8003748 <_dtoa_r+0x710>
 8003482:	2f0e      	cmp	r7, #14
 8003484:	f300 8160 	bgt.w	8003748 <_dtoa_r+0x710>
 8003488:	4b33      	ldr	r3, [pc, #204]	@ (8003558 <_dtoa_r+0x520>)
 800348a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800348e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003492:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003496:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003498:	2b00      	cmp	r3, #0
 800349a:	da03      	bge.n	80034a4 <_dtoa_r+0x46c>
 800349c:	9b07      	ldr	r3, [sp, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f340 8100 	ble.w	80036a4 <_dtoa_r+0x66c>
 80034a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80034a8:	4656      	mov	r6, sl
 80034aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034ae:	4620      	mov	r0, r4
 80034b0:	4629      	mov	r1, r5
 80034b2:	f7fd fa03 	bl	80008bc <__aeabi_ddiv>
 80034b6:	f7fd fb87 	bl	8000bc8 <__aeabi_d2iz>
 80034ba:	4680      	mov	r8, r0
 80034bc:	f7fd f86a 	bl	8000594 <__aeabi_i2d>
 80034c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034c4:	f7fd f8d0 	bl	8000668 <__aeabi_dmul>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80034d4:	f7fc ff10 	bl	80002f8 <__aeabi_dsub>
 80034d8:	f806 4b01 	strb.w	r4, [r6], #1
 80034dc:	9d07      	ldr	r5, [sp, #28]
 80034de:	eba6 040a 	sub.w	r4, r6, sl
 80034e2:	42a5      	cmp	r5, r4
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	f040 8116 	bne.w	8003718 <_dtoa_r+0x6e0>
 80034ec:	f7fc ff06 	bl	80002fc <__adddf3>
 80034f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034f4:	4604      	mov	r4, r0
 80034f6:	460d      	mov	r5, r1
 80034f8:	f7fd fb46 	bl	8000b88 <__aeabi_dcmpgt>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	f040 80f8 	bne.w	80036f2 <_dtoa_r+0x6ba>
 8003502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003506:	4620      	mov	r0, r4
 8003508:	4629      	mov	r1, r5
 800350a:	f7fd fb15 	bl	8000b38 <__aeabi_dcmpeq>
 800350e:	b118      	cbz	r0, 8003518 <_dtoa_r+0x4e0>
 8003510:	f018 0f01 	tst.w	r8, #1
 8003514:	f040 80ed 	bne.w	80036f2 <_dtoa_r+0x6ba>
 8003518:	4649      	mov	r1, r9
 800351a:	4658      	mov	r0, fp
 800351c:	f000 fc94 	bl	8003e48 <_Bfree>
 8003520:	2300      	movs	r3, #0
 8003522:	7033      	strb	r3, [r6, #0]
 8003524:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003526:	3701      	adds	r7, #1
 8003528:	601f      	str	r7, [r3, #0]
 800352a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8320 	beq.w	8003b72 <_dtoa_r+0xb3a>
 8003532:	601e      	str	r6, [r3, #0]
 8003534:	e31d      	b.n	8003b72 <_dtoa_r+0xb3a>
 8003536:	07e2      	lsls	r2, r4, #31
 8003538:	d505      	bpl.n	8003546 <_dtoa_r+0x50e>
 800353a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800353e:	f7fd f893 	bl	8000668 <__aeabi_dmul>
 8003542:	3601      	adds	r6, #1
 8003544:	2301      	movs	r3, #1
 8003546:	1064      	asrs	r4, r4, #1
 8003548:	3508      	adds	r5, #8
 800354a:	e73f      	b.n	80033cc <_dtoa_r+0x394>
 800354c:	2602      	movs	r6, #2
 800354e:	e742      	b.n	80033d6 <_dtoa_r+0x39e>
 8003550:	9c07      	ldr	r4, [sp, #28]
 8003552:	9704      	str	r7, [sp, #16]
 8003554:	e761      	b.n	800341a <_dtoa_r+0x3e2>
 8003556:	bf00      	nop
 8003558:	08004d20 	.word	0x08004d20
 800355c:	08004cf8 	.word	0x08004cf8
 8003560:	3ff00000 	.word	0x3ff00000
 8003564:	40240000 	.word	0x40240000
 8003568:	401c0000 	.word	0x401c0000
 800356c:	40140000 	.word	0x40140000
 8003570:	4b70      	ldr	r3, [pc, #448]	@ (8003734 <_dtoa_r+0x6fc>)
 8003572:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003574:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003578:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800357c:	4454      	add	r4, sl
 800357e:	2900      	cmp	r1, #0
 8003580:	d045      	beq.n	800360e <_dtoa_r+0x5d6>
 8003582:	496d      	ldr	r1, [pc, #436]	@ (8003738 <_dtoa_r+0x700>)
 8003584:	2000      	movs	r0, #0
 8003586:	f7fd f999 	bl	80008bc <__aeabi_ddiv>
 800358a:	4633      	mov	r3, r6
 800358c:	462a      	mov	r2, r5
 800358e:	f7fc feb3 	bl	80002f8 <__aeabi_dsub>
 8003592:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003596:	4656      	mov	r6, sl
 8003598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800359c:	f7fd fb14 	bl	8000bc8 <__aeabi_d2iz>
 80035a0:	4605      	mov	r5, r0
 80035a2:	f7fc fff7 	bl	8000594 <__aeabi_i2d>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035ae:	f7fc fea3 	bl	80002f8 <__aeabi_dsub>
 80035b2:	3530      	adds	r5, #48	@ 0x30
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035bc:	f806 5b01 	strb.w	r5, [r6], #1
 80035c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80035c4:	f7fd fac2 	bl	8000b4c <__aeabi_dcmplt>
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d163      	bne.n	8003694 <_dtoa_r+0x65c>
 80035cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035d0:	495a      	ldr	r1, [pc, #360]	@ (800373c <_dtoa_r+0x704>)
 80035d2:	2000      	movs	r0, #0
 80035d4:	f7fc fe90 	bl	80002f8 <__aeabi_dsub>
 80035d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80035dc:	f7fd fab6 	bl	8000b4c <__aeabi_dcmplt>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	f040 8087 	bne.w	80036f4 <_dtoa_r+0x6bc>
 80035e6:	42a6      	cmp	r6, r4
 80035e8:	f43f af43 	beq.w	8003472 <_dtoa_r+0x43a>
 80035ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80035f0:	4b53      	ldr	r3, [pc, #332]	@ (8003740 <_dtoa_r+0x708>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	f7fd f838 	bl	8000668 <__aeabi_dmul>
 80035f8:	4b51      	ldr	r3, [pc, #324]	@ (8003740 <_dtoa_r+0x708>)
 80035fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80035fe:	2200      	movs	r2, #0
 8003600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003604:	f7fd f830 	bl	8000668 <__aeabi_dmul>
 8003608:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800360c:	e7c4      	b.n	8003598 <_dtoa_r+0x560>
 800360e:	4631      	mov	r1, r6
 8003610:	4628      	mov	r0, r5
 8003612:	f7fd f829 	bl	8000668 <__aeabi_dmul>
 8003616:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800361a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800361c:	4656      	mov	r6, sl
 800361e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003622:	f7fd fad1 	bl	8000bc8 <__aeabi_d2iz>
 8003626:	4605      	mov	r5, r0
 8003628:	f7fc ffb4 	bl	8000594 <__aeabi_i2d>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003634:	f7fc fe60 	bl	80002f8 <__aeabi_dsub>
 8003638:	3530      	adds	r5, #48	@ 0x30
 800363a:	f806 5b01 	strb.w	r5, [r6], #1
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	42a6      	cmp	r6, r4
 8003644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	d124      	bne.n	8003698 <_dtoa_r+0x660>
 800364e:	4b3a      	ldr	r3, [pc, #232]	@ (8003738 <_dtoa_r+0x700>)
 8003650:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003654:	f7fc fe52 	bl	80002fc <__adddf3>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003660:	f7fd fa92 	bl	8000b88 <__aeabi_dcmpgt>
 8003664:	2800      	cmp	r0, #0
 8003666:	d145      	bne.n	80036f4 <_dtoa_r+0x6bc>
 8003668:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800366c:	4932      	ldr	r1, [pc, #200]	@ (8003738 <_dtoa_r+0x700>)
 800366e:	2000      	movs	r0, #0
 8003670:	f7fc fe42 	bl	80002f8 <__aeabi_dsub>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800367c:	f7fd fa66 	bl	8000b4c <__aeabi_dcmplt>
 8003680:	2800      	cmp	r0, #0
 8003682:	f43f aef6 	beq.w	8003472 <_dtoa_r+0x43a>
 8003686:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003688:	1e73      	subs	r3, r6, #1
 800368a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800368c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003690:	2b30      	cmp	r3, #48	@ 0x30
 8003692:	d0f8      	beq.n	8003686 <_dtoa_r+0x64e>
 8003694:	9f04      	ldr	r7, [sp, #16]
 8003696:	e73f      	b.n	8003518 <_dtoa_r+0x4e0>
 8003698:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <_dtoa_r+0x708>)
 800369a:	f7fc ffe5 	bl	8000668 <__aeabi_dmul>
 800369e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036a2:	e7bc      	b.n	800361e <_dtoa_r+0x5e6>
 80036a4:	d10c      	bne.n	80036c0 <_dtoa_r+0x688>
 80036a6:	4b27      	ldr	r3, [pc, #156]	@ (8003744 <_dtoa_r+0x70c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036ae:	f7fc ffdb 	bl	8000668 <__aeabi_dmul>
 80036b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036b6:	f7fd fa5d 	bl	8000b74 <__aeabi_dcmpge>
 80036ba:	2800      	cmp	r0, #0
 80036bc:	f000 815b 	beq.w	8003976 <_dtoa_r+0x93e>
 80036c0:	2400      	movs	r4, #0
 80036c2:	4625      	mov	r5, r4
 80036c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80036c6:	43db      	mvns	r3, r3
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	4656      	mov	r6, sl
 80036cc:	2700      	movs	r7, #0
 80036ce:	4621      	mov	r1, r4
 80036d0:	4658      	mov	r0, fp
 80036d2:	f000 fbb9 	bl	8003e48 <_Bfree>
 80036d6:	2d00      	cmp	r5, #0
 80036d8:	d0dc      	beq.n	8003694 <_dtoa_r+0x65c>
 80036da:	b12f      	cbz	r7, 80036e8 <_dtoa_r+0x6b0>
 80036dc:	42af      	cmp	r7, r5
 80036de:	d003      	beq.n	80036e8 <_dtoa_r+0x6b0>
 80036e0:	4639      	mov	r1, r7
 80036e2:	4658      	mov	r0, fp
 80036e4:	f000 fbb0 	bl	8003e48 <_Bfree>
 80036e8:	4629      	mov	r1, r5
 80036ea:	4658      	mov	r0, fp
 80036ec:	f000 fbac 	bl	8003e48 <_Bfree>
 80036f0:	e7d0      	b.n	8003694 <_dtoa_r+0x65c>
 80036f2:	9704      	str	r7, [sp, #16]
 80036f4:	4633      	mov	r3, r6
 80036f6:	461e      	mov	r6, r3
 80036f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80036fc:	2a39      	cmp	r2, #57	@ 0x39
 80036fe:	d107      	bne.n	8003710 <_dtoa_r+0x6d8>
 8003700:	459a      	cmp	sl, r3
 8003702:	d1f8      	bne.n	80036f6 <_dtoa_r+0x6be>
 8003704:	9a04      	ldr	r2, [sp, #16]
 8003706:	3201      	adds	r2, #1
 8003708:	9204      	str	r2, [sp, #16]
 800370a:	2230      	movs	r2, #48	@ 0x30
 800370c:	f88a 2000 	strb.w	r2, [sl]
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	3201      	adds	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e7bd      	b.n	8003694 <_dtoa_r+0x65c>
 8003718:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <_dtoa_r+0x708>)
 800371a:	2200      	movs	r2, #0
 800371c:	f7fc ffa4 	bl	8000668 <__aeabi_dmul>
 8003720:	2200      	movs	r2, #0
 8003722:	2300      	movs	r3, #0
 8003724:	4604      	mov	r4, r0
 8003726:	460d      	mov	r5, r1
 8003728:	f7fd fa06 	bl	8000b38 <__aeabi_dcmpeq>
 800372c:	2800      	cmp	r0, #0
 800372e:	f43f aebc 	beq.w	80034aa <_dtoa_r+0x472>
 8003732:	e6f1      	b.n	8003518 <_dtoa_r+0x4e0>
 8003734:	08004d20 	.word	0x08004d20
 8003738:	3fe00000 	.word	0x3fe00000
 800373c:	3ff00000 	.word	0x3ff00000
 8003740:	40240000 	.word	0x40240000
 8003744:	40140000 	.word	0x40140000
 8003748:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800374a:	2a00      	cmp	r2, #0
 800374c:	f000 80db 	beq.w	8003906 <_dtoa_r+0x8ce>
 8003750:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003752:	2a01      	cmp	r2, #1
 8003754:	f300 80bf 	bgt.w	80038d6 <_dtoa_r+0x89e>
 8003758:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800375a:	2a00      	cmp	r2, #0
 800375c:	f000 80b7 	beq.w	80038ce <_dtoa_r+0x896>
 8003760:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003764:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003766:	4646      	mov	r6, r8
 8003768:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800376a:	2101      	movs	r1, #1
 800376c:	441a      	add	r2, r3
 800376e:	4658      	mov	r0, fp
 8003770:	4498      	add	r8, r3
 8003772:	9209      	str	r2, [sp, #36]	@ 0x24
 8003774:	f000 fc1c 	bl	8003fb0 <__i2b>
 8003778:	4605      	mov	r5, r0
 800377a:	b15e      	cbz	r6, 8003794 <_dtoa_r+0x75c>
 800377c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	dd08      	ble.n	8003794 <_dtoa_r+0x75c>
 8003782:	42b3      	cmp	r3, r6
 8003784:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003786:	bfa8      	it	ge
 8003788:	4633      	movge	r3, r6
 800378a:	eba8 0803 	sub.w	r8, r8, r3
 800378e:	1af6      	subs	r6, r6, r3
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	9309      	str	r3, [sp, #36]	@ 0x24
 8003794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003796:	b1f3      	cbz	r3, 80037d6 <_dtoa_r+0x79e>
 8003798:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80b7 	beq.w	800390e <_dtoa_r+0x8d6>
 80037a0:	b18c      	cbz	r4, 80037c6 <_dtoa_r+0x78e>
 80037a2:	4629      	mov	r1, r5
 80037a4:	4622      	mov	r2, r4
 80037a6:	4658      	mov	r0, fp
 80037a8:	f000 fcc2 	bl	8004130 <__pow5mult>
 80037ac:	464a      	mov	r2, r9
 80037ae:	4601      	mov	r1, r0
 80037b0:	4605      	mov	r5, r0
 80037b2:	4658      	mov	r0, fp
 80037b4:	f000 fc12 	bl	8003fdc <__multiply>
 80037b8:	4649      	mov	r1, r9
 80037ba:	9004      	str	r0, [sp, #16]
 80037bc:	4658      	mov	r0, fp
 80037be:	f000 fb43 	bl	8003e48 <_Bfree>
 80037c2:	9b04      	ldr	r3, [sp, #16]
 80037c4:	4699      	mov	r9, r3
 80037c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037c8:	1b1a      	subs	r2, r3, r4
 80037ca:	d004      	beq.n	80037d6 <_dtoa_r+0x79e>
 80037cc:	4649      	mov	r1, r9
 80037ce:	4658      	mov	r0, fp
 80037d0:	f000 fcae 	bl	8004130 <__pow5mult>
 80037d4:	4681      	mov	r9, r0
 80037d6:	2101      	movs	r1, #1
 80037d8:	4658      	mov	r0, fp
 80037da:	f000 fbe9 	bl	8003fb0 <__i2b>
 80037de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80037e0:	4604      	mov	r4, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 81c9 	beq.w	8003b7a <_dtoa_r+0xb42>
 80037e8:	461a      	mov	r2, r3
 80037ea:	4601      	mov	r1, r0
 80037ec:	4658      	mov	r0, fp
 80037ee:	f000 fc9f 	bl	8004130 <__pow5mult>
 80037f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	4604      	mov	r4, r0
 80037f8:	f300 808f 	bgt.w	800391a <_dtoa_r+0x8e2>
 80037fc:	9b02      	ldr	r3, [sp, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f040 8087 	bne.w	8003912 <_dtoa_r+0x8da>
 8003804:	9b03      	ldr	r3, [sp, #12]
 8003806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 8083 	bne.w	8003916 <_dtoa_r+0x8de>
 8003810:	9b03      	ldr	r3, [sp, #12]
 8003812:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003816:	0d1b      	lsrs	r3, r3, #20
 8003818:	051b      	lsls	r3, r3, #20
 800381a:	b12b      	cbz	r3, 8003828 <_dtoa_r+0x7f0>
 800381c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800381e:	3301      	adds	r3, #1
 8003820:	9309      	str	r3, [sp, #36]	@ 0x24
 8003822:	f108 0801 	add.w	r8, r8, #1
 8003826:	2301      	movs	r3, #1
 8003828:	930a      	str	r3, [sp, #40]	@ 0x28
 800382a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 81aa 	beq.w	8003b86 <_dtoa_r+0xb4e>
 8003832:	6923      	ldr	r3, [r4, #16]
 8003834:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003838:	6918      	ldr	r0, [r3, #16]
 800383a:	f000 fb6d 	bl	8003f18 <__hi0bits>
 800383e:	f1c0 0020 	rsb	r0, r0, #32
 8003842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003844:	4418      	add	r0, r3
 8003846:	f010 001f 	ands.w	r0, r0, #31
 800384a:	d071      	beq.n	8003930 <_dtoa_r+0x8f8>
 800384c:	f1c0 0320 	rsb	r3, r0, #32
 8003850:	2b04      	cmp	r3, #4
 8003852:	dd65      	ble.n	8003920 <_dtoa_r+0x8e8>
 8003854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003856:	f1c0 001c 	rsb	r0, r0, #28
 800385a:	4403      	add	r3, r0
 800385c:	4480      	add	r8, r0
 800385e:	4406      	add	r6, r0
 8003860:	9309      	str	r3, [sp, #36]	@ 0x24
 8003862:	f1b8 0f00 	cmp.w	r8, #0
 8003866:	dd05      	ble.n	8003874 <_dtoa_r+0x83c>
 8003868:	4649      	mov	r1, r9
 800386a:	4642      	mov	r2, r8
 800386c:	4658      	mov	r0, fp
 800386e:	f000 fcb9 	bl	80041e4 <__lshift>
 8003872:	4681      	mov	r9, r0
 8003874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	dd05      	ble.n	8003886 <_dtoa_r+0x84e>
 800387a:	4621      	mov	r1, r4
 800387c:	461a      	mov	r2, r3
 800387e:	4658      	mov	r0, fp
 8003880:	f000 fcb0 	bl	80041e4 <__lshift>
 8003884:	4604      	mov	r4, r0
 8003886:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d053      	beq.n	8003934 <_dtoa_r+0x8fc>
 800388c:	4621      	mov	r1, r4
 800388e:	4648      	mov	r0, r9
 8003890:	f000 fd14 	bl	80042bc <__mcmp>
 8003894:	2800      	cmp	r0, #0
 8003896:	da4d      	bge.n	8003934 <_dtoa_r+0x8fc>
 8003898:	1e7b      	subs	r3, r7, #1
 800389a:	9304      	str	r3, [sp, #16]
 800389c:	4649      	mov	r1, r9
 800389e:	2300      	movs	r3, #0
 80038a0:	220a      	movs	r2, #10
 80038a2:	4658      	mov	r0, fp
 80038a4:	f000 faf2 	bl	8003e8c <__multadd>
 80038a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80038aa:	4681      	mov	r9, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 816c 	beq.w	8003b8a <_dtoa_r+0xb52>
 80038b2:	2300      	movs	r3, #0
 80038b4:	4629      	mov	r1, r5
 80038b6:	220a      	movs	r2, #10
 80038b8:	4658      	mov	r0, fp
 80038ba:	f000 fae7 	bl	8003e8c <__multadd>
 80038be:	9b08      	ldr	r3, [sp, #32]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	4605      	mov	r5, r0
 80038c4:	dc61      	bgt.n	800398a <_dtoa_r+0x952>
 80038c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	dc3b      	bgt.n	8003944 <_dtoa_r+0x90c>
 80038cc:	e05d      	b.n	800398a <_dtoa_r+0x952>
 80038ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80038d0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80038d4:	e746      	b.n	8003764 <_dtoa_r+0x72c>
 80038d6:	9b07      	ldr	r3, [sp, #28]
 80038d8:	1e5c      	subs	r4, r3, #1
 80038da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80038dc:	42a3      	cmp	r3, r4
 80038de:	bfbf      	itttt	lt
 80038e0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80038e2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80038e4:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80038e6:	1ae3      	sublt	r3, r4, r3
 80038e8:	bfb4      	ite	lt
 80038ea:	18d2      	addlt	r2, r2, r3
 80038ec:	1b1c      	subge	r4, r3, r4
 80038ee:	9b07      	ldr	r3, [sp, #28]
 80038f0:	bfbc      	itt	lt
 80038f2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80038f4:	2400      	movlt	r4, #0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bfb5      	itete	lt
 80038fa:	eba8 0603 	sublt.w	r6, r8, r3
 80038fe:	9b07      	ldrge	r3, [sp, #28]
 8003900:	2300      	movlt	r3, #0
 8003902:	4646      	movge	r6, r8
 8003904:	e730      	b.n	8003768 <_dtoa_r+0x730>
 8003906:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003908:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800390a:	4646      	mov	r6, r8
 800390c:	e735      	b.n	800377a <_dtoa_r+0x742>
 800390e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003910:	e75c      	b.n	80037cc <_dtoa_r+0x794>
 8003912:	2300      	movs	r3, #0
 8003914:	e788      	b.n	8003828 <_dtoa_r+0x7f0>
 8003916:	9b02      	ldr	r3, [sp, #8]
 8003918:	e786      	b.n	8003828 <_dtoa_r+0x7f0>
 800391a:	2300      	movs	r3, #0
 800391c:	930a      	str	r3, [sp, #40]	@ 0x28
 800391e:	e788      	b.n	8003832 <_dtoa_r+0x7fa>
 8003920:	d09f      	beq.n	8003862 <_dtoa_r+0x82a>
 8003922:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003924:	331c      	adds	r3, #28
 8003926:	441a      	add	r2, r3
 8003928:	4498      	add	r8, r3
 800392a:	441e      	add	r6, r3
 800392c:	9209      	str	r2, [sp, #36]	@ 0x24
 800392e:	e798      	b.n	8003862 <_dtoa_r+0x82a>
 8003930:	4603      	mov	r3, r0
 8003932:	e7f6      	b.n	8003922 <_dtoa_r+0x8ea>
 8003934:	9b07      	ldr	r3, [sp, #28]
 8003936:	9704      	str	r7, [sp, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	dc20      	bgt.n	800397e <_dtoa_r+0x946>
 800393c:	9308      	str	r3, [sp, #32]
 800393e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003940:	2b02      	cmp	r3, #2
 8003942:	dd1e      	ble.n	8003982 <_dtoa_r+0x94a>
 8003944:	9b08      	ldr	r3, [sp, #32]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f47f aebc 	bne.w	80036c4 <_dtoa_r+0x68c>
 800394c:	4621      	mov	r1, r4
 800394e:	2205      	movs	r2, #5
 8003950:	4658      	mov	r0, fp
 8003952:	f000 fa9b 	bl	8003e8c <__multadd>
 8003956:	4601      	mov	r1, r0
 8003958:	4604      	mov	r4, r0
 800395a:	4648      	mov	r0, r9
 800395c:	f000 fcae 	bl	80042bc <__mcmp>
 8003960:	2800      	cmp	r0, #0
 8003962:	f77f aeaf 	ble.w	80036c4 <_dtoa_r+0x68c>
 8003966:	4656      	mov	r6, sl
 8003968:	2331      	movs	r3, #49	@ 0x31
 800396a:	f806 3b01 	strb.w	r3, [r6], #1
 800396e:	9b04      	ldr	r3, [sp, #16]
 8003970:	3301      	adds	r3, #1
 8003972:	9304      	str	r3, [sp, #16]
 8003974:	e6aa      	b.n	80036cc <_dtoa_r+0x694>
 8003976:	9c07      	ldr	r4, [sp, #28]
 8003978:	9704      	str	r7, [sp, #16]
 800397a:	4625      	mov	r5, r4
 800397c:	e7f3      	b.n	8003966 <_dtoa_r+0x92e>
 800397e:	9b07      	ldr	r3, [sp, #28]
 8003980:	9308      	str	r3, [sp, #32]
 8003982:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8104 	beq.w	8003b92 <_dtoa_r+0xb5a>
 800398a:	2e00      	cmp	r6, #0
 800398c:	dd05      	ble.n	800399a <_dtoa_r+0x962>
 800398e:	4629      	mov	r1, r5
 8003990:	4632      	mov	r2, r6
 8003992:	4658      	mov	r0, fp
 8003994:	f000 fc26 	bl	80041e4 <__lshift>
 8003998:	4605      	mov	r5, r0
 800399a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	d05a      	beq.n	8003a56 <_dtoa_r+0xa1e>
 80039a0:	6869      	ldr	r1, [r5, #4]
 80039a2:	4658      	mov	r0, fp
 80039a4:	f000 fa10 	bl	8003dc8 <_Balloc>
 80039a8:	4606      	mov	r6, r0
 80039aa:	b928      	cbnz	r0, 80039b8 <_dtoa_r+0x980>
 80039ac:	4b84      	ldr	r3, [pc, #528]	@ (8003bc0 <_dtoa_r+0xb88>)
 80039ae:	4602      	mov	r2, r0
 80039b0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80039b4:	f7ff bb54 	b.w	8003060 <_dtoa_r+0x28>
 80039b8:	692a      	ldr	r2, [r5, #16]
 80039ba:	3202      	adds	r2, #2
 80039bc:	0092      	lsls	r2, r2, #2
 80039be:	f105 010c 	add.w	r1, r5, #12
 80039c2:	300c      	adds	r0, #12
 80039c4:	f000 fffc 	bl	80049c0 <memcpy>
 80039c8:	2201      	movs	r2, #1
 80039ca:	4631      	mov	r1, r6
 80039cc:	4658      	mov	r0, fp
 80039ce:	f000 fc09 	bl	80041e4 <__lshift>
 80039d2:	f10a 0301 	add.w	r3, sl, #1
 80039d6:	9307      	str	r3, [sp, #28]
 80039d8:	9b08      	ldr	r3, [sp, #32]
 80039da:	4453      	add	r3, sl
 80039dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039de:	9b02      	ldr	r3, [sp, #8]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	462f      	mov	r7, r5
 80039e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80039e8:	4605      	mov	r5, r0
 80039ea:	9b07      	ldr	r3, [sp, #28]
 80039ec:	4621      	mov	r1, r4
 80039ee:	3b01      	subs	r3, #1
 80039f0:	4648      	mov	r0, r9
 80039f2:	9302      	str	r3, [sp, #8]
 80039f4:	f7ff fa97 	bl	8002f26 <quorem>
 80039f8:	4639      	mov	r1, r7
 80039fa:	9008      	str	r0, [sp, #32]
 80039fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003a00:	4648      	mov	r0, r9
 8003a02:	f000 fc5b 	bl	80042bc <__mcmp>
 8003a06:	462a      	mov	r2, r5
 8003a08:	9009      	str	r0, [sp, #36]	@ 0x24
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	4658      	mov	r0, fp
 8003a0e:	f000 fc71 	bl	80042f4 <__mdiff>
 8003a12:	68c2      	ldr	r2, [r0, #12]
 8003a14:	4606      	mov	r6, r0
 8003a16:	bb02      	cbnz	r2, 8003a5a <_dtoa_r+0xa22>
 8003a18:	4601      	mov	r1, r0
 8003a1a:	4648      	mov	r0, r9
 8003a1c:	f000 fc4e 	bl	80042bc <__mcmp>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4631      	mov	r1, r6
 8003a24:	4658      	mov	r0, fp
 8003a26:	920c      	str	r2, [sp, #48]	@ 0x30
 8003a28:	f000 fa0e 	bl	8003e48 <_Bfree>
 8003a2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003a2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003a30:	9e07      	ldr	r6, [sp, #28]
 8003a32:	ea43 0102 	orr.w	r1, r3, r2
 8003a36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a38:	4319      	orrs	r1, r3
 8003a3a:	d110      	bne.n	8003a5e <_dtoa_r+0xa26>
 8003a3c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003a40:	d029      	beq.n	8003a96 <_dtoa_r+0xa5e>
 8003a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	dd02      	ble.n	8003a4e <_dtoa_r+0xa16>
 8003a48:	9b08      	ldr	r3, [sp, #32]
 8003a4a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8003a4e:	9b02      	ldr	r3, [sp, #8]
 8003a50:	f883 8000 	strb.w	r8, [r3]
 8003a54:	e63b      	b.n	80036ce <_dtoa_r+0x696>
 8003a56:	4628      	mov	r0, r5
 8003a58:	e7bb      	b.n	80039d2 <_dtoa_r+0x99a>
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	e7e1      	b.n	8003a22 <_dtoa_r+0x9ea>
 8003a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	db04      	blt.n	8003a6e <_dtoa_r+0xa36>
 8003a64:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8003a66:	430b      	orrs	r3, r1
 8003a68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	d120      	bne.n	8003ab0 <_dtoa_r+0xa78>
 8003a6e:	2a00      	cmp	r2, #0
 8003a70:	dded      	ble.n	8003a4e <_dtoa_r+0xa16>
 8003a72:	4649      	mov	r1, r9
 8003a74:	2201      	movs	r2, #1
 8003a76:	4658      	mov	r0, fp
 8003a78:	f000 fbb4 	bl	80041e4 <__lshift>
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	4681      	mov	r9, r0
 8003a80:	f000 fc1c 	bl	80042bc <__mcmp>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	dc03      	bgt.n	8003a90 <_dtoa_r+0xa58>
 8003a88:	d1e1      	bne.n	8003a4e <_dtoa_r+0xa16>
 8003a8a:	f018 0f01 	tst.w	r8, #1
 8003a8e:	d0de      	beq.n	8003a4e <_dtoa_r+0xa16>
 8003a90:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003a94:	d1d8      	bne.n	8003a48 <_dtoa_r+0xa10>
 8003a96:	9a02      	ldr	r2, [sp, #8]
 8003a98:	2339      	movs	r3, #57	@ 0x39
 8003a9a:	7013      	strb	r3, [r2, #0]
 8003a9c:	4633      	mov	r3, r6
 8003a9e:	461e      	mov	r6, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003aa6:	2a39      	cmp	r2, #57	@ 0x39
 8003aa8:	d052      	beq.n	8003b50 <_dtoa_r+0xb18>
 8003aaa:	3201      	adds	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e60e      	b.n	80036ce <_dtoa_r+0x696>
 8003ab0:	2a00      	cmp	r2, #0
 8003ab2:	dd07      	ble.n	8003ac4 <_dtoa_r+0xa8c>
 8003ab4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003ab8:	d0ed      	beq.n	8003a96 <_dtoa_r+0xa5e>
 8003aba:	9a02      	ldr	r2, [sp, #8]
 8003abc:	f108 0301 	add.w	r3, r8, #1
 8003ac0:	7013      	strb	r3, [r2, #0]
 8003ac2:	e604      	b.n	80036ce <_dtoa_r+0x696>
 8003ac4:	9b07      	ldr	r3, [sp, #28]
 8003ac6:	9a07      	ldr	r2, [sp, #28]
 8003ac8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8003acc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d028      	beq.n	8003b24 <_dtoa_r+0xaec>
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	220a      	movs	r2, #10
 8003ad8:	4658      	mov	r0, fp
 8003ada:	f000 f9d7 	bl	8003e8c <__multadd>
 8003ade:	42af      	cmp	r7, r5
 8003ae0:	4681      	mov	r9, r0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	f04f 020a 	mov.w	r2, #10
 8003aea:	4639      	mov	r1, r7
 8003aec:	4658      	mov	r0, fp
 8003aee:	d107      	bne.n	8003b00 <_dtoa_r+0xac8>
 8003af0:	f000 f9cc 	bl	8003e8c <__multadd>
 8003af4:	4607      	mov	r7, r0
 8003af6:	4605      	mov	r5, r0
 8003af8:	9b07      	ldr	r3, [sp, #28]
 8003afa:	3301      	adds	r3, #1
 8003afc:	9307      	str	r3, [sp, #28]
 8003afe:	e774      	b.n	80039ea <_dtoa_r+0x9b2>
 8003b00:	f000 f9c4 	bl	8003e8c <__multadd>
 8003b04:	4629      	mov	r1, r5
 8003b06:	4607      	mov	r7, r0
 8003b08:	2300      	movs	r3, #0
 8003b0a:	220a      	movs	r2, #10
 8003b0c:	4658      	mov	r0, fp
 8003b0e:	f000 f9bd 	bl	8003e8c <__multadd>
 8003b12:	4605      	mov	r5, r0
 8003b14:	e7f0      	b.n	8003af8 <_dtoa_r+0xac0>
 8003b16:	9b08      	ldr	r3, [sp, #32]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bfcc      	ite	gt
 8003b1c:	461e      	movgt	r6, r3
 8003b1e:	2601      	movle	r6, #1
 8003b20:	4456      	add	r6, sl
 8003b22:	2700      	movs	r7, #0
 8003b24:	4649      	mov	r1, r9
 8003b26:	2201      	movs	r2, #1
 8003b28:	4658      	mov	r0, fp
 8003b2a:	f000 fb5b 	bl	80041e4 <__lshift>
 8003b2e:	4621      	mov	r1, r4
 8003b30:	4681      	mov	r9, r0
 8003b32:	f000 fbc3 	bl	80042bc <__mcmp>
 8003b36:	2800      	cmp	r0, #0
 8003b38:	dcb0      	bgt.n	8003a9c <_dtoa_r+0xa64>
 8003b3a:	d102      	bne.n	8003b42 <_dtoa_r+0xb0a>
 8003b3c:	f018 0f01 	tst.w	r8, #1
 8003b40:	d1ac      	bne.n	8003a9c <_dtoa_r+0xa64>
 8003b42:	4633      	mov	r3, r6
 8003b44:	461e      	mov	r6, r3
 8003b46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003b4a:	2a30      	cmp	r2, #48	@ 0x30
 8003b4c:	d0fa      	beq.n	8003b44 <_dtoa_r+0xb0c>
 8003b4e:	e5be      	b.n	80036ce <_dtoa_r+0x696>
 8003b50:	459a      	cmp	sl, r3
 8003b52:	d1a4      	bne.n	8003a9e <_dtoa_r+0xa66>
 8003b54:	9b04      	ldr	r3, [sp, #16]
 8003b56:	3301      	adds	r3, #1
 8003b58:	9304      	str	r3, [sp, #16]
 8003b5a:	2331      	movs	r3, #49	@ 0x31
 8003b5c:	f88a 3000 	strb.w	r3, [sl]
 8003b60:	e5b5      	b.n	80036ce <_dtoa_r+0x696>
 8003b62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003b64:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8003bc4 <_dtoa_r+0xb8c>
 8003b68:	b11b      	cbz	r3, 8003b72 <_dtoa_r+0xb3a>
 8003b6a:	f10a 0308 	add.w	r3, sl, #8
 8003b6e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	4650      	mov	r0, sl
 8003b74:	b017      	add	sp, #92	@ 0x5c
 8003b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	f77f ae3d 	ble.w	80037fc <_dtoa_r+0x7c4>
 8003b82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003b84:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b86:	2001      	movs	r0, #1
 8003b88:	e65b      	b.n	8003842 <_dtoa_r+0x80a>
 8003b8a:	9b08      	ldr	r3, [sp, #32]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f77f aed6 	ble.w	800393e <_dtoa_r+0x906>
 8003b92:	4656      	mov	r6, sl
 8003b94:	4621      	mov	r1, r4
 8003b96:	4648      	mov	r0, r9
 8003b98:	f7ff f9c5 	bl	8002f26 <quorem>
 8003b9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003ba0:	f806 8b01 	strb.w	r8, [r6], #1
 8003ba4:	9b08      	ldr	r3, [sp, #32]
 8003ba6:	eba6 020a 	sub.w	r2, r6, sl
 8003baa:	4293      	cmp	r3, r2
 8003bac:	ddb3      	ble.n	8003b16 <_dtoa_r+0xade>
 8003bae:	4649      	mov	r1, r9
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	220a      	movs	r2, #10
 8003bb4:	4658      	mov	r0, fp
 8003bb6:	f000 f969 	bl	8003e8c <__multadd>
 8003bba:	4681      	mov	r9, r0
 8003bbc:	e7ea      	b.n	8003b94 <_dtoa_r+0xb5c>
 8003bbe:	bf00      	nop
 8003bc0:	08004c7e 	.word	0x08004c7e
 8003bc4:	08004c02 	.word	0x08004c02

08003bc8 <_free_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4605      	mov	r5, r0
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	d041      	beq.n	8003c54 <_free_r+0x8c>
 8003bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bd4:	1f0c      	subs	r4, r1, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bfb8      	it	lt
 8003bda:	18e4      	addlt	r4, r4, r3
 8003bdc:	f000 f8e8 	bl	8003db0 <__malloc_lock>
 8003be0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c58 <_free_r+0x90>)
 8003be2:	6813      	ldr	r3, [r2, #0]
 8003be4:	b933      	cbnz	r3, 8003bf4 <_free_r+0x2c>
 8003be6:	6063      	str	r3, [r4, #4]
 8003be8:	6014      	str	r4, [r2, #0]
 8003bea:	4628      	mov	r0, r5
 8003bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bf0:	f000 b8e4 	b.w	8003dbc <__malloc_unlock>
 8003bf4:	42a3      	cmp	r3, r4
 8003bf6:	d908      	bls.n	8003c0a <_free_r+0x42>
 8003bf8:	6820      	ldr	r0, [r4, #0]
 8003bfa:	1821      	adds	r1, r4, r0
 8003bfc:	428b      	cmp	r3, r1
 8003bfe:	bf01      	itttt	eq
 8003c00:	6819      	ldreq	r1, [r3, #0]
 8003c02:	685b      	ldreq	r3, [r3, #4]
 8003c04:	1809      	addeq	r1, r1, r0
 8003c06:	6021      	streq	r1, [r4, #0]
 8003c08:	e7ed      	b.n	8003be6 <_free_r+0x1e>
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	b10b      	cbz	r3, 8003c14 <_free_r+0x4c>
 8003c10:	42a3      	cmp	r3, r4
 8003c12:	d9fa      	bls.n	8003c0a <_free_r+0x42>
 8003c14:	6811      	ldr	r1, [r2, #0]
 8003c16:	1850      	adds	r0, r2, r1
 8003c18:	42a0      	cmp	r0, r4
 8003c1a:	d10b      	bne.n	8003c34 <_free_r+0x6c>
 8003c1c:	6820      	ldr	r0, [r4, #0]
 8003c1e:	4401      	add	r1, r0
 8003c20:	1850      	adds	r0, r2, r1
 8003c22:	4283      	cmp	r3, r0
 8003c24:	6011      	str	r1, [r2, #0]
 8003c26:	d1e0      	bne.n	8003bea <_free_r+0x22>
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	6053      	str	r3, [r2, #4]
 8003c2e:	4408      	add	r0, r1
 8003c30:	6010      	str	r0, [r2, #0]
 8003c32:	e7da      	b.n	8003bea <_free_r+0x22>
 8003c34:	d902      	bls.n	8003c3c <_free_r+0x74>
 8003c36:	230c      	movs	r3, #12
 8003c38:	602b      	str	r3, [r5, #0]
 8003c3a:	e7d6      	b.n	8003bea <_free_r+0x22>
 8003c3c:	6820      	ldr	r0, [r4, #0]
 8003c3e:	1821      	adds	r1, r4, r0
 8003c40:	428b      	cmp	r3, r1
 8003c42:	bf04      	itt	eq
 8003c44:	6819      	ldreq	r1, [r3, #0]
 8003c46:	685b      	ldreq	r3, [r3, #4]
 8003c48:	6063      	str	r3, [r4, #4]
 8003c4a:	bf04      	itt	eq
 8003c4c:	1809      	addeq	r1, r1, r0
 8003c4e:	6021      	streq	r1, [r4, #0]
 8003c50:	6054      	str	r4, [r2, #4]
 8003c52:	e7ca      	b.n	8003bea <_free_r+0x22>
 8003c54:	bd38      	pop	{r3, r4, r5, pc}
 8003c56:	bf00      	nop
 8003c58:	20000778 	.word	0x20000778

08003c5c <malloc>:
 8003c5c:	4b02      	ldr	r3, [pc, #8]	@ (8003c68 <malloc+0xc>)
 8003c5e:	4601      	mov	r1, r0
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	f000 b825 	b.w	8003cb0 <_malloc_r>
 8003c66:	bf00      	nop
 8003c68:	2000002c 	.word	0x2000002c

08003c6c <sbrk_aligned>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	4e0f      	ldr	r6, [pc, #60]	@ (8003cac <sbrk_aligned+0x40>)
 8003c70:	460c      	mov	r4, r1
 8003c72:	6831      	ldr	r1, [r6, #0]
 8003c74:	4605      	mov	r5, r0
 8003c76:	b911      	cbnz	r1, 8003c7e <sbrk_aligned+0x12>
 8003c78:	f000 fe92 	bl	80049a0 <_sbrk_r>
 8003c7c:	6030      	str	r0, [r6, #0]
 8003c7e:	4621      	mov	r1, r4
 8003c80:	4628      	mov	r0, r5
 8003c82:	f000 fe8d 	bl	80049a0 <_sbrk_r>
 8003c86:	1c43      	adds	r3, r0, #1
 8003c88:	d103      	bne.n	8003c92 <sbrk_aligned+0x26>
 8003c8a:	f04f 34ff 	mov.w	r4, #4294967295
 8003c8e:	4620      	mov	r0, r4
 8003c90:	bd70      	pop	{r4, r5, r6, pc}
 8003c92:	1cc4      	adds	r4, r0, #3
 8003c94:	f024 0403 	bic.w	r4, r4, #3
 8003c98:	42a0      	cmp	r0, r4
 8003c9a:	d0f8      	beq.n	8003c8e <sbrk_aligned+0x22>
 8003c9c:	1a21      	subs	r1, r4, r0
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	f000 fe7e 	bl	80049a0 <_sbrk_r>
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	d1f2      	bne.n	8003c8e <sbrk_aligned+0x22>
 8003ca8:	e7ef      	b.n	8003c8a <sbrk_aligned+0x1e>
 8003caa:	bf00      	nop
 8003cac:	20000774 	.word	0x20000774

08003cb0 <_malloc_r>:
 8003cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cb4:	1ccd      	adds	r5, r1, #3
 8003cb6:	f025 0503 	bic.w	r5, r5, #3
 8003cba:	3508      	adds	r5, #8
 8003cbc:	2d0c      	cmp	r5, #12
 8003cbe:	bf38      	it	cc
 8003cc0:	250c      	movcc	r5, #12
 8003cc2:	2d00      	cmp	r5, #0
 8003cc4:	4606      	mov	r6, r0
 8003cc6:	db01      	blt.n	8003ccc <_malloc_r+0x1c>
 8003cc8:	42a9      	cmp	r1, r5
 8003cca:	d904      	bls.n	8003cd6 <_malloc_r+0x26>
 8003ccc:	230c      	movs	r3, #12
 8003cce:	6033      	str	r3, [r6, #0]
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003dac <_malloc_r+0xfc>
 8003cda:	f000 f869 	bl	8003db0 <__malloc_lock>
 8003cde:	f8d8 3000 	ldr.w	r3, [r8]
 8003ce2:	461c      	mov	r4, r3
 8003ce4:	bb44      	cbnz	r4, 8003d38 <_malloc_r+0x88>
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f7ff ffbf 	bl	8003c6c <sbrk_aligned>
 8003cee:	1c43      	adds	r3, r0, #1
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	d158      	bne.n	8003da6 <_malloc_r+0xf6>
 8003cf4:	f8d8 4000 	ldr.w	r4, [r8]
 8003cf8:	4627      	mov	r7, r4
 8003cfa:	2f00      	cmp	r7, #0
 8003cfc:	d143      	bne.n	8003d86 <_malloc_r+0xd6>
 8003cfe:	2c00      	cmp	r4, #0
 8003d00:	d04b      	beq.n	8003d9a <_malloc_r+0xea>
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	4639      	mov	r1, r7
 8003d06:	4630      	mov	r0, r6
 8003d08:	eb04 0903 	add.w	r9, r4, r3
 8003d0c:	f000 fe48 	bl	80049a0 <_sbrk_r>
 8003d10:	4581      	cmp	r9, r0
 8003d12:	d142      	bne.n	8003d9a <_malloc_r+0xea>
 8003d14:	6821      	ldr	r1, [r4, #0]
 8003d16:	1a6d      	subs	r5, r5, r1
 8003d18:	4629      	mov	r1, r5
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f7ff ffa6 	bl	8003c6c <sbrk_aligned>
 8003d20:	3001      	adds	r0, #1
 8003d22:	d03a      	beq.n	8003d9a <_malloc_r+0xea>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	442b      	add	r3, r5
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	bb62      	cbnz	r2, 8003d8c <_malloc_r+0xdc>
 8003d32:	f8c8 7000 	str.w	r7, [r8]
 8003d36:	e00f      	b.n	8003d58 <_malloc_r+0xa8>
 8003d38:	6822      	ldr	r2, [r4, #0]
 8003d3a:	1b52      	subs	r2, r2, r5
 8003d3c:	d420      	bmi.n	8003d80 <_malloc_r+0xd0>
 8003d3e:	2a0b      	cmp	r2, #11
 8003d40:	d917      	bls.n	8003d72 <_malloc_r+0xc2>
 8003d42:	1961      	adds	r1, r4, r5
 8003d44:	42a3      	cmp	r3, r4
 8003d46:	6025      	str	r5, [r4, #0]
 8003d48:	bf18      	it	ne
 8003d4a:	6059      	strne	r1, [r3, #4]
 8003d4c:	6863      	ldr	r3, [r4, #4]
 8003d4e:	bf08      	it	eq
 8003d50:	f8c8 1000 	streq.w	r1, [r8]
 8003d54:	5162      	str	r2, [r4, r5]
 8003d56:	604b      	str	r3, [r1, #4]
 8003d58:	4630      	mov	r0, r6
 8003d5a:	f000 f82f 	bl	8003dbc <__malloc_unlock>
 8003d5e:	f104 000b 	add.w	r0, r4, #11
 8003d62:	1d23      	adds	r3, r4, #4
 8003d64:	f020 0007 	bic.w	r0, r0, #7
 8003d68:	1ac2      	subs	r2, r0, r3
 8003d6a:	bf1c      	itt	ne
 8003d6c:	1a1b      	subne	r3, r3, r0
 8003d6e:	50a3      	strne	r3, [r4, r2]
 8003d70:	e7af      	b.n	8003cd2 <_malloc_r+0x22>
 8003d72:	6862      	ldr	r2, [r4, #4]
 8003d74:	42a3      	cmp	r3, r4
 8003d76:	bf0c      	ite	eq
 8003d78:	f8c8 2000 	streq.w	r2, [r8]
 8003d7c:	605a      	strne	r2, [r3, #4]
 8003d7e:	e7eb      	b.n	8003d58 <_malloc_r+0xa8>
 8003d80:	4623      	mov	r3, r4
 8003d82:	6864      	ldr	r4, [r4, #4]
 8003d84:	e7ae      	b.n	8003ce4 <_malloc_r+0x34>
 8003d86:	463c      	mov	r4, r7
 8003d88:	687f      	ldr	r7, [r7, #4]
 8003d8a:	e7b6      	b.n	8003cfa <_malloc_r+0x4a>
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	42a3      	cmp	r3, r4
 8003d92:	d1fb      	bne.n	8003d8c <_malloc_r+0xdc>
 8003d94:	2300      	movs	r3, #0
 8003d96:	6053      	str	r3, [r2, #4]
 8003d98:	e7de      	b.n	8003d58 <_malloc_r+0xa8>
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	6033      	str	r3, [r6, #0]
 8003d9e:	4630      	mov	r0, r6
 8003da0:	f000 f80c 	bl	8003dbc <__malloc_unlock>
 8003da4:	e794      	b.n	8003cd0 <_malloc_r+0x20>
 8003da6:	6005      	str	r5, [r0, #0]
 8003da8:	e7d6      	b.n	8003d58 <_malloc_r+0xa8>
 8003daa:	bf00      	nop
 8003dac:	20000778 	.word	0x20000778

08003db0 <__malloc_lock>:
 8003db0:	4801      	ldr	r0, [pc, #4]	@ (8003db8 <__malloc_lock+0x8>)
 8003db2:	f7ff b8b6 	b.w	8002f22 <__retarget_lock_acquire_recursive>
 8003db6:	bf00      	nop
 8003db8:	20000770 	.word	0x20000770

08003dbc <__malloc_unlock>:
 8003dbc:	4801      	ldr	r0, [pc, #4]	@ (8003dc4 <__malloc_unlock+0x8>)
 8003dbe:	f7ff b8b1 	b.w	8002f24 <__retarget_lock_release_recursive>
 8003dc2:	bf00      	nop
 8003dc4:	20000770 	.word	0x20000770

08003dc8 <_Balloc>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	69c6      	ldr	r6, [r0, #28]
 8003dcc:	4604      	mov	r4, r0
 8003dce:	460d      	mov	r5, r1
 8003dd0:	b976      	cbnz	r6, 8003df0 <_Balloc+0x28>
 8003dd2:	2010      	movs	r0, #16
 8003dd4:	f7ff ff42 	bl	8003c5c <malloc>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	61e0      	str	r0, [r4, #28]
 8003ddc:	b920      	cbnz	r0, 8003de8 <_Balloc+0x20>
 8003dde:	4b18      	ldr	r3, [pc, #96]	@ (8003e40 <_Balloc+0x78>)
 8003de0:	4818      	ldr	r0, [pc, #96]	@ (8003e44 <_Balloc+0x7c>)
 8003de2:	216b      	movs	r1, #107	@ 0x6b
 8003de4:	f000 fdfa 	bl	80049dc <__assert_func>
 8003de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003dec:	6006      	str	r6, [r0, #0]
 8003dee:	60c6      	str	r6, [r0, #12]
 8003df0:	69e6      	ldr	r6, [r4, #28]
 8003df2:	68f3      	ldr	r3, [r6, #12]
 8003df4:	b183      	cbz	r3, 8003e18 <_Balloc+0x50>
 8003df6:	69e3      	ldr	r3, [r4, #28]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003dfe:	b9b8      	cbnz	r0, 8003e30 <_Balloc+0x68>
 8003e00:	2101      	movs	r1, #1
 8003e02:	fa01 f605 	lsl.w	r6, r1, r5
 8003e06:	1d72      	adds	r2, r6, #5
 8003e08:	0092      	lsls	r2, r2, #2
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f000 fe04 	bl	8004a18 <_calloc_r>
 8003e10:	b160      	cbz	r0, 8003e2c <_Balloc+0x64>
 8003e12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003e16:	e00e      	b.n	8003e36 <_Balloc+0x6e>
 8003e18:	2221      	movs	r2, #33	@ 0x21
 8003e1a:	2104      	movs	r1, #4
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f000 fdfb 	bl	8004a18 <_calloc_r>
 8003e22:	69e3      	ldr	r3, [r4, #28]
 8003e24:	60f0      	str	r0, [r6, #12]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e4      	bne.n	8003df6 <_Balloc+0x2e>
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	6802      	ldr	r2, [r0, #0]
 8003e32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003e36:	2300      	movs	r3, #0
 8003e38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003e3c:	e7f7      	b.n	8003e2e <_Balloc+0x66>
 8003e3e:	bf00      	nop
 8003e40:	08004c0f 	.word	0x08004c0f
 8003e44:	08004c8f 	.word	0x08004c8f

08003e48 <_Bfree>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	69c6      	ldr	r6, [r0, #28]
 8003e4c:	4605      	mov	r5, r0
 8003e4e:	460c      	mov	r4, r1
 8003e50:	b976      	cbnz	r6, 8003e70 <_Bfree+0x28>
 8003e52:	2010      	movs	r0, #16
 8003e54:	f7ff ff02 	bl	8003c5c <malloc>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	61e8      	str	r0, [r5, #28]
 8003e5c:	b920      	cbnz	r0, 8003e68 <_Bfree+0x20>
 8003e5e:	4b09      	ldr	r3, [pc, #36]	@ (8003e84 <_Bfree+0x3c>)
 8003e60:	4809      	ldr	r0, [pc, #36]	@ (8003e88 <_Bfree+0x40>)
 8003e62:	218f      	movs	r1, #143	@ 0x8f
 8003e64:	f000 fdba 	bl	80049dc <__assert_func>
 8003e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003e6c:	6006      	str	r6, [r0, #0]
 8003e6e:	60c6      	str	r6, [r0, #12]
 8003e70:	b13c      	cbz	r4, 8003e82 <_Bfree+0x3a>
 8003e72:	69eb      	ldr	r3, [r5, #28]
 8003e74:	6862      	ldr	r2, [r4, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e7c:	6021      	str	r1, [r4, #0]
 8003e7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003e82:	bd70      	pop	{r4, r5, r6, pc}
 8003e84:	08004c0f 	.word	0x08004c0f
 8003e88:	08004c8f 	.word	0x08004c8f

08003e8c <__multadd>:
 8003e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e90:	690d      	ldr	r5, [r1, #16]
 8003e92:	4607      	mov	r7, r0
 8003e94:	460c      	mov	r4, r1
 8003e96:	461e      	mov	r6, r3
 8003e98:	f101 0c14 	add.w	ip, r1, #20
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f8dc 3000 	ldr.w	r3, [ip]
 8003ea2:	b299      	uxth	r1, r3
 8003ea4:	fb02 6101 	mla	r1, r2, r1, r6
 8003ea8:	0c1e      	lsrs	r6, r3, #16
 8003eaa:	0c0b      	lsrs	r3, r1, #16
 8003eac:	fb02 3306 	mla	r3, r2, r6, r3
 8003eb0:	b289      	uxth	r1, r1
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003eb8:	4285      	cmp	r5, r0
 8003eba:	f84c 1b04 	str.w	r1, [ip], #4
 8003ebe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003ec2:	dcec      	bgt.n	8003e9e <__multadd+0x12>
 8003ec4:	b30e      	cbz	r6, 8003f0a <__multadd+0x7e>
 8003ec6:	68a3      	ldr	r3, [r4, #8]
 8003ec8:	42ab      	cmp	r3, r5
 8003eca:	dc19      	bgt.n	8003f00 <__multadd+0x74>
 8003ecc:	6861      	ldr	r1, [r4, #4]
 8003ece:	4638      	mov	r0, r7
 8003ed0:	3101      	adds	r1, #1
 8003ed2:	f7ff ff79 	bl	8003dc8 <_Balloc>
 8003ed6:	4680      	mov	r8, r0
 8003ed8:	b928      	cbnz	r0, 8003ee6 <__multadd+0x5a>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f10 <__multadd+0x84>)
 8003ede:	480d      	ldr	r0, [pc, #52]	@ (8003f14 <__multadd+0x88>)
 8003ee0:	21ba      	movs	r1, #186	@ 0xba
 8003ee2:	f000 fd7b 	bl	80049dc <__assert_func>
 8003ee6:	6922      	ldr	r2, [r4, #16]
 8003ee8:	3202      	adds	r2, #2
 8003eea:	f104 010c 	add.w	r1, r4, #12
 8003eee:	0092      	lsls	r2, r2, #2
 8003ef0:	300c      	adds	r0, #12
 8003ef2:	f000 fd65 	bl	80049c0 <memcpy>
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	4638      	mov	r0, r7
 8003efa:	f7ff ffa5 	bl	8003e48 <_Bfree>
 8003efe:	4644      	mov	r4, r8
 8003f00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003f04:	3501      	adds	r5, #1
 8003f06:	615e      	str	r6, [r3, #20]
 8003f08:	6125      	str	r5, [r4, #16]
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f10:	08004c7e 	.word	0x08004c7e
 8003f14:	08004c8f 	.word	0x08004c8f

08003f18 <__hi0bits>:
 8003f18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	bf36      	itet	cc
 8003f20:	0403      	lslcc	r3, r0, #16
 8003f22:	2000      	movcs	r0, #0
 8003f24:	2010      	movcc	r0, #16
 8003f26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f2a:	bf3c      	itt	cc
 8003f2c:	021b      	lslcc	r3, r3, #8
 8003f2e:	3008      	addcc	r0, #8
 8003f30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f34:	bf3c      	itt	cc
 8003f36:	011b      	lslcc	r3, r3, #4
 8003f38:	3004      	addcc	r0, #4
 8003f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3e:	bf3c      	itt	cc
 8003f40:	009b      	lslcc	r3, r3, #2
 8003f42:	3002      	addcc	r0, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	db05      	blt.n	8003f54 <__hi0bits+0x3c>
 8003f48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003f4c:	f100 0001 	add.w	r0, r0, #1
 8003f50:	bf08      	it	eq
 8003f52:	2020      	moveq	r0, #32
 8003f54:	4770      	bx	lr

08003f56 <__lo0bits>:
 8003f56:	6803      	ldr	r3, [r0, #0]
 8003f58:	4602      	mov	r2, r0
 8003f5a:	f013 0007 	ands.w	r0, r3, #7
 8003f5e:	d00b      	beq.n	8003f78 <__lo0bits+0x22>
 8003f60:	07d9      	lsls	r1, r3, #31
 8003f62:	d421      	bmi.n	8003fa8 <__lo0bits+0x52>
 8003f64:	0798      	lsls	r0, r3, #30
 8003f66:	bf49      	itett	mi
 8003f68:	085b      	lsrmi	r3, r3, #1
 8003f6a:	089b      	lsrpl	r3, r3, #2
 8003f6c:	2001      	movmi	r0, #1
 8003f6e:	6013      	strmi	r3, [r2, #0]
 8003f70:	bf5c      	itt	pl
 8003f72:	6013      	strpl	r3, [r2, #0]
 8003f74:	2002      	movpl	r0, #2
 8003f76:	4770      	bx	lr
 8003f78:	b299      	uxth	r1, r3
 8003f7a:	b909      	cbnz	r1, 8003f80 <__lo0bits+0x2a>
 8003f7c:	0c1b      	lsrs	r3, r3, #16
 8003f7e:	2010      	movs	r0, #16
 8003f80:	b2d9      	uxtb	r1, r3
 8003f82:	b909      	cbnz	r1, 8003f88 <__lo0bits+0x32>
 8003f84:	3008      	adds	r0, #8
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	0719      	lsls	r1, r3, #28
 8003f8a:	bf04      	itt	eq
 8003f8c:	091b      	lsreq	r3, r3, #4
 8003f8e:	3004      	addeq	r0, #4
 8003f90:	0799      	lsls	r1, r3, #30
 8003f92:	bf04      	itt	eq
 8003f94:	089b      	lsreq	r3, r3, #2
 8003f96:	3002      	addeq	r0, #2
 8003f98:	07d9      	lsls	r1, r3, #31
 8003f9a:	d403      	bmi.n	8003fa4 <__lo0bits+0x4e>
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	f100 0001 	add.w	r0, r0, #1
 8003fa2:	d003      	beq.n	8003fac <__lo0bits+0x56>
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4770      	bx	lr
 8003fa8:	2000      	movs	r0, #0
 8003faa:	4770      	bx	lr
 8003fac:	2020      	movs	r0, #32
 8003fae:	4770      	bx	lr

08003fb0 <__i2b>:
 8003fb0:	b510      	push	{r4, lr}
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	f7ff ff07 	bl	8003dc8 <_Balloc>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	b928      	cbnz	r0, 8003fca <__i2b+0x1a>
 8003fbe:	4b05      	ldr	r3, [pc, #20]	@ (8003fd4 <__i2b+0x24>)
 8003fc0:	4805      	ldr	r0, [pc, #20]	@ (8003fd8 <__i2b+0x28>)
 8003fc2:	f240 1145 	movw	r1, #325	@ 0x145
 8003fc6:	f000 fd09 	bl	80049dc <__assert_func>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	6144      	str	r4, [r0, #20]
 8003fce:	6103      	str	r3, [r0, #16]
 8003fd0:	bd10      	pop	{r4, pc}
 8003fd2:	bf00      	nop
 8003fd4:	08004c7e 	.word	0x08004c7e
 8003fd8:	08004c8f 	.word	0x08004c8f

08003fdc <__multiply>:
 8003fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe0:	4614      	mov	r4, r2
 8003fe2:	690a      	ldr	r2, [r1, #16]
 8003fe4:	6923      	ldr	r3, [r4, #16]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	bfa8      	it	ge
 8003fea:	4623      	movge	r3, r4
 8003fec:	460f      	mov	r7, r1
 8003fee:	bfa4      	itt	ge
 8003ff0:	460c      	movge	r4, r1
 8003ff2:	461f      	movge	r7, r3
 8003ff4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003ff8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8003ffc:	68a3      	ldr	r3, [r4, #8]
 8003ffe:	6861      	ldr	r1, [r4, #4]
 8004000:	eb0a 0609 	add.w	r6, sl, r9
 8004004:	42b3      	cmp	r3, r6
 8004006:	b085      	sub	sp, #20
 8004008:	bfb8      	it	lt
 800400a:	3101      	addlt	r1, #1
 800400c:	f7ff fedc 	bl	8003dc8 <_Balloc>
 8004010:	b930      	cbnz	r0, 8004020 <__multiply+0x44>
 8004012:	4602      	mov	r2, r0
 8004014:	4b44      	ldr	r3, [pc, #272]	@ (8004128 <__multiply+0x14c>)
 8004016:	4845      	ldr	r0, [pc, #276]	@ (800412c <__multiply+0x150>)
 8004018:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800401c:	f000 fcde 	bl	80049dc <__assert_func>
 8004020:	f100 0514 	add.w	r5, r0, #20
 8004024:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004028:	462b      	mov	r3, r5
 800402a:	2200      	movs	r2, #0
 800402c:	4543      	cmp	r3, r8
 800402e:	d321      	bcc.n	8004074 <__multiply+0x98>
 8004030:	f107 0114 	add.w	r1, r7, #20
 8004034:	f104 0214 	add.w	r2, r4, #20
 8004038:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800403c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004040:	9302      	str	r3, [sp, #8]
 8004042:	1b13      	subs	r3, r2, r4
 8004044:	3b15      	subs	r3, #21
 8004046:	f023 0303 	bic.w	r3, r3, #3
 800404a:	3304      	adds	r3, #4
 800404c:	f104 0715 	add.w	r7, r4, #21
 8004050:	42ba      	cmp	r2, r7
 8004052:	bf38      	it	cc
 8004054:	2304      	movcc	r3, #4
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	9b02      	ldr	r3, [sp, #8]
 800405a:	9103      	str	r1, [sp, #12]
 800405c:	428b      	cmp	r3, r1
 800405e:	d80c      	bhi.n	800407a <__multiply+0x9e>
 8004060:	2e00      	cmp	r6, #0
 8004062:	dd03      	ble.n	800406c <__multiply+0x90>
 8004064:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004068:	2b00      	cmp	r3, #0
 800406a:	d05a      	beq.n	8004122 <__multiply+0x146>
 800406c:	6106      	str	r6, [r0, #16]
 800406e:	b005      	add	sp, #20
 8004070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004074:	f843 2b04 	str.w	r2, [r3], #4
 8004078:	e7d8      	b.n	800402c <__multiply+0x50>
 800407a:	f8b1 a000 	ldrh.w	sl, [r1]
 800407e:	f1ba 0f00 	cmp.w	sl, #0
 8004082:	d023      	beq.n	80040cc <__multiply+0xf0>
 8004084:	f104 0e14 	add.w	lr, r4, #20
 8004088:	46a9      	mov	r9, r5
 800408a:	f04f 0c00 	mov.w	ip, #0
 800408e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004092:	f8d9 3000 	ldr.w	r3, [r9]
 8004096:	fa1f fb87 	uxth.w	fp, r7
 800409a:	b29b      	uxth	r3, r3
 800409c:	fb0a 330b 	mla	r3, sl, fp, r3
 80040a0:	4463      	add	r3, ip
 80040a2:	f8d9 c000 	ldr.w	ip, [r9]
 80040a6:	0c3f      	lsrs	r7, r7, #16
 80040a8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80040ac:	fb0a c707 	mla	r7, sl, r7, ip
 80040b0:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80040ba:	4572      	cmp	r2, lr
 80040bc:	f849 3b04 	str.w	r3, [r9], #4
 80040c0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80040c4:	d8e3      	bhi.n	800408e <__multiply+0xb2>
 80040c6:	9b01      	ldr	r3, [sp, #4]
 80040c8:	f845 c003 	str.w	ip, [r5, r3]
 80040cc:	9b03      	ldr	r3, [sp, #12]
 80040ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80040d2:	3104      	adds	r1, #4
 80040d4:	f1b9 0f00 	cmp.w	r9, #0
 80040d8:	d021      	beq.n	800411e <__multiply+0x142>
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	f104 0c14 	add.w	ip, r4, #20
 80040e0:	46ae      	mov	lr, r5
 80040e2:	f04f 0a00 	mov.w	sl, #0
 80040e6:	f8bc b000 	ldrh.w	fp, [ip]
 80040ea:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80040ee:	fb09 770b 	mla	r7, r9, fp, r7
 80040f2:	4457      	add	r7, sl
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80040fa:	f84e 3b04 	str.w	r3, [lr], #4
 80040fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004102:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004106:	f8be 3000 	ldrh.w	r3, [lr]
 800410a:	fb09 330a 	mla	r3, r9, sl, r3
 800410e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004112:	4562      	cmp	r2, ip
 8004114:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004118:	d8e5      	bhi.n	80040e6 <__multiply+0x10a>
 800411a:	9f01      	ldr	r7, [sp, #4]
 800411c:	51eb      	str	r3, [r5, r7]
 800411e:	3504      	adds	r5, #4
 8004120:	e79a      	b.n	8004058 <__multiply+0x7c>
 8004122:	3e01      	subs	r6, #1
 8004124:	e79c      	b.n	8004060 <__multiply+0x84>
 8004126:	bf00      	nop
 8004128:	08004c7e 	.word	0x08004c7e
 800412c:	08004c8f 	.word	0x08004c8f

08004130 <__pow5mult>:
 8004130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004134:	4615      	mov	r5, r2
 8004136:	f012 0203 	ands.w	r2, r2, #3
 800413a:	4607      	mov	r7, r0
 800413c:	460e      	mov	r6, r1
 800413e:	d007      	beq.n	8004150 <__pow5mult+0x20>
 8004140:	4c25      	ldr	r4, [pc, #148]	@ (80041d8 <__pow5mult+0xa8>)
 8004142:	3a01      	subs	r2, #1
 8004144:	2300      	movs	r3, #0
 8004146:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800414a:	f7ff fe9f 	bl	8003e8c <__multadd>
 800414e:	4606      	mov	r6, r0
 8004150:	10ad      	asrs	r5, r5, #2
 8004152:	d03d      	beq.n	80041d0 <__pow5mult+0xa0>
 8004154:	69fc      	ldr	r4, [r7, #28]
 8004156:	b97c      	cbnz	r4, 8004178 <__pow5mult+0x48>
 8004158:	2010      	movs	r0, #16
 800415a:	f7ff fd7f 	bl	8003c5c <malloc>
 800415e:	4602      	mov	r2, r0
 8004160:	61f8      	str	r0, [r7, #28]
 8004162:	b928      	cbnz	r0, 8004170 <__pow5mult+0x40>
 8004164:	4b1d      	ldr	r3, [pc, #116]	@ (80041dc <__pow5mult+0xac>)
 8004166:	481e      	ldr	r0, [pc, #120]	@ (80041e0 <__pow5mult+0xb0>)
 8004168:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800416c:	f000 fc36 	bl	80049dc <__assert_func>
 8004170:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004174:	6004      	str	r4, [r0, #0]
 8004176:	60c4      	str	r4, [r0, #12]
 8004178:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800417c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004180:	b94c      	cbnz	r4, 8004196 <__pow5mult+0x66>
 8004182:	f240 2171 	movw	r1, #625	@ 0x271
 8004186:	4638      	mov	r0, r7
 8004188:	f7ff ff12 	bl	8003fb0 <__i2b>
 800418c:	2300      	movs	r3, #0
 800418e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004192:	4604      	mov	r4, r0
 8004194:	6003      	str	r3, [r0, #0]
 8004196:	f04f 0900 	mov.w	r9, #0
 800419a:	07eb      	lsls	r3, r5, #31
 800419c:	d50a      	bpl.n	80041b4 <__pow5mult+0x84>
 800419e:	4631      	mov	r1, r6
 80041a0:	4622      	mov	r2, r4
 80041a2:	4638      	mov	r0, r7
 80041a4:	f7ff ff1a 	bl	8003fdc <__multiply>
 80041a8:	4631      	mov	r1, r6
 80041aa:	4680      	mov	r8, r0
 80041ac:	4638      	mov	r0, r7
 80041ae:	f7ff fe4b 	bl	8003e48 <_Bfree>
 80041b2:	4646      	mov	r6, r8
 80041b4:	106d      	asrs	r5, r5, #1
 80041b6:	d00b      	beq.n	80041d0 <__pow5mult+0xa0>
 80041b8:	6820      	ldr	r0, [r4, #0]
 80041ba:	b938      	cbnz	r0, 80041cc <__pow5mult+0x9c>
 80041bc:	4622      	mov	r2, r4
 80041be:	4621      	mov	r1, r4
 80041c0:	4638      	mov	r0, r7
 80041c2:	f7ff ff0b 	bl	8003fdc <__multiply>
 80041c6:	6020      	str	r0, [r4, #0]
 80041c8:	f8c0 9000 	str.w	r9, [r0]
 80041cc:	4604      	mov	r4, r0
 80041ce:	e7e4      	b.n	800419a <__pow5mult+0x6a>
 80041d0:	4630      	mov	r0, r6
 80041d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041d6:	bf00      	nop
 80041d8:	08004ce8 	.word	0x08004ce8
 80041dc:	08004c0f 	.word	0x08004c0f
 80041e0:	08004c8f 	.word	0x08004c8f

080041e4 <__lshift>:
 80041e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	460c      	mov	r4, r1
 80041ea:	6849      	ldr	r1, [r1, #4]
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80041f2:	68a3      	ldr	r3, [r4, #8]
 80041f4:	4607      	mov	r7, r0
 80041f6:	4691      	mov	r9, r2
 80041f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80041fc:	f108 0601 	add.w	r6, r8, #1
 8004200:	42b3      	cmp	r3, r6
 8004202:	db0b      	blt.n	800421c <__lshift+0x38>
 8004204:	4638      	mov	r0, r7
 8004206:	f7ff fddf 	bl	8003dc8 <_Balloc>
 800420a:	4605      	mov	r5, r0
 800420c:	b948      	cbnz	r0, 8004222 <__lshift+0x3e>
 800420e:	4602      	mov	r2, r0
 8004210:	4b28      	ldr	r3, [pc, #160]	@ (80042b4 <__lshift+0xd0>)
 8004212:	4829      	ldr	r0, [pc, #164]	@ (80042b8 <__lshift+0xd4>)
 8004214:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004218:	f000 fbe0 	bl	80049dc <__assert_func>
 800421c:	3101      	adds	r1, #1
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	e7ee      	b.n	8004200 <__lshift+0x1c>
 8004222:	2300      	movs	r3, #0
 8004224:	f100 0114 	add.w	r1, r0, #20
 8004228:	f100 0210 	add.w	r2, r0, #16
 800422c:	4618      	mov	r0, r3
 800422e:	4553      	cmp	r3, sl
 8004230:	db33      	blt.n	800429a <__lshift+0xb6>
 8004232:	6920      	ldr	r0, [r4, #16]
 8004234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004238:	f104 0314 	add.w	r3, r4, #20
 800423c:	f019 091f 	ands.w	r9, r9, #31
 8004240:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004244:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004248:	d02b      	beq.n	80042a2 <__lshift+0xbe>
 800424a:	f1c9 0e20 	rsb	lr, r9, #32
 800424e:	468a      	mov	sl, r1
 8004250:	2200      	movs	r2, #0
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	fa00 f009 	lsl.w	r0, r0, r9
 8004258:	4310      	orrs	r0, r2
 800425a:	f84a 0b04 	str.w	r0, [sl], #4
 800425e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004262:	459c      	cmp	ip, r3
 8004264:	fa22 f20e 	lsr.w	r2, r2, lr
 8004268:	d8f3      	bhi.n	8004252 <__lshift+0x6e>
 800426a:	ebac 0304 	sub.w	r3, ip, r4
 800426e:	3b15      	subs	r3, #21
 8004270:	f023 0303 	bic.w	r3, r3, #3
 8004274:	3304      	adds	r3, #4
 8004276:	f104 0015 	add.w	r0, r4, #21
 800427a:	4584      	cmp	ip, r0
 800427c:	bf38      	it	cc
 800427e:	2304      	movcc	r3, #4
 8004280:	50ca      	str	r2, [r1, r3]
 8004282:	b10a      	cbz	r2, 8004288 <__lshift+0xa4>
 8004284:	f108 0602 	add.w	r6, r8, #2
 8004288:	3e01      	subs	r6, #1
 800428a:	4638      	mov	r0, r7
 800428c:	612e      	str	r6, [r5, #16]
 800428e:	4621      	mov	r1, r4
 8004290:	f7ff fdda 	bl	8003e48 <_Bfree>
 8004294:	4628      	mov	r0, r5
 8004296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429a:	f842 0f04 	str.w	r0, [r2, #4]!
 800429e:	3301      	adds	r3, #1
 80042a0:	e7c5      	b.n	800422e <__lshift+0x4a>
 80042a2:	3904      	subs	r1, #4
 80042a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80042a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80042ac:	459c      	cmp	ip, r3
 80042ae:	d8f9      	bhi.n	80042a4 <__lshift+0xc0>
 80042b0:	e7ea      	b.n	8004288 <__lshift+0xa4>
 80042b2:	bf00      	nop
 80042b4:	08004c7e 	.word	0x08004c7e
 80042b8:	08004c8f 	.word	0x08004c8f

080042bc <__mcmp>:
 80042bc:	690a      	ldr	r2, [r1, #16]
 80042be:	4603      	mov	r3, r0
 80042c0:	6900      	ldr	r0, [r0, #16]
 80042c2:	1a80      	subs	r0, r0, r2
 80042c4:	b530      	push	{r4, r5, lr}
 80042c6:	d10e      	bne.n	80042e6 <__mcmp+0x2a>
 80042c8:	3314      	adds	r3, #20
 80042ca:	3114      	adds	r1, #20
 80042cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80042d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80042d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80042d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80042dc:	4295      	cmp	r5, r2
 80042de:	d003      	beq.n	80042e8 <__mcmp+0x2c>
 80042e0:	d205      	bcs.n	80042ee <__mcmp+0x32>
 80042e2:	f04f 30ff 	mov.w	r0, #4294967295
 80042e6:	bd30      	pop	{r4, r5, pc}
 80042e8:	42a3      	cmp	r3, r4
 80042ea:	d3f3      	bcc.n	80042d4 <__mcmp+0x18>
 80042ec:	e7fb      	b.n	80042e6 <__mcmp+0x2a>
 80042ee:	2001      	movs	r0, #1
 80042f0:	e7f9      	b.n	80042e6 <__mcmp+0x2a>
	...

080042f4 <__mdiff>:
 80042f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f8:	4689      	mov	r9, r1
 80042fa:	4606      	mov	r6, r0
 80042fc:	4611      	mov	r1, r2
 80042fe:	4648      	mov	r0, r9
 8004300:	4614      	mov	r4, r2
 8004302:	f7ff ffdb 	bl	80042bc <__mcmp>
 8004306:	1e05      	subs	r5, r0, #0
 8004308:	d112      	bne.n	8004330 <__mdiff+0x3c>
 800430a:	4629      	mov	r1, r5
 800430c:	4630      	mov	r0, r6
 800430e:	f7ff fd5b 	bl	8003dc8 <_Balloc>
 8004312:	4602      	mov	r2, r0
 8004314:	b928      	cbnz	r0, 8004322 <__mdiff+0x2e>
 8004316:	4b3e      	ldr	r3, [pc, #248]	@ (8004410 <__mdiff+0x11c>)
 8004318:	f240 2137 	movw	r1, #567	@ 0x237
 800431c:	483d      	ldr	r0, [pc, #244]	@ (8004414 <__mdiff+0x120>)
 800431e:	f000 fb5d 	bl	80049dc <__assert_func>
 8004322:	2301      	movs	r3, #1
 8004324:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004328:	4610      	mov	r0, r2
 800432a:	b003      	add	sp, #12
 800432c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004330:	bfbc      	itt	lt
 8004332:	464b      	movlt	r3, r9
 8004334:	46a1      	movlt	r9, r4
 8004336:	4630      	mov	r0, r6
 8004338:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800433c:	bfba      	itte	lt
 800433e:	461c      	movlt	r4, r3
 8004340:	2501      	movlt	r5, #1
 8004342:	2500      	movge	r5, #0
 8004344:	f7ff fd40 	bl	8003dc8 <_Balloc>
 8004348:	4602      	mov	r2, r0
 800434a:	b918      	cbnz	r0, 8004354 <__mdiff+0x60>
 800434c:	4b30      	ldr	r3, [pc, #192]	@ (8004410 <__mdiff+0x11c>)
 800434e:	f240 2145 	movw	r1, #581	@ 0x245
 8004352:	e7e3      	b.n	800431c <__mdiff+0x28>
 8004354:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004358:	6926      	ldr	r6, [r4, #16]
 800435a:	60c5      	str	r5, [r0, #12]
 800435c:	f109 0310 	add.w	r3, r9, #16
 8004360:	f109 0514 	add.w	r5, r9, #20
 8004364:	f104 0e14 	add.w	lr, r4, #20
 8004368:	f100 0b14 	add.w	fp, r0, #20
 800436c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004370:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	46d9      	mov	r9, fp
 8004378:	f04f 0c00 	mov.w	ip, #0
 800437c:	9b01      	ldr	r3, [sp, #4]
 800437e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004382:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	b281      	uxth	r1, r0
 800438a:	fa1f f38a 	uxth.w	r3, sl
 800438e:	1a5b      	subs	r3, r3, r1
 8004390:	0c00      	lsrs	r0, r0, #16
 8004392:	4463      	add	r3, ip
 8004394:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004398:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800439c:	b29b      	uxth	r3, r3
 800439e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80043a2:	4576      	cmp	r6, lr
 80043a4:	f849 3b04 	str.w	r3, [r9], #4
 80043a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80043ac:	d8e6      	bhi.n	800437c <__mdiff+0x88>
 80043ae:	1b33      	subs	r3, r6, r4
 80043b0:	3b15      	subs	r3, #21
 80043b2:	f023 0303 	bic.w	r3, r3, #3
 80043b6:	3415      	adds	r4, #21
 80043b8:	3304      	adds	r3, #4
 80043ba:	42a6      	cmp	r6, r4
 80043bc:	bf38      	it	cc
 80043be:	2304      	movcc	r3, #4
 80043c0:	441d      	add	r5, r3
 80043c2:	445b      	add	r3, fp
 80043c4:	461e      	mov	r6, r3
 80043c6:	462c      	mov	r4, r5
 80043c8:	4544      	cmp	r4, r8
 80043ca:	d30e      	bcc.n	80043ea <__mdiff+0xf6>
 80043cc:	f108 0103 	add.w	r1, r8, #3
 80043d0:	1b49      	subs	r1, r1, r5
 80043d2:	f021 0103 	bic.w	r1, r1, #3
 80043d6:	3d03      	subs	r5, #3
 80043d8:	45a8      	cmp	r8, r5
 80043da:	bf38      	it	cc
 80043dc:	2100      	movcc	r1, #0
 80043de:	440b      	add	r3, r1
 80043e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80043e4:	b191      	cbz	r1, 800440c <__mdiff+0x118>
 80043e6:	6117      	str	r7, [r2, #16]
 80043e8:	e79e      	b.n	8004328 <__mdiff+0x34>
 80043ea:	f854 1b04 	ldr.w	r1, [r4], #4
 80043ee:	46e6      	mov	lr, ip
 80043f0:	0c08      	lsrs	r0, r1, #16
 80043f2:	fa1c fc81 	uxtah	ip, ip, r1
 80043f6:	4471      	add	r1, lr
 80043f8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80043fc:	b289      	uxth	r1, r1
 80043fe:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004402:	f846 1b04 	str.w	r1, [r6], #4
 8004406:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800440a:	e7dd      	b.n	80043c8 <__mdiff+0xd4>
 800440c:	3f01      	subs	r7, #1
 800440e:	e7e7      	b.n	80043e0 <__mdiff+0xec>
 8004410:	08004c7e 	.word	0x08004c7e
 8004414:	08004c8f 	.word	0x08004c8f

08004418 <__d2b>:
 8004418:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800441c:	2101      	movs	r1, #1
 800441e:	9e08      	ldr	r6, [sp, #32]
 8004420:	4690      	mov	r8, r2
 8004422:	4699      	mov	r9, r3
 8004424:	f7ff fcd0 	bl	8003dc8 <_Balloc>
 8004428:	4604      	mov	r4, r0
 800442a:	b930      	cbnz	r0, 800443a <__d2b+0x22>
 800442c:	4602      	mov	r2, r0
 800442e:	4b24      	ldr	r3, [pc, #144]	@ (80044c0 <__d2b+0xa8>)
 8004430:	4824      	ldr	r0, [pc, #144]	@ (80044c4 <__d2b+0xac>)
 8004432:	f240 310f 	movw	r1, #783	@ 0x30f
 8004436:	f000 fad1 	bl	80049dc <__assert_func>
 800443a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800443e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004442:	b10d      	cbz	r5, 8004448 <__d2b+0x30>
 8004444:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	f1b8 0300 	subs.w	r3, r8, #0
 800444e:	d024      	beq.n	800449a <__d2b+0x82>
 8004450:	4668      	mov	r0, sp
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	f7ff fd7f 	bl	8003f56 <__lo0bits>
 8004458:	e9dd 1200 	ldrd	r1, r2, [sp]
 800445c:	b1d8      	cbz	r0, 8004496 <__d2b+0x7e>
 800445e:	f1c0 0320 	rsb	r3, r0, #32
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	430b      	orrs	r3, r1
 8004468:	40c2      	lsrs	r2, r0
 800446a:	6163      	str	r3, [r4, #20]
 800446c:	9201      	str	r2, [sp, #4]
 800446e:	9b01      	ldr	r3, [sp, #4]
 8004470:	61a3      	str	r3, [r4, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	bf0c      	ite	eq
 8004476:	2201      	moveq	r2, #1
 8004478:	2202      	movne	r2, #2
 800447a:	6122      	str	r2, [r4, #16]
 800447c:	b1ad      	cbz	r5, 80044aa <__d2b+0x92>
 800447e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004482:	4405      	add	r5, r0
 8004484:	6035      	str	r5, [r6, #0]
 8004486:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800448a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800448c:	6018      	str	r0, [r3, #0]
 800448e:	4620      	mov	r0, r4
 8004490:	b002      	add	sp, #8
 8004492:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004496:	6161      	str	r1, [r4, #20]
 8004498:	e7e9      	b.n	800446e <__d2b+0x56>
 800449a:	a801      	add	r0, sp, #4
 800449c:	f7ff fd5b 	bl	8003f56 <__lo0bits>
 80044a0:	9b01      	ldr	r3, [sp, #4]
 80044a2:	6163      	str	r3, [r4, #20]
 80044a4:	3020      	adds	r0, #32
 80044a6:	2201      	movs	r2, #1
 80044a8:	e7e7      	b.n	800447a <__d2b+0x62>
 80044aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80044ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80044b2:	6030      	str	r0, [r6, #0]
 80044b4:	6918      	ldr	r0, [r3, #16]
 80044b6:	f7ff fd2f 	bl	8003f18 <__hi0bits>
 80044ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80044be:	e7e4      	b.n	800448a <__d2b+0x72>
 80044c0:	08004c7e 	.word	0x08004c7e
 80044c4:	08004c8f 	.word	0x08004c8f

080044c8 <__sfputc_r>:
 80044c8:	6893      	ldr	r3, [r2, #8]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	b410      	push	{r4}
 80044d0:	6093      	str	r3, [r2, #8]
 80044d2:	da07      	bge.n	80044e4 <__sfputc_r+0x1c>
 80044d4:	6994      	ldr	r4, [r2, #24]
 80044d6:	42a3      	cmp	r3, r4
 80044d8:	db01      	blt.n	80044de <__sfputc_r+0x16>
 80044da:	290a      	cmp	r1, #10
 80044dc:	d102      	bne.n	80044e4 <__sfputc_r+0x1c>
 80044de:	bc10      	pop	{r4}
 80044e0:	f7fe bc0d 	b.w	8002cfe <__swbuf_r>
 80044e4:	6813      	ldr	r3, [r2, #0]
 80044e6:	1c58      	adds	r0, r3, #1
 80044e8:	6010      	str	r0, [r2, #0]
 80044ea:	7019      	strb	r1, [r3, #0]
 80044ec:	4608      	mov	r0, r1
 80044ee:	bc10      	pop	{r4}
 80044f0:	4770      	bx	lr

080044f2 <__sfputs_r>:
 80044f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f4:	4606      	mov	r6, r0
 80044f6:	460f      	mov	r7, r1
 80044f8:	4614      	mov	r4, r2
 80044fa:	18d5      	adds	r5, r2, r3
 80044fc:	42ac      	cmp	r4, r5
 80044fe:	d101      	bne.n	8004504 <__sfputs_r+0x12>
 8004500:	2000      	movs	r0, #0
 8004502:	e007      	b.n	8004514 <__sfputs_r+0x22>
 8004504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004508:	463a      	mov	r2, r7
 800450a:	4630      	mov	r0, r6
 800450c:	f7ff ffdc 	bl	80044c8 <__sfputc_r>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d1f3      	bne.n	80044fc <__sfputs_r+0xa>
 8004514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004518 <_vfiprintf_r>:
 8004518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451c:	460d      	mov	r5, r1
 800451e:	b09d      	sub	sp, #116	@ 0x74
 8004520:	4614      	mov	r4, r2
 8004522:	4698      	mov	r8, r3
 8004524:	4606      	mov	r6, r0
 8004526:	b118      	cbz	r0, 8004530 <_vfiprintf_r+0x18>
 8004528:	6a03      	ldr	r3, [r0, #32]
 800452a:	b90b      	cbnz	r3, 8004530 <_vfiprintf_r+0x18>
 800452c:	f7fe fafe 	bl	8002b2c <__sinit>
 8004530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004532:	07d9      	lsls	r1, r3, #31
 8004534:	d405      	bmi.n	8004542 <_vfiprintf_r+0x2a>
 8004536:	89ab      	ldrh	r3, [r5, #12]
 8004538:	059a      	lsls	r2, r3, #22
 800453a:	d402      	bmi.n	8004542 <_vfiprintf_r+0x2a>
 800453c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800453e:	f7fe fcf0 	bl	8002f22 <__retarget_lock_acquire_recursive>
 8004542:	89ab      	ldrh	r3, [r5, #12]
 8004544:	071b      	lsls	r3, r3, #28
 8004546:	d501      	bpl.n	800454c <_vfiprintf_r+0x34>
 8004548:	692b      	ldr	r3, [r5, #16]
 800454a:	b99b      	cbnz	r3, 8004574 <_vfiprintf_r+0x5c>
 800454c:	4629      	mov	r1, r5
 800454e:	4630      	mov	r0, r6
 8004550:	f7fe fc14 	bl	8002d7c <__swsetup_r>
 8004554:	b170      	cbz	r0, 8004574 <_vfiprintf_r+0x5c>
 8004556:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004558:	07dc      	lsls	r4, r3, #31
 800455a:	d504      	bpl.n	8004566 <_vfiprintf_r+0x4e>
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	b01d      	add	sp, #116	@ 0x74
 8004562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004566:	89ab      	ldrh	r3, [r5, #12]
 8004568:	0598      	lsls	r0, r3, #22
 800456a:	d4f7      	bmi.n	800455c <_vfiprintf_r+0x44>
 800456c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800456e:	f7fe fcd9 	bl	8002f24 <__retarget_lock_release_recursive>
 8004572:	e7f3      	b.n	800455c <_vfiprintf_r+0x44>
 8004574:	2300      	movs	r3, #0
 8004576:	9309      	str	r3, [sp, #36]	@ 0x24
 8004578:	2320      	movs	r3, #32
 800457a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800457e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004582:	2330      	movs	r3, #48	@ 0x30
 8004584:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004734 <_vfiprintf_r+0x21c>
 8004588:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800458c:	f04f 0901 	mov.w	r9, #1
 8004590:	4623      	mov	r3, r4
 8004592:	469a      	mov	sl, r3
 8004594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004598:	b10a      	cbz	r2, 800459e <_vfiprintf_r+0x86>
 800459a:	2a25      	cmp	r2, #37	@ 0x25
 800459c:	d1f9      	bne.n	8004592 <_vfiprintf_r+0x7a>
 800459e:	ebba 0b04 	subs.w	fp, sl, r4
 80045a2:	d00b      	beq.n	80045bc <_vfiprintf_r+0xa4>
 80045a4:	465b      	mov	r3, fp
 80045a6:	4622      	mov	r2, r4
 80045a8:	4629      	mov	r1, r5
 80045aa:	4630      	mov	r0, r6
 80045ac:	f7ff ffa1 	bl	80044f2 <__sfputs_r>
 80045b0:	3001      	adds	r0, #1
 80045b2:	f000 80a7 	beq.w	8004704 <_vfiprintf_r+0x1ec>
 80045b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045b8:	445a      	add	r2, fp
 80045ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80045bc:	f89a 3000 	ldrb.w	r3, [sl]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 809f 	beq.w	8004704 <_vfiprintf_r+0x1ec>
 80045c6:	2300      	movs	r3, #0
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045d0:	f10a 0a01 	add.w	sl, sl, #1
 80045d4:	9304      	str	r3, [sp, #16]
 80045d6:	9307      	str	r3, [sp, #28]
 80045d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80045de:	4654      	mov	r4, sl
 80045e0:	2205      	movs	r2, #5
 80045e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045e6:	4853      	ldr	r0, [pc, #332]	@ (8004734 <_vfiprintf_r+0x21c>)
 80045e8:	f7fb fe2a 	bl	8000240 <memchr>
 80045ec:	9a04      	ldr	r2, [sp, #16]
 80045ee:	b9d8      	cbnz	r0, 8004628 <_vfiprintf_r+0x110>
 80045f0:	06d1      	lsls	r1, r2, #27
 80045f2:	bf44      	itt	mi
 80045f4:	2320      	movmi	r3, #32
 80045f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045fa:	0713      	lsls	r3, r2, #28
 80045fc:	bf44      	itt	mi
 80045fe:	232b      	movmi	r3, #43	@ 0x2b
 8004600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004604:	f89a 3000 	ldrb.w	r3, [sl]
 8004608:	2b2a      	cmp	r3, #42	@ 0x2a
 800460a:	d015      	beq.n	8004638 <_vfiprintf_r+0x120>
 800460c:	9a07      	ldr	r2, [sp, #28]
 800460e:	4654      	mov	r4, sl
 8004610:	2000      	movs	r0, #0
 8004612:	f04f 0c0a 	mov.w	ip, #10
 8004616:	4621      	mov	r1, r4
 8004618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800461c:	3b30      	subs	r3, #48	@ 0x30
 800461e:	2b09      	cmp	r3, #9
 8004620:	d94b      	bls.n	80046ba <_vfiprintf_r+0x1a2>
 8004622:	b1b0      	cbz	r0, 8004652 <_vfiprintf_r+0x13a>
 8004624:	9207      	str	r2, [sp, #28]
 8004626:	e014      	b.n	8004652 <_vfiprintf_r+0x13a>
 8004628:	eba0 0308 	sub.w	r3, r0, r8
 800462c:	fa09 f303 	lsl.w	r3, r9, r3
 8004630:	4313      	orrs	r3, r2
 8004632:	9304      	str	r3, [sp, #16]
 8004634:	46a2      	mov	sl, r4
 8004636:	e7d2      	b.n	80045de <_vfiprintf_r+0xc6>
 8004638:	9b03      	ldr	r3, [sp, #12]
 800463a:	1d19      	adds	r1, r3, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	9103      	str	r1, [sp, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	bfbb      	ittet	lt
 8004644:	425b      	neglt	r3, r3
 8004646:	f042 0202 	orrlt.w	r2, r2, #2
 800464a:	9307      	strge	r3, [sp, #28]
 800464c:	9307      	strlt	r3, [sp, #28]
 800464e:	bfb8      	it	lt
 8004650:	9204      	strlt	r2, [sp, #16]
 8004652:	7823      	ldrb	r3, [r4, #0]
 8004654:	2b2e      	cmp	r3, #46	@ 0x2e
 8004656:	d10a      	bne.n	800466e <_vfiprintf_r+0x156>
 8004658:	7863      	ldrb	r3, [r4, #1]
 800465a:	2b2a      	cmp	r3, #42	@ 0x2a
 800465c:	d132      	bne.n	80046c4 <_vfiprintf_r+0x1ac>
 800465e:	9b03      	ldr	r3, [sp, #12]
 8004660:	1d1a      	adds	r2, r3, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	9203      	str	r2, [sp, #12]
 8004666:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800466a:	3402      	adds	r4, #2
 800466c:	9305      	str	r3, [sp, #20]
 800466e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004738 <_vfiprintf_r+0x220>
 8004672:	7821      	ldrb	r1, [r4, #0]
 8004674:	2203      	movs	r2, #3
 8004676:	4650      	mov	r0, sl
 8004678:	f7fb fde2 	bl	8000240 <memchr>
 800467c:	b138      	cbz	r0, 800468e <_vfiprintf_r+0x176>
 800467e:	9b04      	ldr	r3, [sp, #16]
 8004680:	eba0 000a 	sub.w	r0, r0, sl
 8004684:	2240      	movs	r2, #64	@ 0x40
 8004686:	4082      	lsls	r2, r0
 8004688:	4313      	orrs	r3, r2
 800468a:	3401      	adds	r4, #1
 800468c:	9304      	str	r3, [sp, #16]
 800468e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004692:	482a      	ldr	r0, [pc, #168]	@ (800473c <_vfiprintf_r+0x224>)
 8004694:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004698:	2206      	movs	r2, #6
 800469a:	f7fb fdd1 	bl	8000240 <memchr>
 800469e:	2800      	cmp	r0, #0
 80046a0:	d03f      	beq.n	8004722 <_vfiprintf_r+0x20a>
 80046a2:	4b27      	ldr	r3, [pc, #156]	@ (8004740 <_vfiprintf_r+0x228>)
 80046a4:	bb1b      	cbnz	r3, 80046ee <_vfiprintf_r+0x1d6>
 80046a6:	9b03      	ldr	r3, [sp, #12]
 80046a8:	3307      	adds	r3, #7
 80046aa:	f023 0307 	bic.w	r3, r3, #7
 80046ae:	3308      	adds	r3, #8
 80046b0:	9303      	str	r3, [sp, #12]
 80046b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046b4:	443b      	add	r3, r7
 80046b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80046b8:	e76a      	b.n	8004590 <_vfiprintf_r+0x78>
 80046ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80046be:	460c      	mov	r4, r1
 80046c0:	2001      	movs	r0, #1
 80046c2:	e7a8      	b.n	8004616 <_vfiprintf_r+0xfe>
 80046c4:	2300      	movs	r3, #0
 80046c6:	3401      	adds	r4, #1
 80046c8:	9305      	str	r3, [sp, #20]
 80046ca:	4619      	mov	r1, r3
 80046cc:	f04f 0c0a 	mov.w	ip, #10
 80046d0:	4620      	mov	r0, r4
 80046d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046d6:	3a30      	subs	r2, #48	@ 0x30
 80046d8:	2a09      	cmp	r2, #9
 80046da:	d903      	bls.n	80046e4 <_vfiprintf_r+0x1cc>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0c6      	beq.n	800466e <_vfiprintf_r+0x156>
 80046e0:	9105      	str	r1, [sp, #20]
 80046e2:	e7c4      	b.n	800466e <_vfiprintf_r+0x156>
 80046e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80046e8:	4604      	mov	r4, r0
 80046ea:	2301      	movs	r3, #1
 80046ec:	e7f0      	b.n	80046d0 <_vfiprintf_r+0x1b8>
 80046ee:	ab03      	add	r3, sp, #12
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	462a      	mov	r2, r5
 80046f4:	4b13      	ldr	r3, [pc, #76]	@ (8004744 <_vfiprintf_r+0x22c>)
 80046f6:	a904      	add	r1, sp, #16
 80046f8:	4630      	mov	r0, r6
 80046fa:	f7fd fdd1 	bl	80022a0 <_printf_float>
 80046fe:	4607      	mov	r7, r0
 8004700:	1c78      	adds	r0, r7, #1
 8004702:	d1d6      	bne.n	80046b2 <_vfiprintf_r+0x19a>
 8004704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004706:	07d9      	lsls	r1, r3, #31
 8004708:	d405      	bmi.n	8004716 <_vfiprintf_r+0x1fe>
 800470a:	89ab      	ldrh	r3, [r5, #12]
 800470c:	059a      	lsls	r2, r3, #22
 800470e:	d402      	bmi.n	8004716 <_vfiprintf_r+0x1fe>
 8004710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004712:	f7fe fc07 	bl	8002f24 <__retarget_lock_release_recursive>
 8004716:	89ab      	ldrh	r3, [r5, #12]
 8004718:	065b      	lsls	r3, r3, #25
 800471a:	f53f af1f 	bmi.w	800455c <_vfiprintf_r+0x44>
 800471e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004720:	e71e      	b.n	8004560 <_vfiprintf_r+0x48>
 8004722:	ab03      	add	r3, sp, #12
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	462a      	mov	r2, r5
 8004728:	4b06      	ldr	r3, [pc, #24]	@ (8004744 <_vfiprintf_r+0x22c>)
 800472a:	a904      	add	r1, sp, #16
 800472c:	4630      	mov	r0, r6
 800472e:	f7fe f851 	bl	80027d4 <_printf_i>
 8004732:	e7e4      	b.n	80046fe <_vfiprintf_r+0x1e6>
 8004734:	08004de8 	.word	0x08004de8
 8004738:	08004dee 	.word	0x08004dee
 800473c:	08004df2 	.word	0x08004df2
 8004740:	080022a1 	.word	0x080022a1
 8004744:	080044f3 	.word	0x080044f3

08004748 <__sflush_r>:
 8004748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	0716      	lsls	r6, r2, #28
 8004750:	4605      	mov	r5, r0
 8004752:	460c      	mov	r4, r1
 8004754:	d454      	bmi.n	8004800 <__sflush_r+0xb8>
 8004756:	684b      	ldr	r3, [r1, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	dc02      	bgt.n	8004762 <__sflush_r+0x1a>
 800475c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	dd48      	ble.n	80047f4 <__sflush_r+0xac>
 8004762:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004764:	2e00      	cmp	r6, #0
 8004766:	d045      	beq.n	80047f4 <__sflush_r+0xac>
 8004768:	2300      	movs	r3, #0
 800476a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800476e:	682f      	ldr	r7, [r5, #0]
 8004770:	6a21      	ldr	r1, [r4, #32]
 8004772:	602b      	str	r3, [r5, #0]
 8004774:	d030      	beq.n	80047d8 <__sflush_r+0x90>
 8004776:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004778:	89a3      	ldrh	r3, [r4, #12]
 800477a:	0759      	lsls	r1, r3, #29
 800477c:	d505      	bpl.n	800478a <__sflush_r+0x42>
 800477e:	6863      	ldr	r3, [r4, #4]
 8004780:	1ad2      	subs	r2, r2, r3
 8004782:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004784:	b10b      	cbz	r3, 800478a <__sflush_r+0x42>
 8004786:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004788:	1ad2      	subs	r2, r2, r3
 800478a:	2300      	movs	r3, #0
 800478c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800478e:	6a21      	ldr	r1, [r4, #32]
 8004790:	4628      	mov	r0, r5
 8004792:	47b0      	blx	r6
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	89a3      	ldrh	r3, [r4, #12]
 8004798:	d106      	bne.n	80047a8 <__sflush_r+0x60>
 800479a:	6829      	ldr	r1, [r5, #0]
 800479c:	291d      	cmp	r1, #29
 800479e:	d82b      	bhi.n	80047f8 <__sflush_r+0xb0>
 80047a0:	4a28      	ldr	r2, [pc, #160]	@ (8004844 <__sflush_r+0xfc>)
 80047a2:	410a      	asrs	r2, r1
 80047a4:	07d6      	lsls	r6, r2, #31
 80047a6:	d427      	bmi.n	80047f8 <__sflush_r+0xb0>
 80047a8:	2200      	movs	r2, #0
 80047aa:	6062      	str	r2, [r4, #4]
 80047ac:	04d9      	lsls	r1, r3, #19
 80047ae:	6922      	ldr	r2, [r4, #16]
 80047b0:	6022      	str	r2, [r4, #0]
 80047b2:	d504      	bpl.n	80047be <__sflush_r+0x76>
 80047b4:	1c42      	adds	r2, r0, #1
 80047b6:	d101      	bne.n	80047bc <__sflush_r+0x74>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b903      	cbnz	r3, 80047be <__sflush_r+0x76>
 80047bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80047be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047c0:	602f      	str	r7, [r5, #0]
 80047c2:	b1b9      	cbz	r1, 80047f4 <__sflush_r+0xac>
 80047c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047c8:	4299      	cmp	r1, r3
 80047ca:	d002      	beq.n	80047d2 <__sflush_r+0x8a>
 80047cc:	4628      	mov	r0, r5
 80047ce:	f7ff f9fb 	bl	8003bc8 <_free_r>
 80047d2:	2300      	movs	r3, #0
 80047d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80047d6:	e00d      	b.n	80047f4 <__sflush_r+0xac>
 80047d8:	2301      	movs	r3, #1
 80047da:	4628      	mov	r0, r5
 80047dc:	47b0      	blx	r6
 80047de:	4602      	mov	r2, r0
 80047e0:	1c50      	adds	r0, r2, #1
 80047e2:	d1c9      	bne.n	8004778 <__sflush_r+0x30>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0c6      	beq.n	8004778 <__sflush_r+0x30>
 80047ea:	2b1d      	cmp	r3, #29
 80047ec:	d001      	beq.n	80047f2 <__sflush_r+0xaa>
 80047ee:	2b16      	cmp	r3, #22
 80047f0:	d11d      	bne.n	800482e <__sflush_r+0xe6>
 80047f2:	602f      	str	r7, [r5, #0]
 80047f4:	2000      	movs	r0, #0
 80047f6:	e021      	b.n	800483c <__sflush_r+0xf4>
 80047f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047fc:	b21b      	sxth	r3, r3
 80047fe:	e01a      	b.n	8004836 <__sflush_r+0xee>
 8004800:	690f      	ldr	r7, [r1, #16]
 8004802:	2f00      	cmp	r7, #0
 8004804:	d0f6      	beq.n	80047f4 <__sflush_r+0xac>
 8004806:	0793      	lsls	r3, r2, #30
 8004808:	680e      	ldr	r6, [r1, #0]
 800480a:	bf08      	it	eq
 800480c:	694b      	ldreq	r3, [r1, #20]
 800480e:	600f      	str	r7, [r1, #0]
 8004810:	bf18      	it	ne
 8004812:	2300      	movne	r3, #0
 8004814:	1bf6      	subs	r6, r6, r7
 8004816:	608b      	str	r3, [r1, #8]
 8004818:	2e00      	cmp	r6, #0
 800481a:	ddeb      	ble.n	80047f4 <__sflush_r+0xac>
 800481c:	6a21      	ldr	r1, [r4, #32]
 800481e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004822:	4633      	mov	r3, r6
 8004824:	463a      	mov	r2, r7
 8004826:	4628      	mov	r0, r5
 8004828:	47e0      	blx	ip
 800482a:	2800      	cmp	r0, #0
 800482c:	dc07      	bgt.n	800483e <__sflush_r+0xf6>
 800482e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004836:	81a3      	strh	r3, [r4, #12]
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800483e:	4407      	add	r7, r0
 8004840:	1a36      	subs	r6, r6, r0
 8004842:	e7e9      	b.n	8004818 <__sflush_r+0xd0>
 8004844:	dfbffffe 	.word	0xdfbffffe

08004848 <_fflush_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	690b      	ldr	r3, [r1, #16]
 800484c:	4605      	mov	r5, r0
 800484e:	460c      	mov	r4, r1
 8004850:	b913      	cbnz	r3, 8004858 <_fflush_r+0x10>
 8004852:	2500      	movs	r5, #0
 8004854:	4628      	mov	r0, r5
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	b118      	cbz	r0, 8004862 <_fflush_r+0x1a>
 800485a:	6a03      	ldr	r3, [r0, #32]
 800485c:	b90b      	cbnz	r3, 8004862 <_fflush_r+0x1a>
 800485e:	f7fe f965 	bl	8002b2c <__sinit>
 8004862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f3      	beq.n	8004852 <_fflush_r+0xa>
 800486a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800486c:	07d0      	lsls	r0, r2, #31
 800486e:	d404      	bmi.n	800487a <_fflush_r+0x32>
 8004870:	0599      	lsls	r1, r3, #22
 8004872:	d402      	bmi.n	800487a <_fflush_r+0x32>
 8004874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004876:	f7fe fb54 	bl	8002f22 <__retarget_lock_acquire_recursive>
 800487a:	4628      	mov	r0, r5
 800487c:	4621      	mov	r1, r4
 800487e:	f7ff ff63 	bl	8004748 <__sflush_r>
 8004882:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004884:	07da      	lsls	r2, r3, #31
 8004886:	4605      	mov	r5, r0
 8004888:	d4e4      	bmi.n	8004854 <_fflush_r+0xc>
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	059b      	lsls	r3, r3, #22
 800488e:	d4e1      	bmi.n	8004854 <_fflush_r+0xc>
 8004890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004892:	f7fe fb47 	bl	8002f24 <__retarget_lock_release_recursive>
 8004896:	e7dd      	b.n	8004854 <_fflush_r+0xc>

08004898 <__swhatbuf_r>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	460c      	mov	r4, r1
 800489c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a0:	2900      	cmp	r1, #0
 80048a2:	b096      	sub	sp, #88	@ 0x58
 80048a4:	4615      	mov	r5, r2
 80048a6:	461e      	mov	r6, r3
 80048a8:	da0d      	bge.n	80048c6 <__swhatbuf_r+0x2e>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80048b0:	f04f 0100 	mov.w	r1, #0
 80048b4:	bf14      	ite	ne
 80048b6:	2340      	movne	r3, #64	@ 0x40
 80048b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80048bc:	2000      	movs	r0, #0
 80048be:	6031      	str	r1, [r6, #0]
 80048c0:	602b      	str	r3, [r5, #0]
 80048c2:	b016      	add	sp, #88	@ 0x58
 80048c4:	bd70      	pop	{r4, r5, r6, pc}
 80048c6:	466a      	mov	r2, sp
 80048c8:	f000 f848 	bl	800495c <_fstat_r>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	dbec      	blt.n	80048aa <__swhatbuf_r+0x12>
 80048d0:	9901      	ldr	r1, [sp, #4]
 80048d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80048d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80048da:	4259      	negs	r1, r3
 80048dc:	4159      	adcs	r1, r3
 80048de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048e2:	e7eb      	b.n	80048bc <__swhatbuf_r+0x24>

080048e4 <__smakebuf_r>:
 80048e4:	898b      	ldrh	r3, [r1, #12]
 80048e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048e8:	079d      	lsls	r5, r3, #30
 80048ea:	4606      	mov	r6, r0
 80048ec:	460c      	mov	r4, r1
 80048ee:	d507      	bpl.n	8004900 <__smakebuf_r+0x1c>
 80048f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	6123      	str	r3, [r4, #16]
 80048f8:	2301      	movs	r3, #1
 80048fa:	6163      	str	r3, [r4, #20]
 80048fc:	b003      	add	sp, #12
 80048fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004900:	ab01      	add	r3, sp, #4
 8004902:	466a      	mov	r2, sp
 8004904:	f7ff ffc8 	bl	8004898 <__swhatbuf_r>
 8004908:	9f00      	ldr	r7, [sp, #0]
 800490a:	4605      	mov	r5, r0
 800490c:	4639      	mov	r1, r7
 800490e:	4630      	mov	r0, r6
 8004910:	f7ff f9ce 	bl	8003cb0 <_malloc_r>
 8004914:	b948      	cbnz	r0, 800492a <__smakebuf_r+0x46>
 8004916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800491a:	059a      	lsls	r2, r3, #22
 800491c:	d4ee      	bmi.n	80048fc <__smakebuf_r+0x18>
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	f043 0302 	orr.w	r3, r3, #2
 8004926:	81a3      	strh	r3, [r4, #12]
 8004928:	e7e2      	b.n	80048f0 <__smakebuf_r+0xc>
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	6020      	str	r0, [r4, #0]
 800492e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004932:	81a3      	strh	r3, [r4, #12]
 8004934:	9b01      	ldr	r3, [sp, #4]
 8004936:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800493a:	b15b      	cbz	r3, 8004954 <__smakebuf_r+0x70>
 800493c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004940:	4630      	mov	r0, r6
 8004942:	f000 f81d 	bl	8004980 <_isatty_r>
 8004946:	b128      	cbz	r0, 8004954 <__smakebuf_r+0x70>
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	81a3      	strh	r3, [r4, #12]
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	431d      	orrs	r5, r3
 8004958:	81a5      	strh	r5, [r4, #12]
 800495a:	e7cf      	b.n	80048fc <__smakebuf_r+0x18>

0800495c <_fstat_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4d07      	ldr	r5, [pc, #28]	@ (800497c <_fstat_r+0x20>)
 8004960:	2300      	movs	r3, #0
 8004962:	4604      	mov	r4, r0
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	602b      	str	r3, [r5, #0]
 800496a:	f7fc fb15 	bl	8000f98 <_fstat>
 800496e:	1c43      	adds	r3, r0, #1
 8004970:	d102      	bne.n	8004978 <_fstat_r+0x1c>
 8004972:	682b      	ldr	r3, [r5, #0]
 8004974:	b103      	cbz	r3, 8004978 <_fstat_r+0x1c>
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	bd38      	pop	{r3, r4, r5, pc}
 800497a:	bf00      	nop
 800497c:	2000076c 	.word	0x2000076c

08004980 <_isatty_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4d06      	ldr	r5, [pc, #24]	@ (800499c <_isatty_r+0x1c>)
 8004984:	2300      	movs	r3, #0
 8004986:	4604      	mov	r4, r0
 8004988:	4608      	mov	r0, r1
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	f7fc fb13 	bl	8000fb6 <_isatty>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_isatty_r+0x1a>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_isatty_r+0x1a>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	2000076c 	.word	0x2000076c

080049a0 <_sbrk_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	4d06      	ldr	r5, [pc, #24]	@ (80049bc <_sbrk_r+0x1c>)
 80049a4:	2300      	movs	r3, #0
 80049a6:	4604      	mov	r4, r0
 80049a8:	4608      	mov	r0, r1
 80049aa:	602b      	str	r3, [r5, #0]
 80049ac:	f7fc fb1a 	bl	8000fe4 <_sbrk>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_sbrk_r+0x1a>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_sbrk_r+0x1a>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	2000076c 	.word	0x2000076c

080049c0 <memcpy>:
 80049c0:	440a      	add	r2, r1
 80049c2:	4291      	cmp	r1, r2
 80049c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049c8:	d100      	bne.n	80049cc <memcpy+0xc>
 80049ca:	4770      	bx	lr
 80049cc:	b510      	push	{r4, lr}
 80049ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049d6:	4291      	cmp	r1, r2
 80049d8:	d1f9      	bne.n	80049ce <memcpy+0xe>
 80049da:	bd10      	pop	{r4, pc}

080049dc <__assert_func>:
 80049dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049de:	4614      	mov	r4, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	4b09      	ldr	r3, [pc, #36]	@ (8004a08 <__assert_func+0x2c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4605      	mov	r5, r0
 80049e8:	68d8      	ldr	r0, [r3, #12]
 80049ea:	b954      	cbnz	r4, 8004a02 <__assert_func+0x26>
 80049ec:	4b07      	ldr	r3, [pc, #28]	@ (8004a0c <__assert_func+0x30>)
 80049ee:	461c      	mov	r4, r3
 80049f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049f4:	9100      	str	r1, [sp, #0]
 80049f6:	462b      	mov	r3, r5
 80049f8:	4905      	ldr	r1, [pc, #20]	@ (8004a10 <__assert_func+0x34>)
 80049fa:	f000 f841 	bl	8004a80 <fiprintf>
 80049fe:	f000 f851 	bl	8004aa4 <abort>
 8004a02:	4b04      	ldr	r3, [pc, #16]	@ (8004a14 <__assert_func+0x38>)
 8004a04:	e7f4      	b.n	80049f0 <__assert_func+0x14>
 8004a06:	bf00      	nop
 8004a08:	2000002c 	.word	0x2000002c
 8004a0c:	08004e3e 	.word	0x08004e3e
 8004a10:	08004e10 	.word	0x08004e10
 8004a14:	08004e03 	.word	0x08004e03

08004a18 <_calloc_r>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	fba1 5402 	umull	r5, r4, r1, r2
 8004a1e:	b93c      	cbnz	r4, 8004a30 <_calloc_r+0x18>
 8004a20:	4629      	mov	r1, r5
 8004a22:	f7ff f945 	bl	8003cb0 <_malloc_r>
 8004a26:	4606      	mov	r6, r0
 8004a28:	b928      	cbnz	r0, 8004a36 <_calloc_r+0x1e>
 8004a2a:	2600      	movs	r6, #0
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	220c      	movs	r2, #12
 8004a32:	6002      	str	r2, [r0, #0]
 8004a34:	e7f9      	b.n	8004a2a <_calloc_r+0x12>
 8004a36:	462a      	mov	r2, r5
 8004a38:	4621      	mov	r1, r4
 8004a3a:	f7fe f9f5 	bl	8002e28 <memset>
 8004a3e:	e7f5      	b.n	8004a2c <_calloc_r+0x14>

08004a40 <__ascii_mbtowc>:
 8004a40:	b082      	sub	sp, #8
 8004a42:	b901      	cbnz	r1, 8004a46 <__ascii_mbtowc+0x6>
 8004a44:	a901      	add	r1, sp, #4
 8004a46:	b142      	cbz	r2, 8004a5a <__ascii_mbtowc+0x1a>
 8004a48:	b14b      	cbz	r3, 8004a5e <__ascii_mbtowc+0x1e>
 8004a4a:	7813      	ldrb	r3, [r2, #0]
 8004a4c:	600b      	str	r3, [r1, #0]
 8004a4e:	7812      	ldrb	r2, [r2, #0]
 8004a50:	1e10      	subs	r0, r2, #0
 8004a52:	bf18      	it	ne
 8004a54:	2001      	movne	r0, #1
 8004a56:	b002      	add	sp, #8
 8004a58:	4770      	bx	lr
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	e7fb      	b.n	8004a56 <__ascii_mbtowc+0x16>
 8004a5e:	f06f 0001 	mvn.w	r0, #1
 8004a62:	e7f8      	b.n	8004a56 <__ascii_mbtowc+0x16>

08004a64 <__ascii_wctomb>:
 8004a64:	4603      	mov	r3, r0
 8004a66:	4608      	mov	r0, r1
 8004a68:	b141      	cbz	r1, 8004a7c <__ascii_wctomb+0x18>
 8004a6a:	2aff      	cmp	r2, #255	@ 0xff
 8004a6c:	d904      	bls.n	8004a78 <__ascii_wctomb+0x14>
 8004a6e:	228a      	movs	r2, #138	@ 0x8a
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	f04f 30ff 	mov.w	r0, #4294967295
 8004a76:	4770      	bx	lr
 8004a78:	700a      	strb	r2, [r1, #0]
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	4770      	bx	lr
	...

08004a80 <fiprintf>:
 8004a80:	b40e      	push	{r1, r2, r3}
 8004a82:	b503      	push	{r0, r1, lr}
 8004a84:	4601      	mov	r1, r0
 8004a86:	ab03      	add	r3, sp, #12
 8004a88:	4805      	ldr	r0, [pc, #20]	@ (8004aa0 <fiprintf+0x20>)
 8004a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a8e:	6800      	ldr	r0, [r0, #0]
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	f7ff fd41 	bl	8004518 <_vfiprintf_r>
 8004a96:	b002      	add	sp, #8
 8004a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a9c:	b003      	add	sp, #12
 8004a9e:	4770      	bx	lr
 8004aa0:	2000002c 	.word	0x2000002c

08004aa4 <abort>:
 8004aa4:	b508      	push	{r3, lr}
 8004aa6:	2006      	movs	r0, #6
 8004aa8:	f000 f82c 	bl	8004b04 <raise>
 8004aac:	2001      	movs	r0, #1
 8004aae:	f7fc fa24 	bl	8000efa <_exit>

08004ab2 <_raise_r>:
 8004ab2:	291f      	cmp	r1, #31
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4605      	mov	r5, r0
 8004ab8:	460c      	mov	r4, r1
 8004aba:	d904      	bls.n	8004ac6 <_raise_r+0x14>
 8004abc:	2316      	movs	r3, #22
 8004abe:	6003      	str	r3, [r0, #0]
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac4:	bd38      	pop	{r3, r4, r5, pc}
 8004ac6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004ac8:	b112      	cbz	r2, 8004ad0 <_raise_r+0x1e>
 8004aca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ace:	b94b      	cbnz	r3, 8004ae4 <_raise_r+0x32>
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f000 f831 	bl	8004b38 <_getpid_r>
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	4601      	mov	r1, r0
 8004ada:	4628      	mov	r0, r5
 8004adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ae0:	f000 b818 	b.w	8004b14 <_kill_r>
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d00a      	beq.n	8004afe <_raise_r+0x4c>
 8004ae8:	1c59      	adds	r1, r3, #1
 8004aea:	d103      	bne.n	8004af4 <_raise_r+0x42>
 8004aec:	2316      	movs	r3, #22
 8004aee:	6003      	str	r3, [r0, #0]
 8004af0:	2001      	movs	r0, #1
 8004af2:	e7e7      	b.n	8004ac4 <_raise_r+0x12>
 8004af4:	2100      	movs	r1, #0
 8004af6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004afa:	4620      	mov	r0, r4
 8004afc:	4798      	blx	r3
 8004afe:	2000      	movs	r0, #0
 8004b00:	e7e0      	b.n	8004ac4 <_raise_r+0x12>
	...

08004b04 <raise>:
 8004b04:	4b02      	ldr	r3, [pc, #8]	@ (8004b10 <raise+0xc>)
 8004b06:	4601      	mov	r1, r0
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	f7ff bfd2 	b.w	8004ab2 <_raise_r>
 8004b0e:	bf00      	nop
 8004b10:	2000002c 	.word	0x2000002c

08004b14 <_kill_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4d07      	ldr	r5, [pc, #28]	@ (8004b34 <_kill_r+0x20>)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	602b      	str	r3, [r5, #0]
 8004b22:	f7fc f9da 	bl	8000eda <_kill>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	d102      	bne.n	8004b30 <_kill_r+0x1c>
 8004b2a:	682b      	ldr	r3, [r5, #0]
 8004b2c:	b103      	cbz	r3, 8004b30 <_kill_r+0x1c>
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	bd38      	pop	{r3, r4, r5, pc}
 8004b32:	bf00      	nop
 8004b34:	2000076c 	.word	0x2000076c

08004b38 <_getpid_r>:
 8004b38:	f7fc b9c8 	b.w	8000ecc <_getpid>

08004b3c <_init>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	bf00      	nop
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr

08004b48 <_fini>:
 8004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4a:	bf00      	nop
 8004b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4e:	bc08      	pop	{r3}
 8004b50:	469e      	mov	lr, r3
 8004b52:	4770      	bx	lr
