
STM32F767XX_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011f8  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080013f0  080013f0  000023f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001400  08001400  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001400  08001400  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001400  08001400  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001400  08001400  00002400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001404  08001404  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001408  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001464  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001464  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000120f  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ed  00000000  00000000  00004295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  00004788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000124  00000000  00000000  00004918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000363b  00000000  00000000  00004a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002053  00000000  00000000  00008077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b86b  00000000  00000000  0000a0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00015935  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bc4  00000000  00000000  00015978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0001653c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	080013d8 	.word	0x080013d8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	080013d8 	.word	0x080013d8

08000238 <delay>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(void)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
	for(uint32_t i =0; i<500000 ; i++);
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e002      	b.n	800024a <delay+0x12>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4a04      	ldr	r2, [pc, #16]	@ (8000260 <delay+0x28>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d9f8      	bls.n	8000244 <delay+0xc>
}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	0007a11f 	.word	0x0007a11f

08000264 <main>:

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx =GPIOB;
 800026a:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <main+0x44>)
 800026c:	607b      	str	r3, [r7, #4]

	GpioLed.GPIOPinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800026e:	2307      	movs	r3, #7
 8000270:	723b      	strb	r3, [r7, #8]

	GpioLed.GPIOPinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000272:	2301      	movs	r3, #1
 8000274:	727b      	strb	r3, [r7, #9]

	GpioLed.GPIOPinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000276:	2302      	movs	r3, #2
 8000278:	72bb      	strb	r3, [r7, #10]

	GpioLed.GPIOPinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800027a:	2300      	movs	r3, #0
 800027c:	733b      	strb	r3, [r7, #12]

	GpioLed.GPIOPinConfig.GPIO_PinPuPdControl  = GPIO_NO_PP;
 800027e:	2300      	movs	r3, #0
 8000280:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClkControl(GPIOB, ENABLE);
 8000282:	2101      	movs	r1, #1
 8000284:	4808      	ldr	r0, [pc, #32]	@ (80002a8 <main+0x44>)
 8000286:	f000 f903 	bl	8000490 <GPIO_PeriClkControl>

	GPIO_Init(&GpioLed);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fa17 	bl	80006c0 <GPIO_Init>

	while (1)
	{
//		GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_7);
 8000292:	2107      	movs	r1, #7
 8000294:	4804      	ldr	r0, [pc, #16]	@ (80002a8 <main+0x44>)
 8000296:	f000 fbe3 	bl	8000a60 <GPIO_ToggleOutputPin>
		delay();
 800029a:	f7ff ffcd 	bl	8000238 <delay>
		printf("Hello WOrld \n");
 800029e:	4803      	ldr	r0, [pc, #12]	@ (80002ac <main+0x48>)
 80002a0:	f000 fd0a 	bl	8000cb8 <puts>
		GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_7);
 80002a4:	bf00      	nop
 80002a6:	e7f4      	b.n	8000292 <main+0x2e>
 80002a8:	40020400 	.word	0x40020400
 80002ac:	080013f0 	.word	0x080013f0

080002b0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80002ba:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <ITM_SendChar+0x44>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <ITM_SendChar+0x44>)
 80002c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002c4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80002c6:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <ITM_SendChar+0x48>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a0b      	ldr	r2, [pc, #44]	@ (80002f8 <ITM_SendChar+0x48>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002d2:	bf00      	nop
 80002d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f8      	beq.n	80002d4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002e2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	6013      	str	r3, [r2, #0]
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	e000edfc 	.word	0xe000edfc
 80002f8:	e0000e00 	.word	0xe0000e00

080002fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	60b9      	str	r1, [r7, #8]
 8000306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]
 800030c:	e00a      	b.n	8000324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800030e:	f3af 8000 	nop.w
 8000312:	4601      	mov	r1, r0
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	60ba      	str	r2, [r7, #8]
 800031a:	b2ca      	uxtb	r2, r1
 800031c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	3301      	adds	r3, #1
 8000322:	617b      	str	r3, [r7, #20]
 8000324:	697a      	ldr	r2, [r7, #20]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	429a      	cmp	r2, r3
 800032a:	dbf0      	blt.n	800030e <_read+0x12>
  }

  return len;
 800032c:	687b      	ldr	r3, [r7, #4]
}
 800032e:	4618      	mov	r0, r3
 8000330:	3718      	adds	r7, #24
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b086      	sub	sp, #24
 800033a:	af00      	add	r7, sp, #0
 800033c:	60f8      	str	r0, [r7, #12]
 800033e:	60b9      	str	r1, [r7, #8]
 8000340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
 8000346:	e009      	b.n	800035c <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	1c5a      	adds	r2, r3, #1
 800034c:	60ba      	str	r2, [r7, #8]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ffad 	bl	80002b0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	3301      	adds	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	429a      	cmp	r2, r3
 8000362:	dbf1      	blt.n	8000348 <_write+0x12>
  }
  return len;
 8000364:	687b      	ldr	r3, [r7, #4]
}
 8000366:	4618      	mov	r0, r3
 8000368:	3718      	adds	r7, #24
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <_close>:

int _close(int file)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800037a:	4618      	mov	r0, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000394:	605a      	str	r2, [r3, #4]
  return 0;
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr

080003a2 <_isatty>:

int _isatty(int file)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003aa:	2301      	movs	r3, #1
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr

080003b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b085      	sub	sp, #20
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	60f8      	str	r0, [r7, #12]
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
	...

080003d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003d8:	4a14      	ldr	r2, [pc, #80]	@ (800042c <_sbrk+0x5c>)
 80003da:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <_sbrk+0x60>)
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <_sbrk+0x64>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d102      	bne.n	80003f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003ec:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <_sbrk+0x64>)
 80003ee:	4a12      	ldr	r2, [pc, #72]	@ (8000438 <_sbrk+0x68>)
 80003f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003f2:	4b10      	ldr	r3, [pc, #64]	@ (8000434 <_sbrk+0x64>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4413      	add	r3, r2
 80003fa:	693a      	ldr	r2, [r7, #16]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d207      	bcs.n	8000410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000400:	f000 fd88 	bl	8000f14 <__errno>
 8000404:	4603      	mov	r3, r0
 8000406:	220c      	movs	r2, #12
 8000408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
 800040e:	e009      	b.n	8000424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000410:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <_sbrk+0x64>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000416:	4b07      	ldr	r3, [pc, #28]	@ (8000434 <_sbrk+0x64>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	4a05      	ldr	r2, [pc, #20]	@ (8000434 <_sbrk+0x64>)
 8000420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000422:	68fb      	ldr	r3, [r7, #12]
}
 8000424:	4618      	mov	r0, r3
 8000426:	3718      	adds	r7, #24
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20080000 	.word	0x20080000
 8000430:	00000400 	.word	0x00000400
 8000434:	20000078 	.word	0x20000078
 8000438:	200001c8 	.word	0x200001c8

0800043c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800043c:	480d      	ldr	r0, [pc, #52]	@ (8000474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000440:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000444:	480c      	ldr	r0, [pc, #48]	@ (8000478 <LoopForever+0x6>)
  ldr r1, =_edata
 8000446:	490d      	ldr	r1, [pc, #52]	@ (800047c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000448:	4a0d      	ldr	r2, [pc, #52]	@ (8000480 <LoopForever+0xe>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800044c:	e002      	b.n	8000454 <LoopCopyDataInit>

0800044e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000452:	3304      	adds	r3, #4

08000454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000458:	d3f9      	bcc.n	800044e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045a:	4a0a      	ldr	r2, [pc, #40]	@ (8000484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800045c:	4c0a      	ldr	r4, [pc, #40]	@ (8000488 <LoopForever+0x16>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000460:	e001      	b.n	8000466 <LoopFillZerobss>

08000462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000464:	3204      	adds	r2, #4

08000466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000468:	d3fb      	bcc.n	8000462 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800046a:	f000 fd59 	bl	8000f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046e:	f7ff fef9 	bl	8000264 <main>

08000472 <LoopForever>:

LoopForever:
  b LoopForever
 8000472:	e7fe      	b.n	8000472 <LoopForever>
  ldr   r0, =_estack
 8000474:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800047c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000480:	08001408 	.word	0x08001408
  ldr r2, =_sbss
 8000484:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000488:	200001c8 	.word	0x200001c8

0800048c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800048c:	e7fe      	b.n	800048c <ADC_IRQHandler>
	...

08000490 <GPIO_PeriClkControl>:


#include "stm32f767xx_gpio_driver.h"

void GPIO_PeriClkControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	460b      	mov	r3, r1
 800049a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 800049c:	78fb      	ldrb	r3, [r7, #3]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d178      	bne.n	8000594 <GPIO_PeriClkControl+0x104>
	{
		if (pGPIOx == GPIOA)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a7a      	ldr	r2, [pc, #488]	@ (8000690 <GPIO_PeriClkControl+0x200>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PeriClkControl+0x28>
		{
			GPIOA_PCLK_EN();
 80004aa:	4b7a      	ldr	r3, [pc, #488]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ae:	4a79      	ldr	r2, [pc, #484]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6313      	str	r3, [r2, #48]	@ 0x30
		else
		{
			// Do nothing
		}
	}
}
 80004b6:	e0e5      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOB)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a77      	ldr	r2, [pc, #476]	@ (8000698 <GPIO_PeriClkControl+0x208>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d106      	bne.n	80004ce <GPIO_PeriClkControl+0x3e>
			GPIOB_PCLK_EN();
 80004c0:	4b74      	ldr	r3, [pc, #464]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c4:	4a73      	ldr	r2, [pc, #460]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80004c6:	f043 0302 	orr.w	r3, r3, #2
 80004ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004cc:	e0da      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOC)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a72      	ldr	r2, [pc, #456]	@ (800069c <GPIO_PeriClkControl+0x20c>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PeriClkControl+0x54>
			GPIOC_PCLK_EN();
 80004d6:	4b6f      	ldr	r3, [pc, #444]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004da:	4a6e      	ldr	r2, [pc, #440]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004e2:	e0cf      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOD)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a6e      	ldr	r2, [pc, #440]	@ (80006a0 <GPIO_PeriClkControl+0x210>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_PeriClkControl+0x6a>
			GPIOD_PCLK_EN();
 80004ec:	4b69      	ldr	r3, [pc, #420]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f0:	4a68      	ldr	r2, [pc, #416]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80004f2:	f043 0308 	orr.w	r3, r3, #8
 80004f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f8:	e0c4      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOE)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a69      	ldr	r2, [pc, #420]	@ (80006a4 <GPIO_PeriClkControl+0x214>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <GPIO_PeriClkControl+0x80>
			GPIOE_PCLK_EN();
 8000502:	4b64      	ldr	r3, [pc, #400]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	4a63      	ldr	r2, [pc, #396]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000508:	f043 0310 	orr.w	r3, r3, #16
 800050c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050e:	e0b9      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOF)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a65      	ldr	r2, [pc, #404]	@ (80006a8 <GPIO_PeriClkControl+0x218>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d106      	bne.n	8000526 <GPIO_PeriClkControl+0x96>
			GPIOF_PCLK_EN();
 8000518:	4b5e      	ldr	r3, [pc, #376]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051c:	4a5d      	ldr	r2, [pc, #372]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 800051e:	f043 0320 	orr.w	r3, r3, #32
 8000522:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000524:	e0ae      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOG)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a60      	ldr	r2, [pc, #384]	@ (80006ac <GPIO_PeriClkControl+0x21c>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d106      	bne.n	800053c <GPIO_PeriClkControl+0xac>
			GPIOG_PCLK_EN();
 800052e:	4b59      	ldr	r3, [pc, #356]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a58      	ldr	r2, [pc, #352]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800053a:	e0a3      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOH)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a5c      	ldr	r2, [pc, #368]	@ (80006b0 <GPIO_PeriClkControl+0x220>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d106      	bne.n	8000552 <GPIO_PeriClkControl+0xc2>
			GPIOH_PCLK_EN();
 8000544:	4b53      	ldr	r3, [pc, #332]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000548:	4a52      	ldr	r2, [pc, #328]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 800054a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800054e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000550:	e098      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOI)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a57      	ldr	r2, [pc, #348]	@ (80006b4 <GPIO_PeriClkControl+0x224>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <GPIO_PeriClkControl+0xd8>
			GPIOI_PCLK_EN();
 800055a:	4b4e      	ldr	r3, [pc, #312]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a4d      	ldr	r2, [pc, #308]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000566:	e08d      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOJ)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a53      	ldr	r2, [pc, #332]	@ (80006b8 <GPIO_PeriClkControl+0x228>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d106      	bne.n	800057e <GPIO_PeriClkControl+0xee>
			GPIOJ_PCLK_EN();
 8000570:	4b48      	ldr	r3, [pc, #288]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000574:	4a47      	ldr	r2, [pc, #284]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800057a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800057c:	e082      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOK)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a4e      	ldr	r2, [pc, #312]	@ (80006bc <GPIO_PeriClkControl+0x22c>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d17e      	bne.n	8000684 <GPIO_PeriClkControl+0x1f4>
			GPIOK_PCLK_EN();
 8000586:	4b43      	ldr	r3, [pc, #268]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a42      	ldr	r2, [pc, #264]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 800058c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000592:	e077      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		if (pGPIOx == GPIOA)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a3e      	ldr	r2, [pc, #248]	@ (8000690 <GPIO_PeriClkControl+0x200>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d106      	bne.n	80005aa <GPIO_PeriClkControl+0x11a>
			GPIOA_PCLK_DI();
 800059c:	4b3d      	ldr	r3, [pc, #244]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a0:	4a3c      	ldr	r2, [pc, #240]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80005a2:	f023 0301 	bic.w	r3, r3, #1
 80005a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005a8:	e06c      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOB)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a3a      	ldr	r2, [pc, #232]	@ (8000698 <GPIO_PeriClkControl+0x208>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d106      	bne.n	80005c0 <GPIO_PeriClkControl+0x130>
			GPIOB_PCLK_DI();
 80005b2:	4b38      	ldr	r3, [pc, #224]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a37      	ldr	r2, [pc, #220]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80005b8:	f023 0302 	bic.w	r3, r3, #2
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005be:	e061      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOC)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a36      	ldr	r2, [pc, #216]	@ (800069c <GPIO_PeriClkControl+0x20c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d106      	bne.n	80005d6 <GPIO_PeriClkControl+0x146>
			GPIOC_PCLK_DI();
 80005c8:	4b32      	ldr	r3, [pc, #200]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005cc:	4a31      	ldr	r2, [pc, #196]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80005ce:	f023 0304 	bic.w	r3, r3, #4
 80005d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005d4:	e056      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOD)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a31      	ldr	r2, [pc, #196]	@ (80006a0 <GPIO_PeriClkControl+0x210>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d106      	bne.n	80005ec <GPIO_PeriClkControl+0x15c>
			GPIOD_PCLK_DI();
 80005de:	4b2d      	ldr	r3, [pc, #180]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80005e4:	f023 0308 	bic.w	r3, r3, #8
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005ea:	e04b      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOE)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a2d      	ldr	r2, [pc, #180]	@ (80006a4 <GPIO_PeriClkControl+0x214>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <GPIO_PeriClkControl+0x172>
			GPIOE_PCLK_DI();
 80005f4:	4b27      	ldr	r3, [pc, #156]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f8:	4a26      	ldr	r2, [pc, #152]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 80005fa:	f023 0310 	bic.w	r3, r3, #16
 80005fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000600:	e040      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOF)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a28      	ldr	r2, [pc, #160]	@ (80006a8 <GPIO_PeriClkControl+0x218>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <GPIO_PeriClkControl+0x188>
			GPIOF_PCLK_DI();
 800060a:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000610:	f023 0320 	bic.w	r3, r3, #32
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000616:	e035      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOG)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a24      	ldr	r2, [pc, #144]	@ (80006ac <GPIO_PeriClkControl+0x21c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <GPIO_PeriClkControl+0x19e>
			GPIOG_PCLK_DI();
 8000620:	4b1c      	ldr	r3, [pc, #112]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	4a1b      	ldr	r2, [pc, #108]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000626:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800062a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800062c:	e02a      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOH)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a1f      	ldr	r2, [pc, #124]	@ (80006b0 <GPIO_PeriClkControl+0x220>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <GPIO_PeriClkControl+0x1b4>
			GPIOH_PCLK_DI();
 8000636:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a16      	ldr	r2, [pc, #88]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 800063c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000642:	e01f      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOI)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a1b      	ldr	r2, [pc, #108]	@ (80006b4 <GPIO_PeriClkControl+0x224>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d106      	bne.n	800065a <GPIO_PeriClkControl+0x1ca>
			GPIOI_PCLK_DI();
 800064c:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000650:	4a10      	ldr	r2, [pc, #64]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000652:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000656:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000658:	e014      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOJ)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a16      	ldr	r2, [pc, #88]	@ (80006b8 <GPIO_PeriClkControl+0x228>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <GPIO_PeriClkControl+0x1e0>
			GPIOJ_PCLK_DI();
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a0b      	ldr	r2, [pc, #44]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 8000668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800066e:	e009      	b.n	8000684 <GPIO_PeriClkControl+0x1f4>
		else if (pGPIOx == GPIOK)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a12      	ldr	r2, [pc, #72]	@ (80006bc <GPIO_PeriClkControl+0x22c>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d105      	bne.n	8000684 <GPIO_PeriClkControl+0x1f4>
			GPIOK_PCLK_DI();
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	4a05      	ldr	r2, [pc, #20]	@ (8000694 <GPIO_PeriClkControl+0x204>)
 800067e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000682:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40020000 	.word	0x40020000
 8000694:	40023800 	.word	0x40023800
 8000698:	40020400 	.word	0x40020400
 800069c:	40020800 	.word	0x40020800
 80006a0:	40020c00 	.word	0x40020c00
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40021400 	.word	0x40021400
 80006ac:	40021800 	.word	0x40021800
 80006b0:	40021c00 	.word	0x40021c00
 80006b4:	40022000 	.word	0x40022000
 80006b8:	40022400 	.word	0x40022400
 80006bc:	40022800 	.word	0x40022800

080006c0 <GPIO_Init>:
		SYSCFG_PCLK_DI();
	}
}

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b087      	sub	sp, #28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; //temporary register
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]

	//1. Configure the mode of GPIO pin

	if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	795b      	ldrb	r3, [r3, #5]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d820      	bhi.n	8000716 <GPIO_Init+0x56>
	{
		// Non interrupt mode
		temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	795b      	ldrb	r3, [r3, #5]
 80006d8:	461a      	mov	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2* pGPIOHandle->GPIOPinConfig.GPIO_PinNumber)); // Clearing the required bits to avoid manipulation while setting them below.
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	2103      	movs	r1, #3
 80006f4:	fa01 f303 	lsl.w	r3, r1, r3
 80006f8:	43db      	mvns	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	400a      	ands	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6819      	ldr	r1, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	430a      	orrs	r2, r1
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	e0ec      	b.n	80008f0 <GPIO_Init+0x230>

	else
	{
		// Whenever the Pin is in Interupt mode, it requires some input, hence the pin set to input mode .

		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2* pGPIOHandle->GPIOPinConfig.GPIO_PinNumber));
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	2103      	movs	r1, #3
 8000724:	fa01 f303 	lsl.w	r3, r1, r3
 8000728:	43db      	mvns	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	400a      	ands	r2, r1
 8000732:	601a      	str	r2, [r3, #0]

		// Non interrupt mode
		if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	795b      	ldrb	r3, [r3, #5]
 8000738:	2b04      	cmp	r3, #4
 800073a:	d117      	bne.n	800076c <GPIO_Init+0xac>
		{
			// Configure the FTSR

			EXTI->EXTI_FTSR |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 800073c:	4b51      	ldr	r3, [pc, #324]	@ (8000884 <GPIO_Init+0x1c4>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	7912      	ldrb	r2, [r2, #4]
 8000744:	4611      	mov	r1, r2
 8000746:	2201      	movs	r2, #1
 8000748:	408a      	lsls	r2, r1
 800074a:	4611      	mov	r1, r2
 800074c:	4a4d      	ldr	r2, [pc, #308]	@ (8000884 <GPIO_Init+0x1c4>)
 800074e:	430b      	orrs	r3, r1
 8000750:	60d3      	str	r3, [r2, #12]

			// clear RTSR to be sure
			EXTI->EXTI_RTSR &= ~( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 8000752:	4b4c      	ldr	r3, [pc, #304]	@ (8000884 <GPIO_Init+0x1c4>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	7912      	ldrb	r2, [r2, #4]
 800075a:	4611      	mov	r1, r2
 800075c:	2201      	movs	r2, #1
 800075e:	408a      	lsls	r2, r1
 8000760:	43d2      	mvns	r2, r2
 8000762:	4611      	mov	r1, r2
 8000764:	4a47      	ldr	r2, [pc, #284]	@ (8000884 <GPIO_Init+0x1c4>)
 8000766:	400b      	ands	r3, r1
 8000768:	6093      	str	r3, [r2, #8]
 800076a:	e035      	b.n	80007d8 <GPIO_Init+0x118>
		}
		else if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	795b      	ldrb	r3, [r3, #5]
 8000770:	2b05      	cmp	r3, #5
 8000772:	d117      	bne.n	80007a4 <GPIO_Init+0xe4>
		{
			// Configure the RTSR
			EXTI->EXTI_RTSR |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 8000774:	4b43      	ldr	r3, [pc, #268]	@ (8000884 <GPIO_Init+0x1c4>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	7912      	ldrb	r2, [r2, #4]
 800077c:	4611      	mov	r1, r2
 800077e:	2201      	movs	r2, #1
 8000780:	408a      	lsls	r2, r1
 8000782:	4611      	mov	r1, r2
 8000784:	4a3f      	ldr	r2, [pc, #252]	@ (8000884 <GPIO_Init+0x1c4>)
 8000786:	430b      	orrs	r3, r1
 8000788:	6093      	str	r3, [r2, #8]

			// clear FTSR to be sure
			EXTI->EXTI_FTSR &= ~( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 800078a:	4b3e      	ldr	r3, [pc, #248]	@ (8000884 <GPIO_Init+0x1c4>)
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	7912      	ldrb	r2, [r2, #4]
 8000792:	4611      	mov	r1, r2
 8000794:	2201      	movs	r2, #1
 8000796:	408a      	lsls	r2, r1
 8000798:	43d2      	mvns	r2, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a39      	ldr	r2, [pc, #228]	@ (8000884 <GPIO_Init+0x1c4>)
 800079e:	400b      	ands	r3, r1
 80007a0:	60d3      	str	r3, [r2, #12]
 80007a2:	e019      	b.n	80007d8 <GPIO_Init+0x118>
		}
		else if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	795b      	ldrb	r3, [r3, #5]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d115      	bne.n	80007d8 <GPIO_Init+0x118>
		{
			// Configure both FTSR and RTSR
			EXTI->EXTI_FTSR |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 80007ac:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <GPIO_Init+0x1c4>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7912      	ldrb	r2, [r2, #4]
 80007b4:	4611      	mov	r1, r2
 80007b6:	2201      	movs	r2, #1
 80007b8:	408a      	lsls	r2, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a31      	ldr	r2, [pc, #196]	@ (8000884 <GPIO_Init+0x1c4>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	60d3      	str	r3, [r2, #12]

			// Set RTSR as well
			EXTI->EXTI_RTSR |= ( 1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 80007c2:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <GPIO_Init+0x1c4>)
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	7912      	ldrb	r2, [r2, #4]
 80007ca:	4611      	mov	r1, r2
 80007cc:	2201      	movs	r2, #1
 80007ce:	408a      	lsls	r2, r1
 80007d0:	4611      	mov	r1, r2
 80007d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000884 <GPIO_Init+0x1c4>)
 80007d4:	430b      	orrs	r3, r1
 80007d6:	6093      	str	r3, [r2, #8]
		}

		// COnfigure the GPIO port selection SYSCFG_EXTICR )

		uint8_t temp1 = pGPIOHandle->GPIOPinConfig.GPIO_PinNumber / 4;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	089b      	lsrs	r3, r3, #2
 80007de:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIOPinConfig.GPIO_PinNumber % 4;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	f003 0303 	and.w	r3, r3, #3
 80007e8:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle ->pGPIOx);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a26      	ldr	r2, [pc, #152]	@ (8000888 <GPIO_Init+0x1c8>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d05f      	beq.n	80008b4 <GPIO_Init+0x1f4>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a24      	ldr	r2, [pc, #144]	@ (800088c <GPIO_Init+0x1cc>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d040      	beq.n	8000880 <GPIO_Init+0x1c0>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a23      	ldr	r2, [pc, #140]	@ (8000890 <GPIO_Init+0x1d0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d039      	beq.n	800087c <GPIO_Init+0x1bc>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a21      	ldr	r2, [pc, #132]	@ (8000894 <GPIO_Init+0x1d4>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d032      	beq.n	8000878 <GPIO_Init+0x1b8>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a20      	ldr	r2, [pc, #128]	@ (8000898 <GPIO_Init+0x1d8>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d02b      	beq.n	8000874 <GPIO_Init+0x1b4>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1e      	ldr	r2, [pc, #120]	@ (800089c <GPIO_Init+0x1dc>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d024      	beq.n	8000870 <GPIO_Init+0x1b0>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1d      	ldr	r2, [pc, #116]	@ (80008a0 <GPIO_Init+0x1e0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d01d      	beq.n	800086c <GPIO_Init+0x1ac>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a1b      	ldr	r2, [pc, #108]	@ (80008a4 <GPIO_Init+0x1e4>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d016      	beq.n	8000868 <GPIO_Init+0x1a8>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1a      	ldr	r2, [pc, #104]	@ (80008a8 <GPIO_Init+0x1e8>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d00f      	beq.n	8000864 <GPIO_Init+0x1a4>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <GPIO_Init+0x1ec>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d008      	beq.n	8000860 <GPIO_Init+0x1a0>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <GPIO_Init+0x1f0>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d101      	bne.n	800085c <GPIO_Init+0x19c>
 8000858:	230a      	movs	r3, #10
 800085a:	e02c      	b.n	80008b6 <GPIO_Init+0x1f6>
 800085c:	2300      	movs	r3, #0
 800085e:	e02a      	b.n	80008b6 <GPIO_Init+0x1f6>
 8000860:	2309      	movs	r3, #9
 8000862:	e028      	b.n	80008b6 <GPIO_Init+0x1f6>
 8000864:	2308      	movs	r3, #8
 8000866:	e026      	b.n	80008b6 <GPIO_Init+0x1f6>
 8000868:	2307      	movs	r3, #7
 800086a:	e024      	b.n	80008b6 <GPIO_Init+0x1f6>
 800086c:	2306      	movs	r3, #6
 800086e:	e022      	b.n	80008b6 <GPIO_Init+0x1f6>
 8000870:	2305      	movs	r3, #5
 8000872:	e020      	b.n	80008b6 <GPIO_Init+0x1f6>
 8000874:	2304      	movs	r3, #4
 8000876:	e01e      	b.n	80008b6 <GPIO_Init+0x1f6>
 8000878:	2303      	movs	r3, #3
 800087a:	e01c      	b.n	80008b6 <GPIO_Init+0x1f6>
 800087c:	2302      	movs	r3, #2
 800087e:	e01a      	b.n	80008b6 <GPIO_Init+0x1f6>
 8000880:	2301      	movs	r3, #1
 8000882:	e018      	b.n	80008b6 <GPIO_Init+0x1f6>
 8000884:	40013c00 	.word	0x40013c00
 8000888:	40020000 	.word	0x40020000
 800088c:	40020400 	.word	0x40020400
 8000890:	40020800 	.word	0x40020800
 8000894:	40020c00 	.word	0x40020c00
 8000898:	40021000 	.word	0x40021000
 800089c:	40021400 	.word	0x40021400
 80008a0:	40021800 	.word	0x40021800
 80008a4:	40021c00 	.word	0x40021c00
 80008a8:	40022000 	.word	0x40022000
 80008ac:	40022400 	.word	0x40022400
 80008b0:	40022800 	.word	0x40022800
 80008b4:	2300      	movs	r3, #0
 80008b6:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTI_CR [temp1] |= (portcode << (4 * temp2) );
 80008b8:	4a67      	ldr	r2, [pc, #412]	@ (8000a58 <GPIO_Init+0x398>)
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	3302      	adds	r3, #2
 80008be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008c2:	7c79      	ldrb	r1, [r7, #17]
 80008c4:	7cbb      	ldrb	r3, [r7, #18]
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	fa01 f303 	lsl.w	r3, r1, r3
 80008cc:	4618      	mov	r0, r3
 80008ce:	4962      	ldr	r1, [pc, #392]	@ (8000a58 <GPIO_Init+0x398>)
 80008d0:	7cfb      	ldrb	r3, [r7, #19]
 80008d2:	4302      	orrs	r2, r0
 80008d4:	3302      	adds	r3, #2
 80008d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Enable the EXTI interupt delivery using IMR
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 80008da:	4b60      	ldr	r3, [pc, #384]	@ (8000a5c <GPIO_Init+0x39c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	7912      	ldrb	r2, [r2, #4]
 80008e2:	4611      	mov	r1, r2
 80008e4:	2201      	movs	r2, #1
 80008e6:	408a      	lsls	r2, r1
 80008e8:	4611      	mov	r1, r2
 80008ea:	4a5c      	ldr	r2, [pc, #368]	@ (8000a5c <GPIO_Init+0x39c>)
 80008ec:	430b      	orrs	r3, r1
 80008ee:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

	//2. Configure the speed of GPIO pin

	temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	799b      	ldrb	r3, [r3, #6]
 80008f8:	461a      	mov	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	791b      	ldrb	r3, [r3, #4]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber));
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	791b      	ldrb	r3, [r3, #4]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	2103      	movs	r1, #3
 8000914:	fa01 f303 	lsl.w	r3, r1, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	4619      	mov	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	400a      	ands	r2, r1
 8000922:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6899      	ldr	r1, [r3, #8]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	430a      	orrs	r2, r1
 8000932:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

	//3. Configure the pupd of GPIO pin
	temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	79db      	ldrb	r3, [r3, #7]
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIOPinConfig.GPIO_PinNumber));
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68da      	ldr	r2, [r3, #12]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	791b      	ldrb	r3, [r3, #4]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2103      	movs	r1, #3
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	4619      	mov	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	400a      	ands	r2, r1
 8000966:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68d9      	ldr	r1, [r3, #12]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	430a      	orrs	r2, r1
 8000976:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

	//4. Configure the optype of GPIO pin
	temp = (pGPIOHandle-> GPIOPinConfig.GPIO_PinOPType << (pGPIOHandle->GPIOPinConfig.GPIO_PinNumber) );
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7a1b      	ldrb	r3, [r3, #8]
 8000980:	461a      	mov	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	791b      	ldrb	r3, [r3, #4]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIOPinConfig.GPIO_PinNumber);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	791b      	ldrb	r3, [r3, #4]
 8000996:	4619      	mov	r1, r3
 8000998:	2301      	movs	r3, #1
 800099a:	408b      	lsls	r3, r1
 800099c:	43db      	mvns	r3, r3
 800099e:	4619      	mov	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	400a      	ands	r2, r1
 80009a6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6859      	ldr	r1, [r3, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	430a      	orrs	r2, r1
 80009b6:	605a      	str	r2, [r3, #4]
	temp = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

	//5. Configure the Alternate functionality of GPIO pin
	if (pGPIOHandle->GPIOPinConfig.GPIO_PinMode == GPIO_MODE_AF)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	795b      	ldrb	r3, [r3, #5]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d143      	bne.n	8000a4c <GPIO_Init+0x38c>
	{
		// if the mode if ALternate function, only then configure AF.

		uint32_t temp1 = pGPIOHandle-> GPIOPinConfig.GPIO_PinNumber % 8 ;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	60fb      	str	r3, [r7, #12]

		if (pGPIOHandle-> GPIOPinConfig.GPIO_PinNumber < 8 )
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	791b      	ldrb	r3, [r3, #4]
 80009d2:	2b07      	cmp	r3, #7
 80009d4:	d81d      	bhi.n	8000a12 <GPIO_Init+0x352>
		{
			pGPIOHandle->pGPIOx->AFRL &= ~(0xf << (4 * temp1));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6a1a      	ldr	r2, [r3, #32]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	210f      	movs	r1, #15
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	4619      	mov	r1, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	400a      	ands	r2, r1
 80009f0:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle-> GPIOPinConfig.GPIO_PinAltFuncMode << (4 * temp1));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a1a      	ldr	r2, [r3, #32]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7a5b      	ldrb	r3, [r3, #9]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	4619      	mov	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xf << (4 * temp1));
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle-> GPIOPinConfig.GPIO_PinAltFuncMode << (4 * temp1));
		}
	}

}
 8000a10:	e01c      	b.n	8000a4c <GPIO_Init+0x38c>
			pGPIOHandle->pGPIOx->AFRH &= ~(0xf << (4 * temp1));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	210f      	movs	r1, #15
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	4619      	mov	r1, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle-> GPIOPinConfig.GPIO_PinAltFuncMode << (4 * temp1));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7a5b      	ldrb	r3, [r3, #9]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a4c:	bf00      	nop
 8000a4e:	371c      	adds	r7, #28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40013800 	.word	0x40013800
 8000a5c:	40013c00 	.word	0x40013c00

08000a60 <GPIO_ToggleOutputPin>:
{

	Value = pGPIOx->ODR;
}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	78fa      	ldrb	r2, [r7, #3]
 8000a72:	2101      	movs	r1, #1
 8000a74:	fa01 f202 	lsl.w	r2, r1, r2
 8000a78:	405a      	eors	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	615a      	str	r2, [r3, #20]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <std>:
 8000a88:	2300      	movs	r3, #0
 8000a8a:	b510      	push	{r4, lr}
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8000a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a96:	6083      	str	r3, [r0, #8]
 8000a98:	8181      	strh	r1, [r0, #12]
 8000a9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8000a9c:	81c2      	strh	r2, [r0, #14]
 8000a9e:	6183      	str	r3, [r0, #24]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	305c      	adds	r0, #92	@ 0x5c
 8000aa6:	f000 f9e7 	bl	8000e78 <memset>
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <std+0x58>)
 8000aac:	6263      	str	r3, [r4, #36]	@ 0x24
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <std+0x5c>)
 8000ab0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <std+0x60>)
 8000ab4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <std+0x64>)
 8000ab8:	6323      	str	r3, [r4, #48]	@ 0x30
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <std+0x68>)
 8000abc:	6224      	str	r4, [r4, #32]
 8000abe:	429c      	cmp	r4, r3
 8000ac0:	d006      	beq.n	8000ad0 <std+0x48>
 8000ac2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000ac6:	4294      	cmp	r4, r2
 8000ac8:	d002      	beq.n	8000ad0 <std+0x48>
 8000aca:	33d0      	adds	r3, #208	@ 0xd0
 8000acc:	429c      	cmp	r4, r3
 8000ace:	d105      	bne.n	8000adc <std+0x54>
 8000ad0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ad8:	f000 ba46 	b.w	8000f68 <__retarget_lock_init_recursive>
 8000adc:	bd10      	pop	{r4, pc}
 8000ade:	bf00      	nop
 8000ae0:	08000cc9 	.word	0x08000cc9
 8000ae4:	08000ceb 	.word	0x08000ceb
 8000ae8:	08000d23 	.word	0x08000d23
 8000aec:	08000d47 	.word	0x08000d47
 8000af0:	2000007c 	.word	0x2000007c

08000af4 <stdio_exit_handler>:
 8000af4:	4a02      	ldr	r2, [pc, #8]	@ (8000b00 <stdio_exit_handler+0xc>)
 8000af6:	4903      	ldr	r1, [pc, #12]	@ (8000b04 <stdio_exit_handler+0x10>)
 8000af8:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <stdio_exit_handler+0x14>)
 8000afa:	f000 b869 	b.w	8000bd0 <_fwalk_sglue>
 8000afe:	bf00      	nop
 8000b00:	20000000 	.word	0x20000000
 8000b04:	08001261 	.word	0x08001261
 8000b08:	20000010 	.word	0x20000010

08000b0c <cleanup_stdio>:
 8000b0c:	6841      	ldr	r1, [r0, #4]
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <cleanup_stdio+0x34>)
 8000b10:	4299      	cmp	r1, r3
 8000b12:	b510      	push	{r4, lr}
 8000b14:	4604      	mov	r4, r0
 8000b16:	d001      	beq.n	8000b1c <cleanup_stdio+0x10>
 8000b18:	f000 fba2 	bl	8001260 <_fflush_r>
 8000b1c:	68a1      	ldr	r1, [r4, #8]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <cleanup_stdio+0x38>)
 8000b20:	4299      	cmp	r1, r3
 8000b22:	d002      	beq.n	8000b2a <cleanup_stdio+0x1e>
 8000b24:	4620      	mov	r0, r4
 8000b26:	f000 fb9b 	bl	8001260 <_fflush_r>
 8000b2a:	68e1      	ldr	r1, [r4, #12]
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <cleanup_stdio+0x3c>)
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	d004      	beq.n	8000b3c <cleanup_stdio+0x30>
 8000b32:	4620      	mov	r0, r4
 8000b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b38:	f000 bb92 	b.w	8001260 <_fflush_r>
 8000b3c:	bd10      	pop	{r4, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000007c 	.word	0x2000007c
 8000b44:	200000e4 	.word	0x200000e4
 8000b48:	2000014c 	.word	0x2000014c

08000b4c <global_stdio_init.part.0>:
 8000b4c:	b510      	push	{r4, lr}
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <global_stdio_init.part.0+0x30>)
 8000b50:	4c0b      	ldr	r4, [pc, #44]	@ (8000b80 <global_stdio_init.part.0+0x34>)
 8000b52:	4a0c      	ldr	r2, [pc, #48]	@ (8000b84 <global_stdio_init.part.0+0x38>)
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	4620      	mov	r0, r4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	f7ff ff94 	bl	8000a88 <std>
 8000b60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000b64:	2201      	movs	r2, #1
 8000b66:	2109      	movs	r1, #9
 8000b68:	f7ff ff8e 	bl	8000a88 <std>
 8000b6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000b70:	2202      	movs	r2, #2
 8000b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b76:	2112      	movs	r1, #18
 8000b78:	f7ff bf86 	b.w	8000a88 <std>
 8000b7c:	200001b4 	.word	0x200001b4
 8000b80:	2000007c 	.word	0x2000007c
 8000b84:	08000af5 	.word	0x08000af5

08000b88 <__sfp_lock_acquire>:
 8000b88:	4801      	ldr	r0, [pc, #4]	@ (8000b90 <__sfp_lock_acquire+0x8>)
 8000b8a:	f000 b9ee 	b.w	8000f6a <__retarget_lock_acquire_recursive>
 8000b8e:	bf00      	nop
 8000b90:	200001bd 	.word	0x200001bd

08000b94 <__sfp_lock_release>:
 8000b94:	4801      	ldr	r0, [pc, #4]	@ (8000b9c <__sfp_lock_release+0x8>)
 8000b96:	f000 b9e9 	b.w	8000f6c <__retarget_lock_release_recursive>
 8000b9a:	bf00      	nop
 8000b9c:	200001bd 	.word	0x200001bd

08000ba0 <__sinit>:
 8000ba0:	b510      	push	{r4, lr}
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	f7ff fff0 	bl	8000b88 <__sfp_lock_acquire>
 8000ba8:	6a23      	ldr	r3, [r4, #32]
 8000baa:	b11b      	cbz	r3, 8000bb4 <__sinit+0x14>
 8000bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bb0:	f7ff bff0 	b.w	8000b94 <__sfp_lock_release>
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <__sinit+0x28>)
 8000bb6:	6223      	str	r3, [r4, #32]
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <__sinit+0x2c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f5      	bne.n	8000bac <__sinit+0xc>
 8000bc0:	f7ff ffc4 	bl	8000b4c <global_stdio_init.part.0>
 8000bc4:	e7f2      	b.n	8000bac <__sinit+0xc>
 8000bc6:	bf00      	nop
 8000bc8:	08000b0d 	.word	0x08000b0d
 8000bcc:	200001b4 	.word	0x200001b4

08000bd0 <_fwalk_sglue>:
 8000bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bd4:	4607      	mov	r7, r0
 8000bd6:	4688      	mov	r8, r1
 8000bd8:	4614      	mov	r4, r2
 8000bda:	2600      	movs	r6, #0
 8000bdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000be0:	f1b9 0901 	subs.w	r9, r9, #1
 8000be4:	d505      	bpl.n	8000bf2 <_fwalk_sglue+0x22>
 8000be6:	6824      	ldr	r4, [r4, #0]
 8000be8:	2c00      	cmp	r4, #0
 8000bea:	d1f7      	bne.n	8000bdc <_fwalk_sglue+0xc>
 8000bec:	4630      	mov	r0, r6
 8000bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bf2:	89ab      	ldrh	r3, [r5, #12]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d907      	bls.n	8000c08 <_fwalk_sglue+0x38>
 8000bf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	d003      	beq.n	8000c08 <_fwalk_sglue+0x38>
 8000c00:	4629      	mov	r1, r5
 8000c02:	4638      	mov	r0, r7
 8000c04:	47c0      	blx	r8
 8000c06:	4306      	orrs	r6, r0
 8000c08:	3568      	adds	r5, #104	@ 0x68
 8000c0a:	e7e9      	b.n	8000be0 <_fwalk_sglue+0x10>

08000c0c <_puts_r>:
 8000c0c:	6a03      	ldr	r3, [r0, #32]
 8000c0e:	b570      	push	{r4, r5, r6, lr}
 8000c10:	6884      	ldr	r4, [r0, #8]
 8000c12:	4605      	mov	r5, r0
 8000c14:	460e      	mov	r6, r1
 8000c16:	b90b      	cbnz	r3, 8000c1c <_puts_r+0x10>
 8000c18:	f7ff ffc2 	bl	8000ba0 <__sinit>
 8000c1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c1e:	07db      	lsls	r3, r3, #31
 8000c20:	d405      	bmi.n	8000c2e <_puts_r+0x22>
 8000c22:	89a3      	ldrh	r3, [r4, #12]
 8000c24:	0598      	lsls	r0, r3, #22
 8000c26:	d402      	bmi.n	8000c2e <_puts_r+0x22>
 8000c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c2a:	f000 f99e 	bl	8000f6a <__retarget_lock_acquire_recursive>
 8000c2e:	89a3      	ldrh	r3, [r4, #12]
 8000c30:	0719      	lsls	r1, r3, #28
 8000c32:	d502      	bpl.n	8000c3a <_puts_r+0x2e>
 8000c34:	6923      	ldr	r3, [r4, #16]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d135      	bne.n	8000ca6 <_puts_r+0x9a>
 8000c3a:	4621      	mov	r1, r4
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	f000 f8c5 	bl	8000dcc <__swsetup_r>
 8000c42:	b380      	cbz	r0, 8000ca6 <_puts_r+0x9a>
 8000c44:	f04f 35ff 	mov.w	r5, #4294967295
 8000c48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c4a:	07da      	lsls	r2, r3, #31
 8000c4c:	d405      	bmi.n	8000c5a <_puts_r+0x4e>
 8000c4e:	89a3      	ldrh	r3, [r4, #12]
 8000c50:	059b      	lsls	r3, r3, #22
 8000c52:	d402      	bmi.n	8000c5a <_puts_r+0x4e>
 8000c54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c56:	f000 f989 	bl	8000f6c <__retarget_lock_release_recursive>
 8000c5a:	4628      	mov	r0, r5
 8000c5c:	bd70      	pop	{r4, r5, r6, pc}
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	da04      	bge.n	8000c6c <_puts_r+0x60>
 8000c62:	69a2      	ldr	r2, [r4, #24]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dc17      	bgt.n	8000c98 <_puts_r+0x8c>
 8000c68:	290a      	cmp	r1, #10
 8000c6a:	d015      	beq.n	8000c98 <_puts_r+0x8c>
 8000c6c:	6823      	ldr	r3, [r4, #0]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	6022      	str	r2, [r4, #0]
 8000c72:	7019      	strb	r1, [r3, #0]
 8000c74:	68a3      	ldr	r3, [r4, #8]
 8000c76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	60a3      	str	r3, [r4, #8]
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d1ed      	bne.n	8000c5e <_puts_r+0x52>
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	da11      	bge.n	8000caa <_puts_r+0x9e>
 8000c86:	4622      	mov	r2, r4
 8000c88:	210a      	movs	r1, #10
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	f000 f85f 	bl	8000d4e <__swbuf_r>
 8000c90:	3001      	adds	r0, #1
 8000c92:	d0d7      	beq.n	8000c44 <_puts_r+0x38>
 8000c94:	250a      	movs	r5, #10
 8000c96:	e7d7      	b.n	8000c48 <_puts_r+0x3c>
 8000c98:	4622      	mov	r2, r4
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	f000 f857 	bl	8000d4e <__swbuf_r>
 8000ca0:	3001      	adds	r0, #1
 8000ca2:	d1e7      	bne.n	8000c74 <_puts_r+0x68>
 8000ca4:	e7ce      	b.n	8000c44 <_puts_r+0x38>
 8000ca6:	3e01      	subs	r6, #1
 8000ca8:	e7e4      	b.n	8000c74 <_puts_r+0x68>
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	1c5a      	adds	r2, r3, #1
 8000cae:	6022      	str	r2, [r4, #0]
 8000cb0:	220a      	movs	r2, #10
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	e7ee      	b.n	8000c94 <_puts_r+0x88>
	...

08000cb8 <puts>:
 8000cb8:	4b02      	ldr	r3, [pc, #8]	@ (8000cc4 <puts+0xc>)
 8000cba:	4601      	mov	r1, r0
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	f7ff bfa5 	b.w	8000c0c <_puts_r>
 8000cc2:	bf00      	nop
 8000cc4:	2000000c 	.word	0x2000000c

08000cc8 <__sread>:
 8000cc8:	b510      	push	{r4, lr}
 8000cca:	460c      	mov	r4, r1
 8000ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cd0:	f000 f8fc 	bl	8000ecc <_read_r>
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	bfab      	itete	ge
 8000cd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000cda:	89a3      	ldrhlt	r3, [r4, #12]
 8000cdc:	181b      	addge	r3, r3, r0
 8000cde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000ce2:	bfac      	ite	ge
 8000ce4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000ce6:	81a3      	strhlt	r3, [r4, #12]
 8000ce8:	bd10      	pop	{r4, pc}

08000cea <__swrite>:
 8000cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cee:	461f      	mov	r7, r3
 8000cf0:	898b      	ldrh	r3, [r1, #12]
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	4605      	mov	r5, r0
 8000cf6:	460c      	mov	r4, r1
 8000cf8:	4616      	mov	r6, r2
 8000cfa:	d505      	bpl.n	8000d08 <__swrite+0x1e>
 8000cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d00:	2302      	movs	r3, #2
 8000d02:	2200      	movs	r2, #0
 8000d04:	f000 f8d0 	bl	8000ea8 <_lseek_r>
 8000d08:	89a3      	ldrh	r3, [r4, #12]
 8000d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d12:	81a3      	strh	r3, [r4, #12]
 8000d14:	4632      	mov	r2, r6
 8000d16:	463b      	mov	r3, r7
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d1e:	f000 b8e7 	b.w	8000ef0 <_write_r>

08000d22 <__sseek>:
 8000d22:	b510      	push	{r4, lr}
 8000d24:	460c      	mov	r4, r1
 8000d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d2a:	f000 f8bd 	bl	8000ea8 <_lseek_r>
 8000d2e:	1c43      	adds	r3, r0, #1
 8000d30:	89a3      	ldrh	r3, [r4, #12]
 8000d32:	bf15      	itete	ne
 8000d34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000d36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000d3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000d3e:	81a3      	strheq	r3, [r4, #12]
 8000d40:	bf18      	it	ne
 8000d42:	81a3      	strhne	r3, [r4, #12]
 8000d44:	bd10      	pop	{r4, pc}

08000d46 <__sclose>:
 8000d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d4a:	f000 b89d 	b.w	8000e88 <_close_r>

08000d4e <__swbuf_r>:
 8000d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d50:	460e      	mov	r6, r1
 8000d52:	4614      	mov	r4, r2
 8000d54:	4605      	mov	r5, r0
 8000d56:	b118      	cbz	r0, 8000d60 <__swbuf_r+0x12>
 8000d58:	6a03      	ldr	r3, [r0, #32]
 8000d5a:	b90b      	cbnz	r3, 8000d60 <__swbuf_r+0x12>
 8000d5c:	f7ff ff20 	bl	8000ba0 <__sinit>
 8000d60:	69a3      	ldr	r3, [r4, #24]
 8000d62:	60a3      	str	r3, [r4, #8]
 8000d64:	89a3      	ldrh	r3, [r4, #12]
 8000d66:	071a      	lsls	r2, r3, #28
 8000d68:	d501      	bpl.n	8000d6e <__swbuf_r+0x20>
 8000d6a:	6923      	ldr	r3, [r4, #16]
 8000d6c:	b943      	cbnz	r3, 8000d80 <__swbuf_r+0x32>
 8000d6e:	4621      	mov	r1, r4
 8000d70:	4628      	mov	r0, r5
 8000d72:	f000 f82b 	bl	8000dcc <__swsetup_r>
 8000d76:	b118      	cbz	r0, 8000d80 <__swbuf_r+0x32>
 8000d78:	f04f 37ff 	mov.w	r7, #4294967295
 8000d7c:	4638      	mov	r0, r7
 8000d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	6922      	ldr	r2, [r4, #16]
 8000d84:	1a98      	subs	r0, r3, r2
 8000d86:	6963      	ldr	r3, [r4, #20]
 8000d88:	b2f6      	uxtb	r6, r6
 8000d8a:	4283      	cmp	r3, r0
 8000d8c:	4637      	mov	r7, r6
 8000d8e:	dc05      	bgt.n	8000d9c <__swbuf_r+0x4e>
 8000d90:	4621      	mov	r1, r4
 8000d92:	4628      	mov	r0, r5
 8000d94:	f000 fa64 	bl	8001260 <_fflush_r>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d1ed      	bne.n	8000d78 <__swbuf_r+0x2a>
 8000d9c:	68a3      	ldr	r3, [r4, #8]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	60a3      	str	r3, [r4, #8]
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	6022      	str	r2, [r4, #0]
 8000da8:	701e      	strb	r6, [r3, #0]
 8000daa:	6962      	ldr	r2, [r4, #20]
 8000dac:	1c43      	adds	r3, r0, #1
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d004      	beq.n	8000dbc <__swbuf_r+0x6e>
 8000db2:	89a3      	ldrh	r3, [r4, #12]
 8000db4:	07db      	lsls	r3, r3, #31
 8000db6:	d5e1      	bpl.n	8000d7c <__swbuf_r+0x2e>
 8000db8:	2e0a      	cmp	r6, #10
 8000dba:	d1df      	bne.n	8000d7c <__swbuf_r+0x2e>
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	f000 fa4e 	bl	8001260 <_fflush_r>
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d0d9      	beq.n	8000d7c <__swbuf_r+0x2e>
 8000dc8:	e7d6      	b.n	8000d78 <__swbuf_r+0x2a>
	...

08000dcc <__swsetup_r>:
 8000dcc:	b538      	push	{r3, r4, r5, lr}
 8000dce:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <__swsetup_r+0xa8>)
 8000dd0:	4605      	mov	r5, r0
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	460c      	mov	r4, r1
 8000dd6:	b118      	cbz	r0, 8000de0 <__swsetup_r+0x14>
 8000dd8:	6a03      	ldr	r3, [r0, #32]
 8000dda:	b90b      	cbnz	r3, 8000de0 <__swsetup_r+0x14>
 8000ddc:	f7ff fee0 	bl	8000ba0 <__sinit>
 8000de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000de4:	0719      	lsls	r1, r3, #28
 8000de6:	d422      	bmi.n	8000e2e <__swsetup_r+0x62>
 8000de8:	06da      	lsls	r2, r3, #27
 8000dea:	d407      	bmi.n	8000dfc <__swsetup_r+0x30>
 8000dec:	2209      	movs	r2, #9
 8000dee:	602a      	str	r2, [r5, #0]
 8000df0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df4:	81a3      	strh	r3, [r4, #12]
 8000df6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfa:	e033      	b.n	8000e64 <__swsetup_r+0x98>
 8000dfc:	0758      	lsls	r0, r3, #29
 8000dfe:	d512      	bpl.n	8000e26 <__swsetup_r+0x5a>
 8000e00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e02:	b141      	cbz	r1, 8000e16 <__swsetup_r+0x4a>
 8000e04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d002      	beq.n	8000e12 <__swsetup_r+0x46>
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	f000 f8af 	bl	8000f70 <_free_r>
 8000e12:	2300      	movs	r3, #0
 8000e14:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e16:	89a3      	ldrh	r3, [r4, #12]
 8000e18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000e1c:	81a3      	strh	r3, [r4, #12]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	6063      	str	r3, [r4, #4]
 8000e22:	6923      	ldr	r3, [r4, #16]
 8000e24:	6023      	str	r3, [r4, #0]
 8000e26:	89a3      	ldrh	r3, [r4, #12]
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	81a3      	strh	r3, [r4, #12]
 8000e2e:	6923      	ldr	r3, [r4, #16]
 8000e30:	b94b      	cbnz	r3, 8000e46 <__swsetup_r+0x7a>
 8000e32:	89a3      	ldrh	r3, [r4, #12]
 8000e34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e3c:	d003      	beq.n	8000e46 <__swsetup_r+0x7a>
 8000e3e:	4621      	mov	r1, r4
 8000e40:	4628      	mov	r0, r5
 8000e42:	f000 fa5b 	bl	80012fc <__smakebuf_r>
 8000e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e4a:	f013 0201 	ands.w	r2, r3, #1
 8000e4e:	d00a      	beq.n	8000e66 <__swsetup_r+0x9a>
 8000e50:	2200      	movs	r2, #0
 8000e52:	60a2      	str	r2, [r4, #8]
 8000e54:	6962      	ldr	r2, [r4, #20]
 8000e56:	4252      	negs	r2, r2
 8000e58:	61a2      	str	r2, [r4, #24]
 8000e5a:	6922      	ldr	r2, [r4, #16]
 8000e5c:	b942      	cbnz	r2, 8000e70 <__swsetup_r+0xa4>
 8000e5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000e62:	d1c5      	bne.n	8000df0 <__swsetup_r+0x24>
 8000e64:	bd38      	pop	{r3, r4, r5, pc}
 8000e66:	0799      	lsls	r1, r3, #30
 8000e68:	bf58      	it	pl
 8000e6a:	6962      	ldrpl	r2, [r4, #20]
 8000e6c:	60a2      	str	r2, [r4, #8]
 8000e6e:	e7f4      	b.n	8000e5a <__swsetup_r+0x8e>
 8000e70:	2000      	movs	r0, #0
 8000e72:	e7f7      	b.n	8000e64 <__swsetup_r+0x98>
 8000e74:	2000000c 	.word	0x2000000c

08000e78 <memset>:
 8000e78:	4402      	add	r2, r0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d100      	bne.n	8000e82 <memset+0xa>
 8000e80:	4770      	bx	lr
 8000e82:	f803 1b01 	strb.w	r1, [r3], #1
 8000e86:	e7f9      	b.n	8000e7c <memset+0x4>

08000e88 <_close_r>:
 8000e88:	b538      	push	{r3, r4, r5, lr}
 8000e8a:	4d06      	ldr	r5, [pc, #24]	@ (8000ea4 <_close_r+0x1c>)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	4604      	mov	r4, r0
 8000e90:	4608      	mov	r0, r1
 8000e92:	602b      	str	r3, [r5, #0]
 8000e94:	f7ff fa6b 	bl	800036e <_close>
 8000e98:	1c43      	adds	r3, r0, #1
 8000e9a:	d102      	bne.n	8000ea2 <_close_r+0x1a>
 8000e9c:	682b      	ldr	r3, [r5, #0]
 8000e9e:	b103      	cbz	r3, 8000ea2 <_close_r+0x1a>
 8000ea0:	6023      	str	r3, [r4, #0]
 8000ea2:	bd38      	pop	{r3, r4, r5, pc}
 8000ea4:	200001b8 	.word	0x200001b8

08000ea8 <_lseek_r>:
 8000ea8:	b538      	push	{r3, r4, r5, lr}
 8000eaa:	4d07      	ldr	r5, [pc, #28]	@ (8000ec8 <_lseek_r+0x20>)
 8000eac:	4604      	mov	r4, r0
 8000eae:	4608      	mov	r0, r1
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	602a      	str	r2, [r5, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	f7ff fa7d 	bl	80003b6 <_lseek>
 8000ebc:	1c43      	adds	r3, r0, #1
 8000ebe:	d102      	bne.n	8000ec6 <_lseek_r+0x1e>
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	b103      	cbz	r3, 8000ec6 <_lseek_r+0x1e>
 8000ec4:	6023      	str	r3, [r4, #0]
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
 8000ec8:	200001b8 	.word	0x200001b8

08000ecc <_read_r>:
 8000ecc:	b538      	push	{r3, r4, r5, lr}
 8000ece:	4d07      	ldr	r5, [pc, #28]	@ (8000eec <_read_r+0x20>)
 8000ed0:	4604      	mov	r4, r0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	602a      	str	r2, [r5, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	f7ff fa0e 	bl	80002fc <_read>
 8000ee0:	1c43      	adds	r3, r0, #1
 8000ee2:	d102      	bne.n	8000eea <_read_r+0x1e>
 8000ee4:	682b      	ldr	r3, [r5, #0]
 8000ee6:	b103      	cbz	r3, 8000eea <_read_r+0x1e>
 8000ee8:	6023      	str	r3, [r4, #0]
 8000eea:	bd38      	pop	{r3, r4, r5, pc}
 8000eec:	200001b8 	.word	0x200001b8

08000ef0 <_write_r>:
 8000ef0:	b538      	push	{r3, r4, r5, lr}
 8000ef2:	4d07      	ldr	r5, [pc, #28]	@ (8000f10 <_write_r+0x20>)
 8000ef4:	4604      	mov	r4, r0
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	4611      	mov	r1, r2
 8000efa:	2200      	movs	r2, #0
 8000efc:	602a      	str	r2, [r5, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	f7ff fa19 	bl	8000336 <_write>
 8000f04:	1c43      	adds	r3, r0, #1
 8000f06:	d102      	bne.n	8000f0e <_write_r+0x1e>
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	b103      	cbz	r3, 8000f0e <_write_r+0x1e>
 8000f0c:	6023      	str	r3, [r4, #0]
 8000f0e:	bd38      	pop	{r3, r4, r5, pc}
 8000f10:	200001b8 	.word	0x200001b8

08000f14 <__errno>:
 8000f14:	4b01      	ldr	r3, [pc, #4]	@ (8000f1c <__errno+0x8>)
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	2000000c 	.word	0x2000000c

08000f20 <__libc_init_array>:
 8000f20:	b570      	push	{r4, r5, r6, lr}
 8000f22:	4d0d      	ldr	r5, [pc, #52]	@ (8000f58 <__libc_init_array+0x38>)
 8000f24:	4c0d      	ldr	r4, [pc, #52]	@ (8000f5c <__libc_init_array+0x3c>)
 8000f26:	1b64      	subs	r4, r4, r5
 8000f28:	10a4      	asrs	r4, r4, #2
 8000f2a:	2600      	movs	r6, #0
 8000f2c:	42a6      	cmp	r6, r4
 8000f2e:	d109      	bne.n	8000f44 <__libc_init_array+0x24>
 8000f30:	4d0b      	ldr	r5, [pc, #44]	@ (8000f60 <__libc_init_array+0x40>)
 8000f32:	4c0c      	ldr	r4, [pc, #48]	@ (8000f64 <__libc_init_array+0x44>)
 8000f34:	f000 fa50 	bl	80013d8 <_init>
 8000f38:	1b64      	subs	r4, r4, r5
 8000f3a:	10a4      	asrs	r4, r4, #2
 8000f3c:	2600      	movs	r6, #0
 8000f3e:	42a6      	cmp	r6, r4
 8000f40:	d105      	bne.n	8000f4e <__libc_init_array+0x2e>
 8000f42:	bd70      	pop	{r4, r5, r6, pc}
 8000f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f48:	4798      	blx	r3
 8000f4a:	3601      	adds	r6, #1
 8000f4c:	e7ee      	b.n	8000f2c <__libc_init_array+0xc>
 8000f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f52:	4798      	blx	r3
 8000f54:	3601      	adds	r6, #1
 8000f56:	e7f2      	b.n	8000f3e <__libc_init_array+0x1e>
 8000f58:	08001400 	.word	0x08001400
 8000f5c:	08001400 	.word	0x08001400
 8000f60:	08001400 	.word	0x08001400
 8000f64:	08001404 	.word	0x08001404

08000f68 <__retarget_lock_init_recursive>:
 8000f68:	4770      	bx	lr

08000f6a <__retarget_lock_acquire_recursive>:
 8000f6a:	4770      	bx	lr

08000f6c <__retarget_lock_release_recursive>:
 8000f6c:	4770      	bx	lr
	...

08000f70 <_free_r>:
 8000f70:	b538      	push	{r3, r4, r5, lr}
 8000f72:	4605      	mov	r5, r0
 8000f74:	2900      	cmp	r1, #0
 8000f76:	d041      	beq.n	8000ffc <_free_r+0x8c>
 8000f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f7c:	1f0c      	subs	r4, r1, #4
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bfb8      	it	lt
 8000f82:	18e4      	addlt	r4, r4, r3
 8000f84:	f000 f8e0 	bl	8001148 <__malloc_lock>
 8000f88:	4a1d      	ldr	r2, [pc, #116]	@ (8001000 <_free_r+0x90>)
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	b933      	cbnz	r3, 8000f9c <_free_r+0x2c>
 8000f8e:	6063      	str	r3, [r4, #4]
 8000f90:	6014      	str	r4, [r2, #0]
 8000f92:	4628      	mov	r0, r5
 8000f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f98:	f000 b8dc 	b.w	8001154 <__malloc_unlock>
 8000f9c:	42a3      	cmp	r3, r4
 8000f9e:	d908      	bls.n	8000fb2 <_free_r+0x42>
 8000fa0:	6820      	ldr	r0, [r4, #0]
 8000fa2:	1821      	adds	r1, r4, r0
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	bf01      	itttt	eq
 8000fa8:	6819      	ldreq	r1, [r3, #0]
 8000faa:	685b      	ldreq	r3, [r3, #4]
 8000fac:	1809      	addeq	r1, r1, r0
 8000fae:	6021      	streq	r1, [r4, #0]
 8000fb0:	e7ed      	b.n	8000f8e <_free_r+0x1e>
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	b10b      	cbz	r3, 8000fbc <_free_r+0x4c>
 8000fb8:	42a3      	cmp	r3, r4
 8000fba:	d9fa      	bls.n	8000fb2 <_free_r+0x42>
 8000fbc:	6811      	ldr	r1, [r2, #0]
 8000fbe:	1850      	adds	r0, r2, r1
 8000fc0:	42a0      	cmp	r0, r4
 8000fc2:	d10b      	bne.n	8000fdc <_free_r+0x6c>
 8000fc4:	6820      	ldr	r0, [r4, #0]
 8000fc6:	4401      	add	r1, r0
 8000fc8:	1850      	adds	r0, r2, r1
 8000fca:	4283      	cmp	r3, r0
 8000fcc:	6011      	str	r1, [r2, #0]
 8000fce:	d1e0      	bne.n	8000f92 <_free_r+0x22>
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	6053      	str	r3, [r2, #4]
 8000fd6:	4408      	add	r0, r1
 8000fd8:	6010      	str	r0, [r2, #0]
 8000fda:	e7da      	b.n	8000f92 <_free_r+0x22>
 8000fdc:	d902      	bls.n	8000fe4 <_free_r+0x74>
 8000fde:	230c      	movs	r3, #12
 8000fe0:	602b      	str	r3, [r5, #0]
 8000fe2:	e7d6      	b.n	8000f92 <_free_r+0x22>
 8000fe4:	6820      	ldr	r0, [r4, #0]
 8000fe6:	1821      	adds	r1, r4, r0
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	bf04      	itt	eq
 8000fec:	6819      	ldreq	r1, [r3, #0]
 8000fee:	685b      	ldreq	r3, [r3, #4]
 8000ff0:	6063      	str	r3, [r4, #4]
 8000ff2:	bf04      	itt	eq
 8000ff4:	1809      	addeq	r1, r1, r0
 8000ff6:	6021      	streq	r1, [r4, #0]
 8000ff8:	6054      	str	r4, [r2, #4]
 8000ffa:	e7ca      	b.n	8000f92 <_free_r+0x22>
 8000ffc:	bd38      	pop	{r3, r4, r5, pc}
 8000ffe:	bf00      	nop
 8001000:	200001c4 	.word	0x200001c4

08001004 <sbrk_aligned>:
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	4e0f      	ldr	r6, [pc, #60]	@ (8001044 <sbrk_aligned+0x40>)
 8001008:	460c      	mov	r4, r1
 800100a:	6831      	ldr	r1, [r6, #0]
 800100c:	4605      	mov	r5, r0
 800100e:	b911      	cbnz	r1, 8001016 <sbrk_aligned+0x12>
 8001010:	f000 f9d2 	bl	80013b8 <_sbrk_r>
 8001014:	6030      	str	r0, [r6, #0]
 8001016:	4621      	mov	r1, r4
 8001018:	4628      	mov	r0, r5
 800101a:	f000 f9cd 	bl	80013b8 <_sbrk_r>
 800101e:	1c43      	adds	r3, r0, #1
 8001020:	d103      	bne.n	800102a <sbrk_aligned+0x26>
 8001022:	f04f 34ff 	mov.w	r4, #4294967295
 8001026:	4620      	mov	r0, r4
 8001028:	bd70      	pop	{r4, r5, r6, pc}
 800102a:	1cc4      	adds	r4, r0, #3
 800102c:	f024 0403 	bic.w	r4, r4, #3
 8001030:	42a0      	cmp	r0, r4
 8001032:	d0f8      	beq.n	8001026 <sbrk_aligned+0x22>
 8001034:	1a21      	subs	r1, r4, r0
 8001036:	4628      	mov	r0, r5
 8001038:	f000 f9be 	bl	80013b8 <_sbrk_r>
 800103c:	3001      	adds	r0, #1
 800103e:	d1f2      	bne.n	8001026 <sbrk_aligned+0x22>
 8001040:	e7ef      	b.n	8001022 <sbrk_aligned+0x1e>
 8001042:	bf00      	nop
 8001044:	200001c0 	.word	0x200001c0

08001048 <_malloc_r>:
 8001048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800104c:	1ccd      	adds	r5, r1, #3
 800104e:	f025 0503 	bic.w	r5, r5, #3
 8001052:	3508      	adds	r5, #8
 8001054:	2d0c      	cmp	r5, #12
 8001056:	bf38      	it	cc
 8001058:	250c      	movcc	r5, #12
 800105a:	2d00      	cmp	r5, #0
 800105c:	4606      	mov	r6, r0
 800105e:	db01      	blt.n	8001064 <_malloc_r+0x1c>
 8001060:	42a9      	cmp	r1, r5
 8001062:	d904      	bls.n	800106e <_malloc_r+0x26>
 8001064:	230c      	movs	r3, #12
 8001066:	6033      	str	r3, [r6, #0]
 8001068:	2000      	movs	r0, #0
 800106a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800106e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001144 <_malloc_r+0xfc>
 8001072:	f000 f869 	bl	8001148 <__malloc_lock>
 8001076:	f8d8 3000 	ldr.w	r3, [r8]
 800107a:	461c      	mov	r4, r3
 800107c:	bb44      	cbnz	r4, 80010d0 <_malloc_r+0x88>
 800107e:	4629      	mov	r1, r5
 8001080:	4630      	mov	r0, r6
 8001082:	f7ff ffbf 	bl	8001004 <sbrk_aligned>
 8001086:	1c43      	adds	r3, r0, #1
 8001088:	4604      	mov	r4, r0
 800108a:	d158      	bne.n	800113e <_malloc_r+0xf6>
 800108c:	f8d8 4000 	ldr.w	r4, [r8]
 8001090:	4627      	mov	r7, r4
 8001092:	2f00      	cmp	r7, #0
 8001094:	d143      	bne.n	800111e <_malloc_r+0xd6>
 8001096:	2c00      	cmp	r4, #0
 8001098:	d04b      	beq.n	8001132 <_malloc_r+0xea>
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	4639      	mov	r1, r7
 800109e:	4630      	mov	r0, r6
 80010a0:	eb04 0903 	add.w	r9, r4, r3
 80010a4:	f000 f988 	bl	80013b8 <_sbrk_r>
 80010a8:	4581      	cmp	r9, r0
 80010aa:	d142      	bne.n	8001132 <_malloc_r+0xea>
 80010ac:	6821      	ldr	r1, [r4, #0]
 80010ae:	1a6d      	subs	r5, r5, r1
 80010b0:	4629      	mov	r1, r5
 80010b2:	4630      	mov	r0, r6
 80010b4:	f7ff ffa6 	bl	8001004 <sbrk_aligned>
 80010b8:	3001      	adds	r0, #1
 80010ba:	d03a      	beq.n	8001132 <_malloc_r+0xea>
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	442b      	add	r3, r5
 80010c0:	6023      	str	r3, [r4, #0]
 80010c2:	f8d8 3000 	ldr.w	r3, [r8]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	bb62      	cbnz	r2, 8001124 <_malloc_r+0xdc>
 80010ca:	f8c8 7000 	str.w	r7, [r8]
 80010ce:	e00f      	b.n	80010f0 <_malloc_r+0xa8>
 80010d0:	6822      	ldr	r2, [r4, #0]
 80010d2:	1b52      	subs	r2, r2, r5
 80010d4:	d420      	bmi.n	8001118 <_malloc_r+0xd0>
 80010d6:	2a0b      	cmp	r2, #11
 80010d8:	d917      	bls.n	800110a <_malloc_r+0xc2>
 80010da:	1961      	adds	r1, r4, r5
 80010dc:	42a3      	cmp	r3, r4
 80010de:	6025      	str	r5, [r4, #0]
 80010e0:	bf18      	it	ne
 80010e2:	6059      	strne	r1, [r3, #4]
 80010e4:	6863      	ldr	r3, [r4, #4]
 80010e6:	bf08      	it	eq
 80010e8:	f8c8 1000 	streq.w	r1, [r8]
 80010ec:	5162      	str	r2, [r4, r5]
 80010ee:	604b      	str	r3, [r1, #4]
 80010f0:	4630      	mov	r0, r6
 80010f2:	f000 f82f 	bl	8001154 <__malloc_unlock>
 80010f6:	f104 000b 	add.w	r0, r4, #11
 80010fa:	1d23      	adds	r3, r4, #4
 80010fc:	f020 0007 	bic.w	r0, r0, #7
 8001100:	1ac2      	subs	r2, r0, r3
 8001102:	bf1c      	itt	ne
 8001104:	1a1b      	subne	r3, r3, r0
 8001106:	50a3      	strne	r3, [r4, r2]
 8001108:	e7af      	b.n	800106a <_malloc_r+0x22>
 800110a:	6862      	ldr	r2, [r4, #4]
 800110c:	42a3      	cmp	r3, r4
 800110e:	bf0c      	ite	eq
 8001110:	f8c8 2000 	streq.w	r2, [r8]
 8001114:	605a      	strne	r2, [r3, #4]
 8001116:	e7eb      	b.n	80010f0 <_malloc_r+0xa8>
 8001118:	4623      	mov	r3, r4
 800111a:	6864      	ldr	r4, [r4, #4]
 800111c:	e7ae      	b.n	800107c <_malloc_r+0x34>
 800111e:	463c      	mov	r4, r7
 8001120:	687f      	ldr	r7, [r7, #4]
 8001122:	e7b6      	b.n	8001092 <_malloc_r+0x4a>
 8001124:	461a      	mov	r2, r3
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	42a3      	cmp	r3, r4
 800112a:	d1fb      	bne.n	8001124 <_malloc_r+0xdc>
 800112c:	2300      	movs	r3, #0
 800112e:	6053      	str	r3, [r2, #4]
 8001130:	e7de      	b.n	80010f0 <_malloc_r+0xa8>
 8001132:	230c      	movs	r3, #12
 8001134:	6033      	str	r3, [r6, #0]
 8001136:	4630      	mov	r0, r6
 8001138:	f000 f80c 	bl	8001154 <__malloc_unlock>
 800113c:	e794      	b.n	8001068 <_malloc_r+0x20>
 800113e:	6005      	str	r5, [r0, #0]
 8001140:	e7d6      	b.n	80010f0 <_malloc_r+0xa8>
 8001142:	bf00      	nop
 8001144:	200001c4 	.word	0x200001c4

08001148 <__malloc_lock>:
 8001148:	4801      	ldr	r0, [pc, #4]	@ (8001150 <__malloc_lock+0x8>)
 800114a:	f7ff bf0e 	b.w	8000f6a <__retarget_lock_acquire_recursive>
 800114e:	bf00      	nop
 8001150:	200001bc 	.word	0x200001bc

08001154 <__malloc_unlock>:
 8001154:	4801      	ldr	r0, [pc, #4]	@ (800115c <__malloc_unlock+0x8>)
 8001156:	f7ff bf09 	b.w	8000f6c <__retarget_lock_release_recursive>
 800115a:	bf00      	nop
 800115c:	200001bc 	.word	0x200001bc

08001160 <__sflush_r>:
 8001160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	0716      	lsls	r6, r2, #28
 8001168:	4605      	mov	r5, r0
 800116a:	460c      	mov	r4, r1
 800116c:	d454      	bmi.n	8001218 <__sflush_r+0xb8>
 800116e:	684b      	ldr	r3, [r1, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	dc02      	bgt.n	800117a <__sflush_r+0x1a>
 8001174:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001176:	2b00      	cmp	r3, #0
 8001178:	dd48      	ble.n	800120c <__sflush_r+0xac>
 800117a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800117c:	2e00      	cmp	r6, #0
 800117e:	d045      	beq.n	800120c <__sflush_r+0xac>
 8001180:	2300      	movs	r3, #0
 8001182:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001186:	682f      	ldr	r7, [r5, #0]
 8001188:	6a21      	ldr	r1, [r4, #32]
 800118a:	602b      	str	r3, [r5, #0]
 800118c:	d030      	beq.n	80011f0 <__sflush_r+0x90>
 800118e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001190:	89a3      	ldrh	r3, [r4, #12]
 8001192:	0759      	lsls	r1, r3, #29
 8001194:	d505      	bpl.n	80011a2 <__sflush_r+0x42>
 8001196:	6863      	ldr	r3, [r4, #4]
 8001198:	1ad2      	subs	r2, r2, r3
 800119a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800119c:	b10b      	cbz	r3, 80011a2 <__sflush_r+0x42>
 800119e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011a0:	1ad2      	subs	r2, r2, r3
 80011a2:	2300      	movs	r3, #0
 80011a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011a6:	6a21      	ldr	r1, [r4, #32]
 80011a8:	4628      	mov	r0, r5
 80011aa:	47b0      	blx	r6
 80011ac:	1c43      	adds	r3, r0, #1
 80011ae:	89a3      	ldrh	r3, [r4, #12]
 80011b0:	d106      	bne.n	80011c0 <__sflush_r+0x60>
 80011b2:	6829      	ldr	r1, [r5, #0]
 80011b4:	291d      	cmp	r1, #29
 80011b6:	d82b      	bhi.n	8001210 <__sflush_r+0xb0>
 80011b8:	4a28      	ldr	r2, [pc, #160]	@ (800125c <__sflush_r+0xfc>)
 80011ba:	410a      	asrs	r2, r1
 80011bc:	07d6      	lsls	r6, r2, #31
 80011be:	d427      	bmi.n	8001210 <__sflush_r+0xb0>
 80011c0:	2200      	movs	r2, #0
 80011c2:	6062      	str	r2, [r4, #4]
 80011c4:	04d9      	lsls	r1, r3, #19
 80011c6:	6922      	ldr	r2, [r4, #16]
 80011c8:	6022      	str	r2, [r4, #0]
 80011ca:	d504      	bpl.n	80011d6 <__sflush_r+0x76>
 80011cc:	1c42      	adds	r2, r0, #1
 80011ce:	d101      	bne.n	80011d4 <__sflush_r+0x74>
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	b903      	cbnz	r3, 80011d6 <__sflush_r+0x76>
 80011d4:	6560      	str	r0, [r4, #84]	@ 0x54
 80011d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011d8:	602f      	str	r7, [r5, #0]
 80011da:	b1b9      	cbz	r1, 800120c <__sflush_r+0xac>
 80011dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011e0:	4299      	cmp	r1, r3
 80011e2:	d002      	beq.n	80011ea <__sflush_r+0x8a>
 80011e4:	4628      	mov	r0, r5
 80011e6:	f7ff fec3 	bl	8000f70 <_free_r>
 80011ea:	2300      	movs	r3, #0
 80011ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80011ee:	e00d      	b.n	800120c <__sflush_r+0xac>
 80011f0:	2301      	movs	r3, #1
 80011f2:	4628      	mov	r0, r5
 80011f4:	47b0      	blx	r6
 80011f6:	4602      	mov	r2, r0
 80011f8:	1c50      	adds	r0, r2, #1
 80011fa:	d1c9      	bne.n	8001190 <__sflush_r+0x30>
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0c6      	beq.n	8001190 <__sflush_r+0x30>
 8001202:	2b1d      	cmp	r3, #29
 8001204:	d001      	beq.n	800120a <__sflush_r+0xaa>
 8001206:	2b16      	cmp	r3, #22
 8001208:	d11d      	bne.n	8001246 <__sflush_r+0xe6>
 800120a:	602f      	str	r7, [r5, #0]
 800120c:	2000      	movs	r0, #0
 800120e:	e021      	b.n	8001254 <__sflush_r+0xf4>
 8001210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001214:	b21b      	sxth	r3, r3
 8001216:	e01a      	b.n	800124e <__sflush_r+0xee>
 8001218:	690f      	ldr	r7, [r1, #16]
 800121a:	2f00      	cmp	r7, #0
 800121c:	d0f6      	beq.n	800120c <__sflush_r+0xac>
 800121e:	0793      	lsls	r3, r2, #30
 8001220:	680e      	ldr	r6, [r1, #0]
 8001222:	bf08      	it	eq
 8001224:	694b      	ldreq	r3, [r1, #20]
 8001226:	600f      	str	r7, [r1, #0]
 8001228:	bf18      	it	ne
 800122a:	2300      	movne	r3, #0
 800122c:	1bf6      	subs	r6, r6, r7
 800122e:	608b      	str	r3, [r1, #8]
 8001230:	2e00      	cmp	r6, #0
 8001232:	ddeb      	ble.n	800120c <__sflush_r+0xac>
 8001234:	6a21      	ldr	r1, [r4, #32]
 8001236:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800123a:	4633      	mov	r3, r6
 800123c:	463a      	mov	r2, r7
 800123e:	4628      	mov	r0, r5
 8001240:	47e0      	blx	ip
 8001242:	2800      	cmp	r0, #0
 8001244:	dc07      	bgt.n	8001256 <__sflush_r+0xf6>
 8001246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800124a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800124e:	81a3      	strh	r3, [r4, #12]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001256:	4407      	add	r7, r0
 8001258:	1a36      	subs	r6, r6, r0
 800125a:	e7e9      	b.n	8001230 <__sflush_r+0xd0>
 800125c:	dfbffffe 	.word	0xdfbffffe

08001260 <_fflush_r>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	690b      	ldr	r3, [r1, #16]
 8001264:	4605      	mov	r5, r0
 8001266:	460c      	mov	r4, r1
 8001268:	b913      	cbnz	r3, 8001270 <_fflush_r+0x10>
 800126a:	2500      	movs	r5, #0
 800126c:	4628      	mov	r0, r5
 800126e:	bd38      	pop	{r3, r4, r5, pc}
 8001270:	b118      	cbz	r0, 800127a <_fflush_r+0x1a>
 8001272:	6a03      	ldr	r3, [r0, #32]
 8001274:	b90b      	cbnz	r3, 800127a <_fflush_r+0x1a>
 8001276:	f7ff fc93 	bl	8000ba0 <__sinit>
 800127a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f3      	beq.n	800126a <_fflush_r+0xa>
 8001282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001284:	07d0      	lsls	r0, r2, #31
 8001286:	d404      	bmi.n	8001292 <_fflush_r+0x32>
 8001288:	0599      	lsls	r1, r3, #22
 800128a:	d402      	bmi.n	8001292 <_fflush_r+0x32>
 800128c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800128e:	f7ff fe6c 	bl	8000f6a <__retarget_lock_acquire_recursive>
 8001292:	4628      	mov	r0, r5
 8001294:	4621      	mov	r1, r4
 8001296:	f7ff ff63 	bl	8001160 <__sflush_r>
 800129a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800129c:	07da      	lsls	r2, r3, #31
 800129e:	4605      	mov	r5, r0
 80012a0:	d4e4      	bmi.n	800126c <_fflush_r+0xc>
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	059b      	lsls	r3, r3, #22
 80012a6:	d4e1      	bmi.n	800126c <_fflush_r+0xc>
 80012a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012aa:	f7ff fe5f 	bl	8000f6c <__retarget_lock_release_recursive>
 80012ae:	e7dd      	b.n	800126c <_fflush_r+0xc>

080012b0 <__swhatbuf_r>:
 80012b0:	b570      	push	{r4, r5, r6, lr}
 80012b2:	460c      	mov	r4, r1
 80012b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012b8:	2900      	cmp	r1, #0
 80012ba:	b096      	sub	sp, #88	@ 0x58
 80012bc:	4615      	mov	r5, r2
 80012be:	461e      	mov	r6, r3
 80012c0:	da0d      	bge.n	80012de <__swhatbuf_r+0x2e>
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80012c8:	f04f 0100 	mov.w	r1, #0
 80012cc:	bf14      	ite	ne
 80012ce:	2340      	movne	r3, #64	@ 0x40
 80012d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80012d4:	2000      	movs	r0, #0
 80012d6:	6031      	str	r1, [r6, #0]
 80012d8:	602b      	str	r3, [r5, #0]
 80012da:	b016      	add	sp, #88	@ 0x58
 80012dc:	bd70      	pop	{r4, r5, r6, pc}
 80012de:	466a      	mov	r2, sp
 80012e0:	f000 f848 	bl	8001374 <_fstat_r>
 80012e4:	2800      	cmp	r0, #0
 80012e6:	dbec      	blt.n	80012c2 <__swhatbuf_r+0x12>
 80012e8:	9901      	ldr	r1, [sp, #4]
 80012ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80012ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80012f2:	4259      	negs	r1, r3
 80012f4:	4159      	adcs	r1, r3
 80012f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012fa:	e7eb      	b.n	80012d4 <__swhatbuf_r+0x24>

080012fc <__smakebuf_r>:
 80012fc:	898b      	ldrh	r3, [r1, #12]
 80012fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001300:	079d      	lsls	r5, r3, #30
 8001302:	4606      	mov	r6, r0
 8001304:	460c      	mov	r4, r1
 8001306:	d507      	bpl.n	8001318 <__smakebuf_r+0x1c>
 8001308:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	6123      	str	r3, [r4, #16]
 8001310:	2301      	movs	r3, #1
 8001312:	6163      	str	r3, [r4, #20]
 8001314:	b003      	add	sp, #12
 8001316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001318:	ab01      	add	r3, sp, #4
 800131a:	466a      	mov	r2, sp
 800131c:	f7ff ffc8 	bl	80012b0 <__swhatbuf_r>
 8001320:	9f00      	ldr	r7, [sp, #0]
 8001322:	4605      	mov	r5, r0
 8001324:	4639      	mov	r1, r7
 8001326:	4630      	mov	r0, r6
 8001328:	f7ff fe8e 	bl	8001048 <_malloc_r>
 800132c:	b948      	cbnz	r0, 8001342 <__smakebuf_r+0x46>
 800132e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001332:	059a      	lsls	r2, r3, #22
 8001334:	d4ee      	bmi.n	8001314 <__smakebuf_r+0x18>
 8001336:	f023 0303 	bic.w	r3, r3, #3
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	81a3      	strh	r3, [r4, #12]
 8001340:	e7e2      	b.n	8001308 <__smakebuf_r+0xc>
 8001342:	89a3      	ldrh	r3, [r4, #12]
 8001344:	6020      	str	r0, [r4, #0]
 8001346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800134a:	81a3      	strh	r3, [r4, #12]
 800134c:	9b01      	ldr	r3, [sp, #4]
 800134e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001352:	b15b      	cbz	r3, 800136c <__smakebuf_r+0x70>
 8001354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001358:	4630      	mov	r0, r6
 800135a:	f000 f81d 	bl	8001398 <_isatty_r>
 800135e:	b128      	cbz	r0, 800136c <__smakebuf_r+0x70>
 8001360:	89a3      	ldrh	r3, [r4, #12]
 8001362:	f023 0303 	bic.w	r3, r3, #3
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	81a3      	strh	r3, [r4, #12]
 800136c:	89a3      	ldrh	r3, [r4, #12]
 800136e:	431d      	orrs	r5, r3
 8001370:	81a5      	strh	r5, [r4, #12]
 8001372:	e7cf      	b.n	8001314 <__smakebuf_r+0x18>

08001374 <_fstat_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4d07      	ldr	r5, [pc, #28]	@ (8001394 <_fstat_r+0x20>)
 8001378:	2300      	movs	r3, #0
 800137a:	4604      	mov	r4, r0
 800137c:	4608      	mov	r0, r1
 800137e:	4611      	mov	r1, r2
 8001380:	602b      	str	r3, [r5, #0]
 8001382:	f7fe ffff 	bl	8000384 <_fstat>
 8001386:	1c43      	adds	r3, r0, #1
 8001388:	d102      	bne.n	8001390 <_fstat_r+0x1c>
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	b103      	cbz	r3, 8001390 <_fstat_r+0x1c>
 800138e:	6023      	str	r3, [r4, #0]
 8001390:	bd38      	pop	{r3, r4, r5, pc}
 8001392:	bf00      	nop
 8001394:	200001b8 	.word	0x200001b8

08001398 <_isatty_r>:
 8001398:	b538      	push	{r3, r4, r5, lr}
 800139a:	4d06      	ldr	r5, [pc, #24]	@ (80013b4 <_isatty_r+0x1c>)
 800139c:	2300      	movs	r3, #0
 800139e:	4604      	mov	r4, r0
 80013a0:	4608      	mov	r0, r1
 80013a2:	602b      	str	r3, [r5, #0]
 80013a4:	f7fe fffd 	bl	80003a2 <_isatty>
 80013a8:	1c43      	adds	r3, r0, #1
 80013aa:	d102      	bne.n	80013b2 <_isatty_r+0x1a>
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	b103      	cbz	r3, 80013b2 <_isatty_r+0x1a>
 80013b0:	6023      	str	r3, [r4, #0]
 80013b2:	bd38      	pop	{r3, r4, r5, pc}
 80013b4:	200001b8 	.word	0x200001b8

080013b8 <_sbrk_r>:
 80013b8:	b538      	push	{r3, r4, r5, lr}
 80013ba:	4d06      	ldr	r5, [pc, #24]	@ (80013d4 <_sbrk_r+0x1c>)
 80013bc:	2300      	movs	r3, #0
 80013be:	4604      	mov	r4, r0
 80013c0:	4608      	mov	r0, r1
 80013c2:	602b      	str	r3, [r5, #0]
 80013c4:	f7ff f804 	bl	80003d0 <_sbrk>
 80013c8:	1c43      	adds	r3, r0, #1
 80013ca:	d102      	bne.n	80013d2 <_sbrk_r+0x1a>
 80013cc:	682b      	ldr	r3, [r5, #0]
 80013ce:	b103      	cbz	r3, 80013d2 <_sbrk_r+0x1a>
 80013d0:	6023      	str	r3, [r4, #0]
 80013d2:	bd38      	pop	{r3, r4, r5, pc}
 80013d4:	200001b8 	.word	0x200001b8

080013d8 <_init>:
 80013d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013da:	bf00      	nop
 80013dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013de:	bc08      	pop	{r3}
 80013e0:	469e      	mov	lr, r3
 80013e2:	4770      	bx	lr

080013e4 <_fini>:
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	bf00      	nop
 80013e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ea:	bc08      	pop	{r3}
 80013ec:	469e      	mov	lr, r3
 80013ee:	4770      	bx	lr
