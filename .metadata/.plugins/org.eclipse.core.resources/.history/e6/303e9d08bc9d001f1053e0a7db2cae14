/*
 * stm32c031xx_gpio_driver.c
 *
 *  Created on: Nov 7, 2024
 *      Author: solom
 */

#include "stm32c031xx_gpio_driver.h"

void GPIO_PeriClkControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
	if (EnOrDi == ENABLE)
	{
		if (pGPIOx == GPIOA)
		{
			GPIOA_PCLK_EN();
		}
		else if (pGPIOx == GPIOB)
		{
			GPIOB_PCLK_EN();
		}

		else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_EN();
		}
		else if (pGPIOx == GPIOD)
		{
			GPIOD_PCLK_EN();
		}
		else if (pGPIOx == GPIOF)
		{
			GPIOF_PCLK_EN();
		}
		else
		{
			// Do nothing
		}
	}

	else
	{
		if (pGPIOx == GPIOA)
		{
			GPIOA_PCLK_DI();
		}
		else if (pGPIOx == GPIOB)
		{
			GPIOB_PCLK_DI();
		}

		else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_DI();
		}
		else if (pGPIOx == GPIOD)
		{
			GPIOD_PCLK_DI();
		}
		else if (pGPIOx == GPIOF)
		{
			GPIOF_PCLK_DI();
		}
		else
		{
			// Do nothing
		}
	}
}

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{

	uint32_t temp = 0; //temporary register

	//1. Configure the mode of GPIO pin

	if (pGPIOHandle->GPIO_PinConfig_t.GPIO_PinMode <= GPIO_MODE_ANALOG)
	{
		// Non interrupt mode
		temp = pGPIOHandle->GPIO_PinConfig_t.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber);
		pGPIOHandle->pGPIOx->MODER = temp;
		temp = 0;
	}

	else
	{
		// Non interrupt mode
	}

	//2. Configure the speed of GPIO pin

	//3. Configure the pupd of GPIO pin

	//4. Configure the optype of GPIO pin

	//5. Configure the Alternate functionality of GPIO pin

}
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{

}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{

}
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
{

}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{

}
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value)
{

}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{

}

void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQ_Priority, uint8_t EnOrDi)
{

}
void GPIO_IRQHandling(uint8_t PinNumber)
{

}
