/*
 * stm32f767xx_spi_driver.c
 *
 *  Created on: Nov 21, 2024
 *      Author: solom
 */

#include "stm32f767xx_spi_driver.h"

void SPI_PeriClkControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if (EnOrDi == ENABLE)
	{
		if (pSPIx == SPI1)
		{
			SPI1_PCLK_EN();
		}
		else if (pSPIx == SPI2)
		{
			SPI2_PCLK_EN();
		}

		else if (pSPIx == SPI3)
		{
			SPI3_PCLK_EN();
		}
		else if (pSPIx == SPI4)
		{
			SPI4_PCLK_EN();
		}
		else if (pSPIx == SPI5)
		{
			SPI5_PCLK_EN();
		}
		else if (pSPIx == SPI6)
		{
			SPI6_PCLK_EN();
		}

		else
		{
			// Do nothing
		}
	}

	else
	{
		if (pSPIx == SPI1)
		{
			SPI1_PCLK_DI();
		}
		else if (pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}

		else if (pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
		else if (pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
		else if (pSPIx == SPI5)
		{
			SPI5_PCLK_DI();
		}
		else if (pSPIx == SPI6)
		{
			SPI6_PCLK_DI();
		}

		else
		{
			// Do nothing
		}
	}
}

void SPI_Init(SPI_Handle_t *pSPIHandle)
{

	uint32_t tempreg = 0;

	// 1. Set the mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPIx_CR1_MSTR;


	// 2. Configure the Bus config

	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUSCFG_FD)
	{
		// Clear the BIDIMODE bit
		tempreg &= ~(1 << SPIx_CR1_BIDIMODE);
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUSCFG_HD)
	{
		// Set the BIDIMODE bit
		tempreg |= (1 << SPIx_CR1_BIDIMODE);

		//Configure BIDIOE bit for direction of transfer??

	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUSCFG_SIMPLEX_RX)
	{
		// Clear the BIDIMODE bit
		tempreg &= ~(1 << SPIx_CR1_BIDIMODE);

		// RXONLY bit must be set
		tempreg |= (1 << SPIx_CR1_RXONLY);
	}


	// Configure SPI SClock

	tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPIx_CR1_BR);

	// Configure SPI DFF (Data Size DS) is present in CR2

	pSPIHandle->pSPIx->CR2 |= (pSPIHandle->SPIConfig.SPI_DS << SPIx_CR2_DS);

	// Configure SPI CPOL

	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPIx_CR1_CPOL);

	// Configure SPI CPHA

	tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA << SPIx_CR1_CPHA);


	pSPIHandle->pSPIx->CR1 = tempreg;

}
void SPI_DeInit(SPI_RegDef_t *pSPIx)
{
	if (pSPIx == SPI1)
		{
			SPI1_REG_RST();
		}
		else if (pSPIx == SPI2)
		{
			SPI2_REG_RST();
		}

		else if (pSPIx == SPI3)
		{
			SPI3_REG_RST();
		}
		else if (pSPIx == SPI4)
		{
			SPI4_REG_RST();
		}
		else if (pSPIx == SPI5)
		{
			SPI5_REG_RST();
		}
		else if (pSPIx == SPI6)
		{
			SPI6_REG_RST();
		}
		else
		{
			// DO nothing
		}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{

}

void SPI_SendData (SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
	while (Len > 0)
	{
		// 1. wait until TXE is SET
		while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
	}



}
void SPI_ReceiveData (SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{

}


void SPI_IRQConfig(uint8_t IRQNumber, uint8_t IRQ_Priority, uint8_t EnOrDi)
{

}
void SPI_IRQHandling(SPI_Handle_t *pSPIHandle)
{

}
