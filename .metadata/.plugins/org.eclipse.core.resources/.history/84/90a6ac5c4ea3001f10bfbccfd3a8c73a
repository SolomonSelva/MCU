/*
 * stm32f767xx.h
 *
 *  Created on: Nov 15, 2024
 *      Author: solom
 */

#ifndef STM32F767XX_H_
#define STM32F767XX_H_


#include <stdint.h>


#define __vo volatile


/* Processor specific addresses */
/* Arm cortex M7 processor for STM32F767xx */

#define NVIC_ISER0_BASE_ADDR							((__vo uint32_t *) 0xE000E100 )
#define NVIC_ISER1_BASE_ADDR							((__vo uint32_t *) 0xE000E104 )
#define NVIC_ISER2_BASE_ADDR							((__vo uint32_t *) 0xE000E108 )
#define NVIC_ISER3_BASE_ADDR							((__vo uint32_t *) 0xE000E10C )

#define NVIC_ICER0_BASE_ADDR							((__vo uint32_t *) 0xE000E180 )
#define NVIC_ICER1_BASE_ADDR							((__vo uint32_t *) 0xE000E184 )
#define NVIC_ICER2_BASE_ADDR							((__vo uint32_t *) 0xE000E188 )
#define NVIC_ICER3_BASE_ADDR							((__vo uint32_t *) 0xE000E18C )

#define NVIC_IPR_BASE_ADDR							((__vo uint32_t *) 0xE000E400 )

#define NO_PR_BITS_IMPLEMENTED						2







/* end of Processor specific addresses */

/* Memory base addresses */

#define FLASH_BASEADDR						0x08000000U		// Base address of writable Flash memory(Main Flash)
#define SRAM1_BASEADDR						0x20020000U		// Base address of SRAM1 base
#define SRAM2_BASEADDR						0x2007C000U 	// Base address of SRAM2
///////////// Need to check ROM avlue
#define ROM									0x1FFF0000U    // System Memory is ROM
#define SRAM								SRAM1		// Define SRAM1 as SRAM Base address

/* Base addresses of Bus peripherals */

#define PERIPH_BASEADDR 					0x40000000U	// APB peripheral base address
#define APB1PERIPH_BASEADDR					PERIPH_BASEADDR		// Same as peripheral base
#define APB2PERIPH_BASEADDR					0x40010000U	// APB2 Base address.

#define AHB1PERIPH_BASEADDR					0x40020000U	// AHB1 peripheral base address
#define AHB2PERIPH_BASEADDR					0x50000000U	// AHB2 peripheral base address
#define AHB3PERIPH_BASEADDR					0x60000000U	// AHB1 peripheral base address



/* Base address of peripheral hanging on AHB */


#define GPIOA_BASEADDR						(AHB1PERIPH_BASEADDR + 0x0000)
#define GPIOB_BASEADDR						(AHB1PERIPH_BASEADDR + 0x0400)
#define GPIOC_BASEADDR						(AHB1PERIPH_BASEADDR + 0x0800)
#define GPIOD_BASEADDR						(AHB1PERIPH_BASEADDR + 0x0C00)
#define GPIOE_BASEADDR						(AHB1PERIPH_BASEADDR + 0x1000)
#define GPIOF_BASEADDR						(AHB1PERIPH_BASEADDR + 0x1400)
#define GPIOG_BASEADDR						(AHB1PERIPH_BASEADDR + 0x1800)
#define GPIOH_BASEADDR						(AHB1PERIPH_BASEADDR + 0x1C00)
#define GPIOI_BASEADDR						(AHB1PERIPH_BASEADDR + 0x2000)
#define GPIOJ_BASEADDR						(AHB1PERIPH_BASEADDR + 0x2400)
#define GPIOK_BASEADDR						(AHB1PERIPH_BASEADDR + 0x2800)

/* Base address of peripherals hanging on AHB Bus */


#define RCC_BASEADDR						(AHB1PERIPH_BASEADDR + 0x3800)

/* Base address of peripherals hanging on APB Bus */
#define EXTI_BASEADDR						(APB2PERIPH_BASEADDR + 0x3C00)


#define I2C1_BASEADDR						(APB1PERIPH_BASEADDR + 0x5400)
#define I2C2_BASEADDR						(APB1PERIPH_BASEADDR + 0x5800)
#define I2C3_BASEADDR						(APB1PERIPH_BASEADDR + 0x5C00)
#define I2C4_BASEADDR						(APB1PERIPH_BASEADDR + 0x6000)

#define SPI1_BASEADDR						(APB2PERIPH_BASEADDR + 0x3000)
#define SPI2_BASEADDR						(APB1PERIPH_BASEADDR + 0x3800) 	// SPI2S1 is same as SPI2
#define SPI3_BASEADDR						(APB1PERIPH_BASEADDR + 0x3C00) 	// SPI3S1 is same as SPI3
#define SPI4_BASEADDR						(APB2PERIPH_BASEADDR + 0x3400)
#define SPI5_BASEADDR						(APB2PERIPH_BASEADDR + 0x5000)
#define SPI6_BASEADDR						(APB2PERIPH_BASEADDR + 0x5400)

#define USART1_BASEADDR						(APB2PERIPH_BASEADDR + 0x1000)
#define USART2_BASEADDR						(APB1PERIPH_BASEADDR + 0x4400)
#define USART3_BASEADDR						(APB1PERIPH_BASEADDR + 0x4800)
#define UART4_BASEADDR						(APB1PERIPH_BASEADDR + 0x4C00)
#define UART5_BASEADDR						(APB1PERIPH_BASEADDR + 0x5000)
#define USART6_BASEADDR						(APB2PERIPH_BASEADDR + 0x1400)
#define UART7_BASEADDR						(APB1PERIPH_BASEADDR + 0x7800)
#define UART8_BASEADDR						(APB1PERIPH_BASEADDR + 0x7C00)

#define SYSCFG_BASEADDR						(APB2PERIPH_BASEADDR + 0x3800)



/* Peripheral Register definition structures */

typedef struct
{
	__vo uint32_t MODER;				//GPIO port mode register 				Address offset = 0x00
	__vo uint32_t OTYPER;				//GPIO port output type register		Address offset = 0x04
	__vo uint32_t OSPEEDR;				//GPIO port output speed register
	__vo uint32_t PUPDR;				//GPIO port pull-up/pull-down register
	__vo uint32_t IDR;					//GPIO port input data register
	__vo uint32_t ODR;					//GPIO port output data register
	__vo uint32_t BSRR;					//GPIO port bit set/reset register
	__vo uint32_t LCKR;					//GPIO port configuration lock register
	__vo uint32_t AFRL;					//GPIO alternate function low register
	__vo uint32_t AFRH;					//GPIO alternate function high register			Address offset = 0x24 to 0x28

}GPIO_RegDef_t;

// Peripheral definitions

//GPIO_RegDef_t *pGPIOA = (GPIO_RegDef_t*) GPIOA_BASEADDR;   // This line can be written in a better way as shown below

#define GPIOA 							((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define GPIOB 							((GPIO_RegDef_t*)GPIOB_BASEADDR)
#define GPIOC 							((GPIO_RegDef_t*)GPIOC_BASEADDR)
#define GPIOD 							((GPIO_RegDef_t*)GPIOD_BASEADDR)
#define GPIOE 							((GPIO_RegDef_t*)GPIOE_BASEADDR)
#define GPIOF 							((GPIO_RegDef_t*)GPIOF_BASEADDR)
#define GPIOG 							((GPIO_RegDef_t*)GPIOG_BASEADDR)
#define GPIOH 							((GPIO_RegDef_t*)GPIOH_BASEADDR)
#define GPIOI 							((GPIO_RegDef_t*)GPIOI_BASEADDR)
#define GPIOJ 							((GPIO_RegDef_t*)GPIOJ_BASEADDR)
#define GPIOK 							((GPIO_RegDef_t*)GPIOK_BASEADDR)


//GPIO_RegDef_t *pGPIOA = GPIOA;

#define RCC 							((RCC_RegDef_t*)RCC_BASEADDR)

#define EXTI							((EXTI_RegDef_t*)EXTI_BASEADDR)

#define SYSCFG							((SYSCFG_RegDef_t*)SYSCFG_BASEADDR)

typedef struct
{
	__vo uint32_t CR;				//Address offset = 0x00
	__vo uint32_t PLLCFGR;				//Address offset = 0x04
	__vo uint32_t CFGR;				//
	__vo uint32_t CIR;				//
	__vo uint32_t AHB1RSTR;					//
	__vo uint32_t AHB2RSTR;					//
	__vo uint32_t AHB3RSTR;					//
	uint32_t Reserved0;					//
	__vo uint32_t APB1RSTR;					//
	__vo uint32_t APB2RSTR;					//
	uint32_t Reserved1[2];
	__vo uint32_t AHB1ENR;
	__vo uint32_t AHB2ENR;
	__vo uint32_t AHB3ENR;
	uint32_t Reserved2;
	__vo uint32_t APB1ENR;
	__vo uint32_t APB2ENR;
	uint32_t Reserved3[2];
	__vo uint32_t AHB1LPENR;
	__vo uint32_t AHB2LPENR;
	__vo uint32_t AHB3LPENR;
	uint32_t Reserved4;
	__vo uint32_t APB1LPENR;
	__vo uint32_t APB2LPENR;
	uint32_t Reserved5[2];
	__vo uint32_t BDCR;
	__vo uint32_t CSR;
	uint32_t Reserved6[2];
	__vo uint32_t SSCGR;
	__vo uint32_t PLLI2SCFGR;
	__vo uint32_t PLLSAICFGR;
	__vo uint32_t DCKCFGR1;
	__vo uint32_t DCKCFGR2;						//Address offset = 0x90 to 0x94

}RCC_RegDef_t;

/* Peripheral regsiter structure of EXTI */

typedef struct
{
	__vo uint32_t EXTI_IMR;				// 				Address offset = 0x000
	__vo uint32_t EXTI_EMR;				//		Address offset = 0x04
	__vo uint32_t EXTI_RTSR;				//
	__vo uint32_t EXTI_FTSR;				//
	__vo uint32_t EXTI_SWIER;					//
	__vo uint32_t EXTI_PR;						//			Address offset = 0x14 to 0x18

}EXTI_RegDef_t;

/* Peripheral regsiter structure of SYSCFG */

typedef struct
{
	__vo uint32_t MEMRMP;				// 				Address offset = 0x00
	__vo uint32_t PMC;					//		Address offset = 0x04 to 0x08
	__vo uint32_t EXTI_CR[4];
	__vo uint32_t CBR;
	__vo uint32_t CMPCR;					// Address offset = 0x20 to 0x24

}SYSCFG_RegDef_t;


/* CLock enable macros for GPIO peripherals */

#define GPIOA_PCLK_EN()					(RCC->AHB1ENR |= (1 << 0))
#define GPIOB_PCLK_EN()					(RCC->AHB1ENR |= (1 << 1))
#define GPIOC_PCLK_EN()					(RCC->AHB1ENR |= (1 << 2))
#define GPIOD_PCLK_EN()					(RCC->AHB1ENR |= (1 << 3))
#define GPIOE_PCLK_EN()					(RCC->AHB1ENR |= (1 << 4))
#define GPIOF_PCLK_EN()					(RCC->AHB1ENR |= (1 << 5))
#define GPIOG_PCLK_EN()					(RCC->AHB1ENR |= (1 << 6))
#define GPIOH_PCLK_EN()					(RCC->AHB1ENR |= (1 << 7))
#define GPIOI_PCLK_EN()					(RCC->AHB1ENR |= (1 << 8))
#define GPIOJ_PCLK_EN()					(RCC->AHB1ENR |= (1 << 9))
#define GPIOK_PCLK_EN()					(RCC->AHB1ENR |= (1 << 10))

/* CLock enable macros for I2Cx peripherals */

#define I2C1_PCLK_EN()					(RCC->APB1ENR |= (1 << 21))
#define I2C2_PCLK_EN()					(RCC->APB1ENR |= (1 << 22))
#define I2C3_PCLK_EN()					(RCC->APB1ENR |= (1 << 23))
#define I2C4_PCLK_EN()					(RCC->APB1ENR |= (1 << 24))

/* CLock enable macros for SPIx peripherals */

#define SPI1_PCLK_EN()					(RCC->APB2ENR |= (1 << 12))
#define SPI2_PCLK_EN()					(RCC->APB1ENR |= (1 << 14))
#define SPI3_PCLK_EN()					(RCC->APB1ENR |= (1 << 15))
#define SPI4_PCLK_EN()					(RCC->APB2ENR |= (1 << 13))
#define SPI5_PCLK_EN()					(RCC->APB2ENR |= (1 << 20))
#define SPI6_PCLK_EN()					(RCC->APB2ENR |= (1 << 21))


/* CLock enable macros for USARTx peripherals */

#define USART1_PCLK_EN()					(RCC->APB2ENR |= (1 << 4))
#define USART2_PCLK_EN()					(RCC->APB1ENR |= (1 << 17))
#define USART3_PCLK_EN()					(RCC->APB1ENR |= (1 << 18))
#define UART4_PCLK_EN()						(RCC->APB1ENR |= (1 << 19))
#define UART5_PCLK_EN()						(RCC->APB1ENR |= (1 << 20))
#define USART6_PCLK_EN()					(RCC->APB2ENR |= (1 << 5))
#define USART7_PCLK_EN()					(RCC->APB1ENR |= (1 << 30))
#define USART8_PCLK_EN()					(RCC->APB1ENR |= (1 << 31))

/* CLock enable macros for SYSCFG peripherals */

#define SYSCFG_PCLK_EN()					(RCC->APB2ENR |= (1 << 14))

/* CLock disable macros for GPIO peripherals */

#define GPIOA_PCLK_DI()					(RCC->AHB1ENR &= ~(1 << 0))
#define GPIOB_PCLK_DI()					(RCC->AHB1ENR &= ~(1 << 1))
#define GPIOC_PCLK_DI()					(RCC->AHB1ENR &= ~(1 << 2))
#define GPIOD_PCLK_DI()					(RCC->AHB1ENR &= ~(1 << 3))
#define GPIOE_PCLK_DI()					(RCC->AHB1ENR &= ~(1 << 4))
#define GPIOF_PCLK_DI()					(RCC->AHB1ENR &= ~(1 << 5))
#define GPIOG_PCLK_DI()					(RCC->AHB1ENR &= ~(1 << 6))
#define GPIOH_PCLK_DI()					(RCC->AHB1ENR &= ~(1 << 7))
#define GPIOI_PCLK_DI()					(RCC->AHB1ENR &= ~(1 << 8))
#define GPIOJ_PCLK_DI()					(RCC->AHB1ENR &= ~(1 << 9))
#define GPIOK_PCLK_DI()					(RCC->AHB1ENR &= ~(1 << 10))

/* CLock disable macros for I2Cx peripherals */

#define I2C1_PCLK_DI()					(RCC->APB1ENR &= ~(1 << 21))
#define I2C2_PCLK_DI()					(RCC->APB1ENR &= ~(1 << 22))
#define I2C3_PCLK_DI()					(RCC->APB1ENR &= ~(1 << 23))
#define I2C4_PCLK_DI()					(RCC->APB1ENR &= ~(1 << 24))

/* CLock disable macros for SPIx peripherals */

#define SPI1_PCLK_DI()					(RCC->APB2ENR &= ~(1 << 12))
#define SPI2_PCLK_DI()					(RCC->APB1ENR &= ~(1 << 14))
#define SPI3_PCLK_DI()					(RCC->APB1ENR &= ~(1 << 15))
#define SPI4_PCLK_DI()					(RCC->APB2ENR &= ~(1 << 13))
#define SPI5_PCLK_DI()					(RCC->APB2ENR &= ~(1 << 20))
#define SPI6_PCLK_DI()					(RCC->APB2ENR &= ~(1 << 21))

/* CLock disable macros for USARTx peripherals */

#define USART1_PCLK_DI()					(RCC->APB2ENR &= ~(1 << 4))
#define USART2_PCLK_DI()					(RCC->APB1ENR &= ~(1 << 17))
#define USART3_PCLK_DI()					(RCC->APB1ENR &= ~(1 << 18))
#define UART4_PCLK_DI()						(RCC->APB1ENR &= ~(1 << 19))
#define UART5_PCLK_DI()						(RCC->APB1ENR &= ~(1 << 20))
#define USART6_PCLK_DI()					(RCC->APB2ENR &= ~(1 << 5))
#define USART7_PCLK_DI()					(RCC->APB1ENR &= ~(1 << 30))
#define USART8_PCLK_DI()					(RCC->APB1ENR &= ~(1 << 31))

/* CLock disable macros for SYSCFG peripherals */

#define SYSCFG_PCLK_DI()					(RCC->APB2ENR &= ~(1 << 14))


/* GPIO Port Reset macros */

#define GPIOA_REG_RST()					do { (RCC->AHB1RSTR |= (1 << 0));	(RCC->AHB1RSTR &= ~(1 << 0));} while (0) // setting and resetting the bit.
#define GPIOB_REG_RST()					do { (RCC->AHB1RSTR |= (1 << 1));	(RCC->AHB1RSTR &= ~(1 << 1));} while (0)
#define GPIOC_REG_RST()					do { (RCC->AHB1RSTR |= (1 << 2));	(RCC->AHB1RSTR &= ~(1 << 2));} while (0)
#define GPIOD_REG_RST()					do { (RCC->AHB1RSTR |= (1 << 3));	(RCC->AHB1RSTR &= ~(1 << 3));} while (0)
#define GPIOE_REG_RST()					do { (RCC->AHB1RSTR |= (1 << 4));	(RCC->AHB1RSTR &= ~(1 << 4));} while (0)
#define GPIOF_REG_RST()					do { (RCC->AHB1RSTR |= (1 << 5));	(RCC->AHB1RSTR &= ~(1 << 5));} while (0)
#define GPIOG_REG_RST()					do { (RCC->AHB1RSTR |= (1 << 6));	(RCC->AHB1RSTR &= ~(1 << 6));} while (0)
#define GPIOH_REG_RST()					do { (RCC->AHB1RSTR |= (1 << 7));	(RCC->AHB1RSTR &= ~(1 << 7));} while (0)
#define GPIOI_REG_RST()					do { (RCC->AHB1RSTR |= (1 << 8));	(RCC->AHB1RSTR &= ~(1 << 8));} while (0)
#define GPIOJ_REG_RST()					do { (RCC->AHB1RSTR |= (1 << 9));	(RCC->AHB1RSTR &= ~(1 << 9));} while (0)
#define GPIOK_REG_RST()					do { (RCC->AHB1RSTR |= (1 << 10));	(RCC->AHB1RSTR &= ~(1 << 10));} while (0)

/* Macro for EXTI */

#define GPIO_BASEADDR_TO_CODE(x)		((x == GPIOA) ? 0:\
										(x == GPIOB) ? 1 :\
										(x == GPIOC) ? 2 :\
										(x == GPIOD) ? 3 :\
										(x == GPIOE) ? 4 :\
										(x == GPIOF) ? 5 :\
										(x == GPIOG) ? 6 :\
										(x == GPIOH) ? 7 :\
										(x == GPIOI) ? 8 :\
										(x == GPIOJ) ? 9 :\
										(x == GPIOK) ? 10 :0 )

/* Macros for IRQ Number from Vector table */

#define IRQ_NO_EXTI0					6
#define IRQ_NO_EXTI1					7
#define IRQ_NO_EXTI2					8
#define IRQ_NO_EXTI3					9
#define IRQ_NO_EXTI4					10
#define IRQ_NO_EXTI9_5					23
#define IRQ_NO_EXTI15_10				40

/* Macros for IRQ priority */

#define IRQ_PRIO_3						3
#define IRQ_PRIO_14						14


/* Generic Macros */

#define ENABLE								1
#define DISABLE								0
#define SET									ENABLE
#define RESET								DISABLE
#define GPIO_PIN_SET						SET
#define GPIO_PIN_RESET						RESET




#endif /* STM32F767XX_H_ */
